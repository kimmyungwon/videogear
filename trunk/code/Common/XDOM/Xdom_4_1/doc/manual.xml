<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0a1//EN" "file:///C%3a/Dokumente%20und%20Einstellungen/Dieter%20K%F6hler/Eigene%20Dateien/Dokumente/DocBook/docbkx50a1/docbookx.dtd">


<?xml-stylesheet alternate="yes" type="text/xsl"
href="C:\Eigene%20Dateien\Dokumente\DocBook\docbook-xsl-1.61.3\html\docbook.xsl"?>
-->

<?xml-stylesheet type="text/xsl" href="./style.xsl"?>

<book id="book">
<bookinfo>
<titleabbrev>XDOM 4.1.4</titleabbrev>
<title>Extended Document Object Model 4.1.4</title>
<subtitle>Delphi 5/6/7/8/2005/2006/2007 and Kylix 3 Implementation</subtitle>
<author><firstname>Dieter</firstname><surname>Köhler</surname></author>
<pubdate>December 2007</pubdate>
<legalnotice>

<para>LICENSE</para>

<para>The contents of the Extended Document Object Model files are subject to the Mozilla Public License Version 1.1 (the "License"); you may not use this files except in compliance with the License. You may obtain a copy of the License at "http://www.mozilla.org/MPL/"</para>

<para>Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific language governing rights and limitations under the License.</para>

<para>The Original Code is "XdomCore.pas".</para>

<para>The Initial Developer of the Original Code is Dieter Köhler (Heidelberg, Germany, "http://www.philo.de/"). Portions created by the Initial Developer are Copyright (C) 1999-2007 Dieter Köhler. All Rights Reserved.</para>

<para>Alternatively, the contents of this files may be used under the terms of the GNU General Public License Version 2 or later (the "GPL"), in which case the provisions of the GPL are applicable instead of those above. If you wish to allow use of your version of this files only under the terms of the GPL, and not to allow others to use your version of this files under the terms of the MPL, indicate your decision by deleting the provisions above and replace them with the notice and other provisions required by the GPL. If you do not delete the provisions above, a recipient may use your version of this file under the terms of any one of the MPL or the GPL.</para>

</legalnotice>

<othercredit>
<contrib>Many thanks to all people who supported this project by sending bug reports and bug fixes, wrote articles or encouraged me in other ways. Special thanks to (in alphabetical order): Ricardo Albuquerque, Alois Beck, Lars Behnke, Ron Bessems, Marco Bommeljé, David Burridge, David Butler, Vladimir Buzuev, Charlie Calvert, Marco Cantu', Simon Cusack, Peter Diesner, Andy Duggan, Bernard Eblin, Mark Edington, Chris Eyre, Marc Geldon, Massimo Maria Ghisalberti, Dieter Goebel, Carlos Andres Osorio Gonzalez, Hans-Eric Grönlund, Carmi Grushko, Tor Helland, Aaron Hochwimmer, Martin Holmes, Herbert Hrachovec, Eric H. Johnson, Jakob Jünger, Ahmed Knorn, Ivan Kossey, Bogdan Krusinski, Bjoern Latte, Li Ling, Mike Lischke, Mauricio Longo, Olaf Lösken, Robert Marquardt, Torsten Munkelt, Paul Nardone, Petr Nejedlik, Diego Novati, Radim Novotny, Nils Paluch, Marc Parenteau, Pedro de Paz, Matthew Peebles, Frank Plagge, Arne Plöse, Erik van der Poll, Ernst van der Pols, Lijun Qin, Jeff Rafter, John Romedahl, Paolo Salvan, Sebastian Scheffler, Miloslav Skácel, Bill Sorensen, Attila Szomor, Dirk Speidel, Ain Valtin, Marek Vasin, Serge Voloshenyuk, Karl Waclawek, Daniel Weber, Wouter van de Weerd, Marco Wobben, Matias Woloski, Eric Zurcher.</contrib>
</othercredit>
</bookinfo>

<preface>
<title>Preface</title>

<para>The eXtented Document Object Model (XDOM) provides several classes to represent the logical structure of well-formed XML documents and ways to access and manipulat them. Here, the term "document" is used in the broad sense - increasingly, XML is being used as a way of representing many different kinds of information that may be stored in diverse systems, and much of this would traditionally be seen as data rather than as documents. Nevertheless, XML presents this data as documents, and the Document Object Model may be used to manage this data.</para>

<para>XDOM is a Delphi 5/6/7/8/2005/2006/2007 and Kylix 3 Document Object Model implementation, suitable for Win32 as well as .NET progamming.  It closely follows the Document Object Model (DOM) specifications provided by the Word Wide Web Consortium (W3C).  There exist three versions of W3C's DOM: the basic DOM Level 1 [DOM 1] and the more advanced DOM Level 2 [DOM 2] and DOM Level 3 [DOM 3]. However, XDOM is not completely following the DOM specifications; therefore its status is that of a non-conforming DOM implementation.  More information about the DOM is available at the W3C's web-site at "http://w3.org".</para>

<para>XDOM implements the full DOM 1, the DOM 2 Core, XML Views and Traversal modules, and its own DTD Model, Parser and XPath modules.  The DOM 2 modifications and additions of DOM 1 are indicated in this manual by a number-sign (#). Where the XDOM implementation deviates from the DOM specifications or where some DOM methods have not been implemented yet, these modifications are indicated by an asterisk (*). The DOM specifications allow additional procedures and functions to improve the functionality of the implementation. This additions are indicated by a plus-sign (+). Due to the wide range of the additions this implementation was named eXtended Document Object Model (XDOM).</para>

<para>The latest version of this Software can be found at "http://www.philo.de/xml/". Please, report unknown bugs in the source code or in this documentation to the author via "service@philo.de" (make sure that you refer to the latest XDOM version). For known bugs, please consult the file 'BUGLIST.txt' which accompanies this release of the 'Extended Document Object Model'. For all other matters, please post to the openxml mailing list. Instructions how to join the mailing list can be found at "http://www.philo.de/xml/" as well.</para>

</preface>


<chapter>
<title>Overview</title>

  <para></para>

  <sect1>
  <title>Required Packages</title>

  <para>In order to use XDOM you must first install the Open XML Utility Library (version 1.x), which is available at "http://www.philo.de/xml/", on your Delphi or Kylix system.</para>
  </sect1>

  <sect1>
  <title>Supported XML Version</title>

  <para>Currently, XDOM supports only XML 1.0.</para>
  </sect1>

  <sect1>
  <title>Case Sensitivity in XDOM</title>

  <para>XDOM includes many methods that imply string matching. XML is explicitly case sensitive. For the purposes of XDOM, string matching takes place on a character code by character code basis, on the 16 bit value of a WideString. As such, XDOM assumes that any normalizations will take place in the application, before the XDOM structure trees are built. However, the XML Parser which is included in XDOM does not verify that the document being processed is in fully normalized form.</para>

  </sect1>

  <sect1>
  <title>Interface Reference Counting in Delphi for Win32 and XDOM</title>

  <para>Under Delphi for Win32 the standard implementation for interfaces in the TInterfacedObject class follows Microsoft's Component Object Model (COM).  At first glance, this seems to be a good idea, because suchg interfaces introduce automated garbage collection for objects to Delphi, promissing to redeem us from worries about memory leaks.  However, the matter is now worse than before. The TInterfacedObject class created the potential for an even more difficult to detect kind of memory leaks.  If the last interface variable pointing to a TInterfacedObject instance goes out of scope, the instance is freed, no matter whether an object variable to the instance still exists.  Source code cannot be checked for such harmful object variables at compile time.  Instead, such an automatically freed object remains unnoticed until the application later, perhaps in a completely different part of the source code, tries to access it.  Only debugging threads can be as unpleasant as tracing the causes for the resulting access violation.</para>

  <para>In other words: Using interfaces in combination with the TInterfacedObject class is not consistent with clean software design.</para>

  <para>Therefore, all classes using interfaces in XDOM under Delphi for Win32 do inherit from a non-reference-counted TUtilsNoRefCount base class which implements IUnknown as follows:</para>

  <para>
  <programlisting>
    function TUtilsNoRefCount._AddRef: Integer;
    begin
      Result := -1
    end;

    function TUtilsNoRefCount._Release: Integer;
    begin
      Result := -1
    end;

    function TUtilsNoRefCount.QueryInterface(const IID: TGUID;
      out Obj): HResult;
    begin
      if GetInterface(IID, Obj) then
        Result := 0
      else
        Result := E_NoInterface;
    end;
  </programlisting>
  </para>

  </sect1>

</chapter>

<chapter>
<title>Basic Classes (+)</title>
<para></para>

  <sect1>
  <title>Typed Constants</title>

  <para>
  <itemizedlist>

    <listitem>
    <para><emphasis> TDomTrinarean</emphasis></para>
    <para> TDomTrinarean defines multi-purpose constants which are used to represent values of a trinary state.</para>
    <para>Defined constants: T_UNKNOWN, T_TRUE, T_FALSE.</para>
    </listitem>

  </itemizedlist>
  </para>

  </sect1>
  
  <sect1>
  <title>Exception Classes</title>

  <para>XDOM operations only raise exceptions in <quote>exceptional</quote> circumstances, i.e. when an operation is impossible to perform (either for logical reasons, because data is lost, or because the implementation has become unstable). In general, XDOM methods raise exceptions in ordinary processing situation, such as out-of-bound errors when using TDomNodeList.</para>

  <para>
  <itemizedlist>
    <listitem>
    <para>
    <synopsis><errorname>EdomException</errorname> = class(<errorname>Exception</errorname>);</synopsis>
    This is the fundamental class of all DOM exceptions.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EIndex_Size_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if index or size is negative, or greater than the allowed value.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EHierarchy_Request_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if any node is inserted somewhere it doesn't belong.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EWrong_Document_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if a node is used in a different document than the one that created it (that doesn't support it)
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_Character_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an invalid name is specified.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENo_Data_Allowed_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if data is specified for a node which does not support data.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENo_Modification_Allowed_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to modify an object where modifications are not allowed.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENot_Found_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt was made to reference a node in a context where it does not exist.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENot_Supported_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if the implementation does not support the requested type of object or operation.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInuse_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to add an object that is already inuse elsewhere or add the same object twice.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_State_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to use an object that is not, or no longer, usable.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ESyntax_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an invalid or illegal string is specified.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_Modification_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to modify the type of the underlying object.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENamespace_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EWrong_DOM_Implementation_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an object is used in a different implementation than the one that created it (that doesn't support it)
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EParserException</errorname> = class(<errorname>EdomException</errorname>); (+)</synopsis>
    Raised if an illegal state was reached when parsing an XML document.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EXPath_Exception</errorname> = class(<errorname>EdomException</errorname>); (+)</synopsis>
    A base class common to all XPath specific exceptions.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EXPath_Invalid_Expression_Err</errorname> = class(<errorname>EXPath_Exception</errorname>); (+)</synopsis>
    Raised if an XPath expression has a syntax error or otherwise is not a legal expression.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EXPath_Invalid_Function_Call_Err</errorname> = class(<errorname>EXPath_Exception</errorname>); (+)</synopsis>
    Raised if an error occurs during evaluation of an XPath function call.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EXPath_Type_Err</errorname> = class(<errorname>EXPath_Exception</errorname>); (+)</synopsis>
    Raised if the expression cannot be converted to return a requested type.
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TUtilsNoRefCount = class(TObject, IUnknown)</title>

  <para>TUtilsNoRefCount is a non-reference-counted implementation of IUnknown.</para>

  <para><emphasis>Protected Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function QueryInterface(const IID: TGUID; out Obj): HResult; stdcall; 
    <literallayout>
      Returns a reference to a specified interface if this 
      object supports that interface.  Even if successful,
      no reference counter is incremented.

      Parameters:
      - IID
         The globally unique identifier (GUID) of the 
         interface.

      Out Paramters:
      - Obj
         Returns the object's interface instance or nil 
         if the object does not support the interface.

      Return Value:
         0 if successful or E_NoInterface otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function _AddRef: Integer; stdcall; 
    <literallayout>
      Whenever the Delphi compiler comes across a 
      reference to an interface it inserts a call to its
      _AddRef method.  Usually the method increments a 
      reference counter, but this implementation does not.

      Return Value:
         Always -1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function _Release: Integer; stdcall; 
    <literallayout>
      Whenever an interface goes out of scope the Delphi 
      compiler inserts a call to its _Release method.
      Usually the method decrements a reference 
      counter, but this implementation does not.

      Return Value:
         Always -1.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect1>


  <sect1>
  <title>TDomBaseComponent = class(TComponent)</title>

  <para>TDomBaseComponent is the base class that is the ancestor for all XDOM components. TDomBaseComponent implements a property to access XDOM version number information.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property XDOMVersion: WideString (readonly)
    <literallayout>
      The version number of XDOM in use.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TDomImplementation = class(TDomBaseComponent) (*+)</title>
  <para> TDomImplementation provides a number of methods for performing operations that are independent of any particular instance of the document object model.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property ResourceResolver: TCustomResourceResolver 
    <literallayout>
      The resource resolver to be used whenever an 
      external resource needs to be retrieved either
      during document parsing and validation or when
      the resolveResource function was called. 
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property Documents: TDomNodeList (readonly)
    <literallayout>
      A list of all TDomCustomDocument objects owned by 
      this TDomImplementation component.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property ErrorEventsDisabled: Boolean (readonly)
    <literallayout>
      Returns 'True' if error events have been temporarily
      disabled by a call to disableErrorEvents, otherwise
      'False' is returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property OnAttrModified: TDomAttrModifiedEvent
    <literallayout>
  TDomAttrModifiedEvent =
    procedure(Sender: TObject;
              ModifiedNode: TDomNode;
              AttrChange: TDomAttrChange;
              RelatedAttr: TDomAttr)
            of object;

      This event is triggered when an attribute belonging to
      an element of a document created by this TDomImplementation
      object was changed.  Note that this event is not triggered
      when an attribute was changed which has no owner element.

      Parameters:
      - Sender
         This TDomImplementation object that calls the
         event.
      - ModifiedNode
         The TDomElement node whose attribute changed.
      - AttrChange
         Indicates whether the related TDomAttr node was
         modified, added, or removed.  String based replacement
         of an attribute value will be viewed as a modification
         of the TDomAttr node since its identity does not change.
         Subsequently replacement of the TDomAttr node with a
         different TDomAttr node is viewed as the removal of the
         first TDomAttr node and the addition of the second.
      - RelatedAttr
         Indicates the TDomAttr node whose value has been
         affected.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnCharacterDataModified: TDomNotifyNodeEvent
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(Sender: TObject;
              Node: TDomNode)
            of object;

      This event is triggered after character data within a
      node owned by a document created by this TDomImplementation
      object has been modified but the node itself has not been
      inserted or deleted. This event is also triggered by
      modifications to TDomProcessingInstruction nodes.

      Parameters:
      - Sender
         This TDomImplementation object that calls the
         event.
      - Node
         The TDomText, TDomComment, TDomCDATASection or
         TDomProcessingInstruction node whose value changed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnError: TDomErrorEvent
    <literallayout>
  TDomErrorEvent =
    procedure(    Sender: TObject;
                  Error: TDomError;
              var Go: Boolean)
            of object;

      This event is called when this TDomImplementation
      object receives an error notification through its
      HandleError method (which might also be triggered
      automatically by some operations such as validating
      a document).
      
      Error events may be temporarily disabled by calling
      the DisableErrorEvents procedure.

      Parameters:
      - Sender
         The object that called the event.  In case of
         an internal call, this is the implementation
         itself.
      - Error
         The error object that describes the error, this
         object may be reused by the Sender across
         multiple calls to the handleError method.

      Var Parameters:
      - Go
         If 'True' the DomImplementation should continue as
         if the error didn't happen when possible, if the
         method returns 'False' then the DomImplementation
         should stop the current processing when possible.
         The default is 'True' if the value of the 'severity'
         property of 'error' is DOM_SEVERITY_WARNING or
         DOM_SEVERITY_ERROR; the default is 'False' if the
         value of the 'severity' property of 'error' is
         DOM_SEVERITY_FATAL_ERROR.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) OnNodeClearing: TDomNotifyNodeEvent
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(Sender: TObject;
              Node: TDomNode)
            of object;

      This event is triggered when a node owned by a
      document created by this TDomImplementation
      is about to be cleared. This event is
      dispatched before the node is cleared.

      Parameters:
      - Sender
         This TDomImplementation object that calls the
         event.
      - Node
         The node about to be cleared.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) OnNodeInserted: TDomNotifyNodeEvent
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(Sender: TObject;
              Node: TDomNode)
            of object;

      This event is triggered after a node owned by a
      document created by this TDomImplementation
      has been added as a child of another node. This event
      is dispatched after the insertion has taken place.

      Parameters:
      - Sender
         This TDomImplementation object that calls the
         event.
      - Node
         The node being inserted.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) OnNodeRemoving: TDomNotifyNodeEvent
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(Sender: TObject;
              Node: TDomNode)
            of object;

      This event is triggered when a node owned by a
      document created by this TDomImplementation
      is about to be removed as a child of another node.
      This event is dispatched before the node is
      removed.

      Parameters:
      - Sender
         This TDomImplementation object that calls the
         event.
      - Node
         The node about to be removed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) OnRequestXPathFunctionResult: TDomRequestXPathFunctionResultEvent
    <literallayout>
  TDomRequestXPathFunctionResultEvent = 
    procedure(const NamespaceUri,
                    LocalName: WideString;
              const ContextNode: TDomNode;
              const ContextPosition: Integer;
              const ContextSize: Integer;
              const Arguments: TList;
                var Value: TDomXPathCustomResult)
            of object;

      This event is called when a user-defined function
      is found while an XPath expression is evaluated. 
      In this case an OnRequestXPathFunctionResult
      handler must return a TDomXPathCustomResult
      descendant which represents the return value of
      the user-defined function.
      
      Parameters:
      - NamespaceURI
         The namespace URI of the user-defined 
         function.
      - LocalName
         The local name of the user-defined function.
      - ContextNode
         The current context node for evaluating
         the user-defined function.  Note that this 
         is not necessarily the same as the context 
         node of the XPath expression evaluated 
         (cf. [XPath 1.0], sec. 1).
      - ContextPosition
         The current context position of the current
         context node.
      - ContextSize
         The current context size of the context of
         the current context node.
      - Arguments
         A TList object containing the arguments of
         the user-defined function represented as 
         TDomXPathExpr objects.  The event handler 
         must not change the contents of the TList 
         object!

      Var Parameters:
      - Value
         A TDomXPathCustomResult descendant which
         represents the return value of the 
         user-defined function.  When passing the 
         object it is no longer in scope of the 
         application.  In other words: XDOM 
         evaluates and then frees it.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) OnRequestXPathVariable: TDomRequestXPathVariableEvent
    <literallayout>
  TDomRequestXPathVariableEvent = 
    procedure(const Sender: TXPathExpression;
              const NamespaceURI,
                    LocalName: WideString;
                var Value: TDomXPathCustomResult) 
            of object;

      This event is called when a variable reference is
      found while an XPath expression is evaluated. In
      this case an OnRequestXPathVariable handler must
      return a TDomXPathCustomResult descendant which 
      represents the value for the specified variable 
      name.
      
      Note that information about the expression context
      is available via the contextNode and ownerDocument
      property of the TXPathExpression sender object.

      Parameters:
      - Sender
         The TXPathExpression object that requests
         the variable binding information.
      - NamespaceURI
         The namespace URI the variable reference is
         bound to.
      - LocalName
         The local name of the variable reference.

      Var Parameters:
      - Value
         A TDomXPathCustomResult descendant which
         represents the value the specified variable
         reference is bound to in the expression 
         context.  When passing the object it is no 
         longer in scope of the application.  In 
         other words: XDOM evaluates and then frees 
         it.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

  <listitem>
  <para>
    constructor Create(AOwner: TComponent); override;
    <literallayout>
      Creates a new TDomImplementation object.
      Note that TDomImplementation objects are
      automatically being created when adding them
      from the component's palette onto a form.

      Parameters:
      - AOwner
         The component that holds the new
         TDomImplementation object.
    </literallayout>
  </para>
  </listitem>

  <listitem>
  <para>
(+) procedure Clear; virtual;
    <literallayout>
      Frees all TDomDocuments owned by this TDomImplementation
      component.  If there exist TDomNodes, TDomNodeIterators, 
      or TDomTreeWalkers owned by a document object to be 
      freed, they are freed, too.  Afterwards, the 'documents'
      list is empty.
    </literallayout>
  </para>
  </listitem>

  <listitem>
  <para>
(+) procedure DisableErrorEvents; virtual;
    <literallayout>
      Call DisableErrorEvents to temporarily prevent 
      error events from occurring.
      
      DisableErrorEvents increments an internal counter 
      that EnableErrorEvents later decrements.  As long 
      as the counter is positive no error events do occur.
      The ErrorEventsDisabled property may be used to test
      whether error events are currently disabled.
      
      Every call to DisableErrorEvents must be followed 
      by a matching call to EnableErrorEvents. If an 
      exception could be raised after the call to 
      DisableErrorEvents, use a try...finally statement
      to ensure that EnableErrorEvents will always be 
      called.
    </literallayout>
  </para>
  </listitem>

  <listitem>
  <para>
(+) procedure EnableErrorEvents; virtual;
    <literallayout>
      Decrements the internal counter incremented by 
      DisableErrorEvents.  As long as the counter is 
      positive no error events do occur.  The 
      ErrorEventsDisabled property may be used to test 
      whether error events are currently disabled.
      
      Every call to DisableErrorEvents must be followed 
      by a matching call to EnableErrorEvents. If an 
      exception could be raised after the call to 
      DisableErrorEvents, use a try...finally statement
      to ensure that EnableErrorEvents will always be 
      called.
    </literallayout>
  </para>
  </listitem>

  <listitem>
  <para>
(+) function HandleError(const Sender: TObject;
                         const Error: TDomError): Boolean;
    <literallayout>
      HandleError is a callback function used by the
      DomImplementation itself and by various parser
      classes when an error occures while processing
      XML data, or when doing some other processing
      (e.g. validating a document).

      If an OnError event is specified for this
      DomImplementation, then this OnError event is called
      and the value of its 'go' var-parameter is passed as
      the return value of this method.

      If no OnError event is specified,  then 'True' is
      returned if the value of the 'error.severity'
      property is DOM_SEVERITY_WARNING or DOM_SEVERITY_ERROR,
      and 'False' is returned if the value of the
      'error.severity' property is DOM_SEVERITY_FATAL_ERROR.

      Parameters:
      - Sender
         The object that called the function.  If this
         DomImplementation itself calls the function, it
         passes itself as the sender.
      - Error
         The error object that describes the error, this
         object may be reused by the Sender across
         multiple calls to the HandleError method.

      Return value:
         If the HandleError method returns true the
         DomImplementation (or a calling Parser) should
         continue as if the error didn't happen when
         possible, if the method returns false then the
         DomImplementation (or the Parser) should stop
         the current processing when possible.

      Exceptions:
      - ENot_Supported_Err
         Raised if 'Error' is nil.
    </literallayout>
  </para>
  </listitem>

  <listitem>
  <para>
    function ResolveResourceAsStream(const ABaseURI: WideString;
                                       var PublicId,
                                           SystemId: WideString): TStream; override;
    <literallayout>
      Resolves a resource specified by an URI or a public 
      identifier by calling the resource resolver specified 
      in the ResourceResolver property and returns its 
      content in a newly created stream object.  

      Parameters:
      - ABaseURI
         The base URI of the resource to retrieve.

      Var Parameters:
      - PublicId
         When the function is called this parameter holds 
         the public identifier of the external entity to be
         resolved, or an empty WideString, if the public
         identifier is unknown.  The resource resolver
         may modify this value, e.g. to normalize public 
         identifiers or to retrieve a public identifier 
         from a system identifier.  The returned public 
         identifier, if any, may also be reported as part 
         of the location information when errors are reported.
      - SystemId
         When the function is called this parameter holds 
         the system identifier of the external entity to be 
         resolved, or an empty WideString, if the system 
         identifier is unknown. The resource resolver 
         may modify this value, e.g. to normalize system 
         identifiers or to retrieve a system identifier if 
         only a public identifier was specified.
          
      Return Value:
         A newly created stream containing the contents of
         resource with the specified URI, or nil if the 
         resource could not be retrieved.

      Exceptions:
      - ENot_Found_Err
         Raised if no resource resolver is assigned to this
         TDomImplementation component.
    </literallayout>
  </para>
  </listitem>

  <listitem>
  <para>
    procedure ResolveResourceAsWideString(const ABaseURI: WideString;
                                            var PublicId,
                                                SystemId: WideString;
                                            out S: WideString;
                                            out Error: TXmlErrorType); virtual;
    <literallayout>
      Resolves a resource specified by an URI or a public 
      identifier by calling the resource resolver specified 
      in the ResourceResolver property and transcodes it 
      into a UTF-16LE encoded WideString.

      Parameters:
      - ABaseURI
         The base URI of the resource to retrieve.

      Var Parameters:
      - PublicId
         When the function is called this parameter holds 
         the public identifier of the external entity to be
         resolved, or an empty WideString, if the public
         identifier is unknown.  The resource resolver
         may modify this value, e.g. to normalize public 
         identifiers or to retrieve a public identifier 
         from a system identifier.  The returned public 
         identifier, if any, may also be reported as part 
         of the location information when errors are reported.
      - SystemId
         When the function is called this parameter holds 
         the system identifier of the external entity to be 
         resolved, or an empty WideString, if the system 
         identifier is unknown. The resource resolver 
         may modify this value, e.g. to normalize system 
         identifiers or to retrieve a system identifier if 
         only a public identifier was specified.

      Out Parameters:
      - S
         The contents of the resource as a UTF-16LE encoded 
         WideString, if available.
      - Error
         If an attempt to resolve an entity failed the Error 
         parameter returns an error code indicating the type
         of the error.  If no error occurred ET_NONE is 
         returned.

      Exceptions:
      - ENot_Found_Err
         Raised if no resource resolver is assigned to this
         TDomImplementation component.
    </literallayout>
  </para>
  </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>XML Source Modeling</title>

  <para></para>

  <sect2>
  <title>TXmlSourceCode = class(TList);</title>

  <para>This class defines a sequential view of the source code of an XML document. It consists of a list of TXmlSourceCodePiece objects which represent distinct parts of an XML document such as e.g. text, start tags, end tags, empty element tags, or processing instructions. TXmlSourceCode objects might be created and used by an application in order to get easy access to a sequential rather than a tree view of an XML document. As TXMLSourceCode is derived from TList it holds the same properties, methods and functions. The following only describes where the TXmlSourceCode methods depart from the corresponding TList methods. For a full discribtion of the TList methods see the Delphi online manual.</para>

  <para><emphasis>Public properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property NameOfFirstTag: WideString
    <literallayout>
      The name of the first tag (start tag or empty element
      tag) in the list or an empty string if there is no start
      tag in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Text: WideString (readonly)
    <literallayout>
      Returns the TXmlSourceCodePiece objects in the 
      TXmlSourceCode object as a single WideString starting
      with a byte order mark ($feff).
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function Add(Item: TXmlSourceCodePiece): Integer;
    <literallayout>
      Adds a new source code piece to the end of the list
      setting its OwnerSourceCode to this TXMLSourceCode
      object, and calculates the 'offset' of the added item.
      If the previous item is a nil pointer the whole list
      is packed and afterwards the 'offset' of all list
      items is re-calculated.

      Exceptions:
      - EListError
         This native Delphi exception is raised if 'item'
         is nil or points to a TXmlSourceCodePiece object
         that is already inuse in this list or elsewhere.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Clear;
    <literallayout>
      Removes all source code pieces from the list
      setting their offset to '0' and their
      OwnerSourceCode to nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ClearAndFree;
    <literallayout>
      Removes all source code pieces from the list and
      frees them.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Delete(Index: Integer);
    <literallayout>
      Deletes the source code piece at the specified
      index position from the list setting its offset to
      '0' and its OwnerSourceCode to nil, and
      re-calculates the 'offset' of all list items whose
      index is greater than or equals the specified
      'index'. If a nil pointer is found during
      re-calculation the list is packed and afterwards
      the 'offset' of all list items is recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Exchange(Index1, Index2: Integer);
    <literallayout>
      Exchanges the two specified source code pieces and
      re-calculates the 'offset' of  all list items whose
      index is greater than or equals the smallest of the
      two specified index values. If a nil pointer is
      found during re-calculation the list is packed and
      afterwards the 'offset' of all list items is
      recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetPieceAtPos(pos: Integer): TXmlSourceCodePiece;
    <literallayout>
      Returns the source code piece that holds the
      character at the specified position in the XML
      document. If a nil pointer is found during
      evaluation the list is packed and the evaluation
      is started again.

      Parameters:
      - pos
         The position of the character in the XML
         document, starting with 1 for the first character.
      Return Value:
         The TXmlSourceCodePiece object which holds the
         character at the specified position in the XML
         document, or nil if there is no such
         TXmlSourceCodePiece object or pos is smaller
         than 1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Insert(Index: Integer; Item: TXmlSourceCodePiece);
    <literallayout>
      Adds a new source code piece at the specified
      index position to the list setting its
      OwnerSourceCode to this TXMLSourceCode object,
      and re-calculates the 'offset'  of all list
      items whose index is greater than or equals the
      specified 'index'. If a nil pointer is found
      during re-calculation the list is packed and
      afterwards the 'offset' of all list items is
      recalculated.

      Exceptions:
      - EListError
         This native Delphi exception is raised if
         'Item' is nil or points to a TXmlSourceCodePiece
         object that is already inuse in this list or
         elsewhere.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Move(CurIndex, NewIndex: Integer);
    <literallayout>
      Moves the source code piece from 'CurIndex' to
      'NewInde' and re-calculates the 'offset' of all
      list items whose index is greater than or equals
      the smallest of the two specified index values.
      If a nil pointer is found during re-calculation
      the list is packed and afterwards the 'offset'
      of all list items is recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Pack;
    <literallayout>
      Deletes all nil-pointers from the list and
      re-calculates the 'offset' of all list items.
      WARNING: Do not use nil pointers to remove items
      from the list unless to free them, because their
      OwnerSourceCode property will not be updated and
      any attempt to add or insert them again will lead
      to an EListError exception. Also take into account,
      that modifying the pointer items directly will not
      automatically re-calculate the list item's offset
      property, which might lead to hardly predictable
      results when modifying the list again, due to the
      re-calculation behavior described above. However,
      if you want to remove a series of source code
      pieces from the list, it will be slow to remove
      them individually, because that will always call
      the offset re-calculation routine. Instead set
      the respective pointer items to 'nil', free the
      objects and call the pack procedure which will
      automatically guarantee the list's integrity.

      Here is a code example:
    </literallayout>
    <programlisting>
        with MyXmlSourceCode do begin
          Items[IndexOf(MyXmlSourceCodePiece1)] := nil;
          Items[IndexOf(MyXmlSourceCodePiece2)] := nil;
          Items[IndexOf(MyXmlSourceCodePiece3)] := nil;
          MyXmlSourceCodePiece1.Free;
          MyXmlSourceCodePiece2.Free;
          MyXmlSourceCodePiece3.Free;
	  Pack; // Don't forget this!
        end;
    </programlisting>
    </para>
    </listitem>

    <listitem>
    <para>
    function Remove(Item: TXmlSourceCodePiece): Integer;
    <literallayout>
      Remove a source code piece from the list setting
      its offset to '0' and its OwnerSourceCode to nil,
      and re-calculates the 'offset' of all list items
      whose index is greater than or equals (now) the
      previous list position of the removed source code
      piece. If a nil pointer is found during
      re-calculation the list is packed and afterwards
      the 'offset' of all list items is recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Sort(Compare: TListSortCompare);
    <literallayout>
      Sorts the list according the specified Compare
      object and re-calculates the 'offset' of all list
      items.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TXmlSourceCodePiece = class</title>

  <para>This defines the class of objects which are used in TXmlSourceCode to represent a sequential view of the source code of an XML document.</para>

  <para><emphasis>Public properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property PieceType: TDomPieceType (readonly)
    <literallayout>
      The type of the code pieces.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Text: WideString
    <literallayout>
      The text of the code pieces.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Offset: Integer (readonly)
    <literallayout>
      The number of characters in the XML document which
      proceed this code piece.  The offset of the first
      code pieces is always '0'.  UTF-16 surrogates are
      counting as two characters.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerSourceCode: TXmlSourceCode (readonly)
    <literallayout>
      The TXmlSourceCode object that holds this code piece.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(Pt: TDomPieceType); virtual;
    <literallayout>
      Creates a new TXmlSourceCodePiece object.

      Parameters:
      - Pt
         The piece type of the new TXmlSourceCodePiece
         object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  </sect1>

</chapter>

<chapter>
<title>General Purpose Routines and Classes (+)</title>

<para></para>

  <sect1>
  <title>XML Whitespace Processing</title>

  <para>The following functions can be used to normalize or remove whitespace characters from a WideString.</para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    function <emphasis>NormalizeSpace</emphasis>(const S: WideString): WideString;
    </para>
    <para>Returns the specified WideString with spaces (#$20) normalized by stripping leading and trailing spaces and replacing sequences of spaces by a single space (#$20).</para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>NormalizeWhiteSpace</emphasis>(const S: WideString): WideString;
    </para>
    <para>Returns the specified WideString with whitespace normalized by stripping leading and trailing whitespace and replacing sequences of whitespace characters by a single space (#$20).</para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>TrimWhitespace</emphasis>(const S: WideString): WideString;
    </para>
    <para>TrimWhitespace removes leading and trailing withespace characters from the given string S.</para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>TrimWhitespaceLeft</emphasis>(const S: WideString): WideString;
    </para>
    <para>TrimWhitespaceLeft returns a copy of the string S with leading withespace characters removed.</para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>TrimWhitespaceRight</emphasis>(const S: WideString): WideString;
    </para>
    <para>TrimWhitespaceRight returns a copy of the string S with trailing withespace characters removed.</para>
    </listitem>

  </itemizedlist>
  </para>

  </sect1>


  <sect1>
  <title>XML Namespace Processing</title>
  <para>The following functions serve to extract the prefix resp. local name of a qualified name as defined in [XML Namespaces].</para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    function <emphasis>XMLExtractPrefix</emphasis>
	(const QualifiedName: WideString): WideString;
    <para>Extracts the prefix from a qualified name.</para>
    <literallayout>
      Parameters:
      - QualifiedName
         The qualified name whose prefix is to be extracted.

      Return Value:
         The prefix of the specified qualified name, or an
         empty WideString if the qualified name has no prefix.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name is not
         wellformed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>XMLExtractLocalName</emphasis>
	(const QualifiedName: WideString): WideString;
    <para>Extracts the local name from a qualified name.</para>
    <literallayout>
      Parameters:
      - QualifiedName
         The qualified name whose local name is to be extracted.

      Return Value:
         The loacl name of the specified qualified name.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name is not
         wellformed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>xmlExtractPrefixAndLocalName</emphasis>
	(QualifiedName: WideString;
	out Prefix,
	LocalName: WideString): Boolean;
    <para>Extracts the prefix and the local name from a qualified name.</para>
    <literallayout>
      Parameters:
      - QualifiedName
         The qualified name whose prefix and local name is to
         be extracted.

      Return Parameters:
      - Prefix
         The prefix of the specified qualified name, or an
         empty WideString if either the specified qualified
         name has no prefix or the specified qualified name
         is not wellformed.
      - LocalName
         The local name of the specified qualified name, or
         an empty WideString if either the specified qualified
         name has no prefix or the specified qualified name
         is not wellformed.

      Return Value:
         'True' if the specified qualified name is wellformed,
         'False' otherwise.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  </sect1>

  <sect1>
  <title>Entity Reference Conversion</title>
  <para>The following functions serve as conversion functions for predefined entity references:</para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    function <emphasis>EscapeDelimiters</emphasis>
      (const S: WideString): WideString;
    <literallayout>
      Escapes every delimiter in S with its corresponding
      predefined entity reference as specified in [XML 1.0],
      sect. 4.6.  In particular:
          " is replaced by &amp;quot;
          &amp; is replaced by &amp;amp;
          ' is replaced by &amp;apos;
          &lt; is replaced by &amp;lt;
          &gt; is replaced by &amp;gt;

      Parameters:
      - S
         The UTF-16LE encoded WideString to be translated.

      Return Value:
         A UTF-16LE encoded WideString containing the
         result of the translation.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect1>

  <sect1>
  <title>Character Reference Conversion</title>
  <para>The following functions serve as conversion functions for character references:</para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    function <emphasis>ResolveCharRefs</emphasis>
      (const S: WideString): WideString;
    <literallayout>
      Resolves all character references in S.

      Parameters:
      - S
         A UTF-16LE WideString whose character references
         are to be resolved.

      Return Value:
         A UTF-16LE WideString with resolved character
         references.

      Exceptions:
      - EConvertError
         Raised if S contains an invalid character, a
         non well-formed entity reference, or an invalid
         character reference value.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>XmlCharRefToInt</emphasis>
      (const S: WideString): Integer;
    <literallayout>
      Converts a character reference into its Integer
      value. A character reference has the form &amp;#n;
      or &amp;#xh;, where n is a decimal number out of
      the interval [0;1114111] or h is a hexadecimal
      number out of the interval [0000;10FFFF]. The
      character reference must also refer to a valid
      xml-character. If that is not true an EConvertError
      is raised.

      Parameters:
      - S
         The character reference being transformed.

      Return Value:
         The Integer value of the character reference.

      Exceptions:
      - EConvertError
          This Delphi exception is raised if S is not a
          valid character reference value.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>XmlCharRefToStr</emphasis>
      (const S: WideString): WideString;
    <literallayout>
      Converts a character reference into a UTF-16LE
      conformal WideString. A character reference has
      the form &amp;#n; or &amp;#xh;, where n is a
      decimal number out of the interval [0;1114111]
      or h is a hexadecimal number out of the interval
      [0000;10FFFF]. The character reference must also
      refer to a valid xml-character. If that is not
      true an EConvertError is raised. If the value of
      the character reference exceeds $FFFF it is
      transformed into a UTF-16LE surrogate.

      Parameters:
      - S
         The character reference being transformed.

      Return Value:
         A UTF-16LE conformal WideString of the
         character reference.

      Exceptions:
      - EConvertError
         This Delphi exception is raised if S is not
         a valid character reference value.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>XmlIntToCharRef</emphasis>
      (const Value: Integer): WideString;
    <literallayout>
      Converts an Integer value into a character
      reference of the form '&amp;#Value;'.

      Parameters:
      - Value
	 The Integer value being transformed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>XmlIntToCharRefHex</emphasis>
      (const Value: Integer): WideString;
    <literallayout>
      Converts an Integer value into a hexadecimal
      character reference of the form '&amp;#xHexValue;'.

      Parameters:
      - Value
	 The Integer value being transformed.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>

</chapter>


<chapter>
<title>The Document Object Model</title>

<para>XML documents have a logical structure which is very much like a tree. In XDOM, documents are not only represent as a data structure, but modeled using objects which have functions and identity. With the Document Object Model, programmers can build documents, navigate their structure, and add, modify, or delete elements and content. Anything found in an XML document can be accessed, changed, deleted, or added using the Document Object Model.</para>

  <sect1>
  <title>Typed Constants</title>

  <sect2>
  <title>TDomOperationType (+)</title>

  <para>An Integer indicating the type of operation being performed on a node.</para>
  <para><emphasis>Defined constants:</emphasis>
     OT_NODE_ADOPTED, OT_NODE_CLONED, OT_NODE_DESTROYED, OT_NODE_IMPORTED, OT_NODE_RENAMED.
  </para>
  </sect2>


  <sect2>
  <title>TDomAttrChange (+)</title>

  <para> TDomAttrChange indicates in which way an attribute was changed in events of type TDomAttrModifiedDocEvent or TDomAttrModifiedEvent.</para>
  <para><emphasis>Defined constants:</emphasis>
     AC_ADDITION, AC_MODIFICATION, AC_REMOVAL.
  </para>
  </sect2>

  <sect2>
  <title>TDomEntityResolveOption (+)</title>

  <para> TDomEntityResolveOption defines constants which are used as parameters to control entity reference expansion during document validation.</para>
  <para><emphasis>Defined constants:</emphasis>
     erReplace, erExpand.
  </para>
  </sect2>


  <sect2>
  <title>TDomEntityType (+)</title>

  <para> TDomEntityType indicating the type of an entity.</para>
  <para><emphasis>Defined constants:</emphasis>
     etExternal_Entity, etInternal_Entity.
  </para>
  </sect2>


  <sect2>
  <title>TDomNodeType (+)</title>

  <para> TDomNodeType defines all valid node types.</para>

  <para>Defined Constants:</para>
  <para>
  <itemizedlist>

    <listitem>
    <para><emphasis>ntUnknown</emphasis>
      The type of the node is not specified.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntElement_Node</emphasis>
      The node is a TDomElement.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntAttribute_Node</emphasis>
      The node is a TDomAttr.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntText_Node</emphasis>
      The node is a TDomText.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntCDATA_Section_Node</emphasis>
      The node is a TDomCDATASection.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntEntity_Reference_Node</emphasis>
      The node is a TDomEntityReference.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntProcessing_Instruction_Node</emphasis>
      The node is a TDomProcessingInstruction.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntComment_Node</emphasis>
      The node is a TDomComment.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntDocument_Node</emphasis>
      The node is a TDomDocument, TDomDocumentNS or TDomDocumentXPath.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntDocument_Fragment_Node</emphasis>
      The node is a TDomDocumentFragment.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntXPath_Namespace_Node</emphasis>
      The node is a TDomXPathNamespace.
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomStandalone (+)</title>

  <para> TDomStandalone is used to indicate the value of a Standalone Document Declaration as part of an XML declaration.</para>
  <para><emphasis>Defined constants:</emphasis>
     STANDALONE_YES, STANDALONE_NO, STANDALONE_UNSPECIFIED.
  </para>
  </sect2>


  <sect2>
  <title>TDomDocumentPosition (+)</title>

  <para> TDomDocumentPosition defines a set of constants which are used as the return value of the CompareDocumentPosition function of all node classes.</para>
  <para>Defined Constants:</para>
  <para>
  <itemizedlist>

    <listitem>
    <para><emphasis>Document_Position_Contained_By</emphasis>
      The node is contained by the reference node. A node which is contained is always following, too.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>Document_Position_Contains</emphasis>
      The node contains the reference node. A node which contains is always preceding, too.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>Document_Position_Disconnected</emphasis>
      The two nodes are disconnected, they do not have
      any common ancestor.  This is the case of two
      nodes that are not in the same document.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>Document_Position_Equivalent</emphasis>
      The two nodes have an equivalent position.  This
      is the case of two attributes that have the same
      ownerElement, of two XPath namespace nodes that have the same
      ownerElement, and of two nodes that are the same.
      Note that XPath namespace nodes are defined to occur before the attribute nodes of the same element.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>Document_Position_Following</emphasis>
      The node follows the reference node.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>Document_Position_Preceding</emphasis>
      The node precedes the reference node.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>Document_Position_Same_Node</emphasis>
      The two nodes are the same.  Two nodes that are
      the same have an equivalent position, though the
      reverse may not be true.
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomXMLDeclType (+)</title>

  <para> TDomXMLDeclType is used to indicate whether an input source starts with an XML declaration or a text declaration.</para>
  <para><emphasis>Defined constants:</emphasis>
     DT_XML_DECLARATION, DT_TEXT_DECLARATION, DT_XML_OR_TEXT_DECLARATION, DT_UNSPECIFIED.
  </para>
  </sect2>


  <sect2>
  <title>TDomXmlnsDeclType (+)</title>

  <para> TDomXmlnsDeclType is used to indicate whether an attribute is an XML namespace declaration.</para>
  <para><emphasis>Defined constants:</emphasis>
     NSDT_DEFAULT, NSDT_PREFIXED, NSDT_NONE.
  </para>
  </sect2>

  <sect2>
  <title>TDomPreparationStatus (+)</title>

  <para> TDomPreparationStatus is used to indicate the preparation status of a TDtdModel object.</para>
  <para><emphasis>Defined constants:</emphasis>
     PS_UNPREPARED, PS_INCOMPLETE, PS_INCOMPLETE_STANDALONE, PS_INCOMPLETE_NOT_STANDALONE, PS_INCOMPLETE_ABORTED, PS_INT_SUBSET_COMPLETED, PS_COMPLETED, PS_INEXISTANT.
  </para>
  </sect2>

  <sect2>
  <title>TDomDocTypeDeclTreatment (+)</title>

  <para> TDomDocTypeDeclTreatment is used by TXmlDomBuilder.DocTypeDeclTreatment to indicate whether a DTD model should automatically be prepared.</para>
  <para><emphasis>Defined constants:</emphasis>
     dtIgnore, dtCheckWellformedness, dtCheckValidity.
  </para>
  </sect2>

  </sect1>


  <sect1>
  <title>Event Classes</title>

  <sect2>
  <title>User Data Event Classes (+)</title>

  <para>When associating an object to a key on a node using TDomNode.SetUserData the application can provide an event handler that gets called when the node the object is associated to is being cloned, imported, or renamed. This can be used by the application to implement various behaviors regarding the data it associates to the nodes. TDomUserDataEvent defines that handler.</para>

  <para>
<literallayout>
  TDomUserDataEvent = 
    procedure(const Operation: TDomOperationType;
              const Key: WideString;
              const Data: TObject;
              const Src,
                    Dst: TDomNode) 
            of object;
</literallayout>
  </para>
  </sect2>

  <sect2>
  <title>Mutation Event Classes (+)</title>

  <para>The following event classes are used for mutation events in TDomNode and TDomImplementation objects.</para>

  <para>
<literallayout>
  TDomAttrModifiedEvent =
    procedure(Sender: TObject;
              ModifiedNode: TDomNode;
              AttrChange: TDomAttrChange;
              RelatedAttr: TDomAttr)
            of object;
</literallayout>
  </para>
  </sect2>

  <sect2>
  <title>Notification Event Classes (+)</title>

  <para>The following event classes are used to pass a single parameter to a listening object.</para>

  <para>
<literallayout>
  TDomNotifyNodeEvent =
    procedure(Sender: TObject;
              Node: TDomNode)
            of object;
</literallayout>
  </para>
  </sect2>

  </sect1>

  <sect1>
  <title>List Classes</title>
  
  <para>The following helper classes implement different kinds of node collections. The TDomNodeList class handles an ordered lists of nodes, such as the children of a node, or the elements returned by the TDomDocument.getElementsByTagName method. The TDomNamedNodeMape class handles unordered sets of nodes referenced by their Name property, such as the Attributes of an Element. TDomNodeLists and TDomNamedNodeMaps in the Document Object Model are <quote>live</quote>, that is, changes to the underlying document structure are reflected in all relevant TDomNodeLists and TDomNamedNodeMaps. For example, if a Standard Document Object Model user gets a TDomNodeList object containing the children of an element, then subsequently adds more children to that element (or removes children, or modifies them), those changes are automatically reflected in the TDomNodeList without further action on the user's part. Likewise changes to a node in the tree are reflected in all references to that node in TDomNodeLists and TDomNamedNodeMaps.</para>

  <sect2>
  <title>TDomNodeList = class</title>

  <para> TDomNodeList provides an ordered collection of TDomNodes. The items in the TDomNodeList object are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Length: Integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance.
      The range of valid child node indices is '0'
      to 'length - 1' inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) function IndexOf(const Node: TDomNode): Integer; virtual;
    <literallayout>
      Returns the index of the item Node in the
      collection. If Node is not a member of the
      collection, -1 is returned.

      Parameters:
      - Node
         The node whose index is being retrieved.

      Return Value:
         The index position of the node in the
         collection, or -1 if Node is not a member
         of the collection.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const NodeList: TList);
    <literallayout>
      Creates a new instance of a TDomNodeList object.

      Parameters:
      - NodeList
         The collection of nodes which is to be
         accessed by this TDomNodeList, given as a
         TList.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Item(const Index: Integer): TDomNode; virtual;
    <literallayout>
      Returns the indexth item in the collection.
      If index is greater than or equal to the number
      of nodes in the list, nil is returned.

      Parameters:
      - Index
         Index into the collection

      Return Value:
         The node at the index position in the
         collection, or nil if that is not a valid
         index.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomElementsNodeList = class( TDomNodeList) (+)</title>

  <para> TDomElementsNodeList provides the abstraction of an ordered collection of TDomElement child nodes of a TDomDocument. The items in the NodeList are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property Length: Integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance.
      The range of valid child node indices is '0'
      to 'length - 1' inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) constructor Create(const QueryName: WideString; const StartElement:
 TDomNode);
    <literallayout>
      Creates a new instance of a TDomElementsNodeList
      object.

      Parameters:
      - QueryName
         The tagname of the TDomElement nodes that are
         accessed through the TDomElementsNodeList. If
         QueryName has the value '*' then every
         TDomElement node is being retrieved.
      - StartElement
         The TDomElementsNodeList only retrieves the
         TDomElement nodes which are descendants of the
         StartElement.  The StartElement itself is not
         being retrieved.  To retrieve all TDomElement
         nodes the StartElement should be set to the
         TDomDocument object of a document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function IndexOf(const Node: TDomNode): Integer; virtual;
    <literallayout>
      Returns the index of the item Node in the
      collection.  If Node is not a member of the
      collection, -1 is returned.

      Parameters:
      - Node
         The node whose index is being retrieved.

      Return Value:
         The index position of the node in the
         collection, or -1 if Node is not a member
         of the collection.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function Item(const Index: Integer): TDomNode; virtual;
    <literallayout>
      Returns the indexth item in the collection.
      If index is greater than or equal to the
      number of nodes in the list, nil is returned.

      Parameters:
      - Index
         Index into the collection
      Return Value:
         The node at the index position in the
         collection, or nil if that is not a valid
         index.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomElementsNodeListNS = class( TDomNodeList) (+)</title>

  <para> TDomElementsNodeListNS provides the abstraction of an ordered collection of TDomElement child nodes of a namespace-aware document. The items in the NodeList are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property Length: Integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance.
      The range of valid child node indices is '0'
      to 'length - 1' inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) constructor Create(const QueryNamespaceURI,
                             QueryLocalName: WideString;
                       const StartElement: TDomNode); virtual;
    <literallayout>
      Creates a new instance of a TDomElementsNodeList
      object;

      Parameters:
      - QueryNamespaceURI
         The namespace URI of the TDomElement nodes to
         mach on.  The special value '*' matches all
         namespaces.
      - QueryLocalName
         The local name of the TDomElement nodes to
         mach on. The special value '*' matches all
         local names.
      - StartElement
         The TDomElementsNodeList only retrieves the
         TDomElement nodes which are descendants of
         the StartElement.  The StartElement itself
         is not being retrieved.  To retrieve all
         TDomElement nodes the StartElement should be
         set to the TDomDocumentNS object of a document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function IndexOf(const Node: TDomNode): Integer; virtual;
    <literallayout>
      Returns the index of the item Node in the
      collection.  If Node is not a member of the
      collection, -1 is returned.

      Parameters:
      - Node
         The node whose index is being retrieved.

      Return Value:
         The index position of the node in the
         collection, or -1 if Node is not a member
         of the collection.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function Item(const Index: Integer): TDomNode; virtual;
    <literallayout>
      Returns the indexth item in the collection.
      If index is greater than or equal to the
      number of nodes in the list, nil is returned.

      Parameters:
      - Index
         Index into the collection

      Return Value:
         The node at the index position in the
         collection, or nil if that is not a valid
         index.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomNamedNodeMap = class( TDomNodeList) (#*)</title>

  <para>Objects implementing the TDomNamedNodeMap object are used to represent collections of nodes that can be accessed by name. Items contained in a TDomNamedNodeMap object are not maintained in any particular order. Objects contained in an object implementing TDomNamedNodeMap object may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a TDomNamedNodeMap object.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Length: Integer (readonly)
    <literallayout>
      The number of nodes in the TDomNamedNodeMap
      instance.  The range of valid child node
      indices is '0' to 'length - 1' inclusive.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property NamespaceAware: Boolean (readonly)
    <literallayout>
      Returns 'True' if the TDomNamedNodeMap object
      is namespace aware, otherwise 'False'.  The
      value of namespaceAware is always the same as
      the value of the owner node of this
      TDomNamedNodeMap object. If it has no owner
      node the value of namespaceAware is the
      default value specified in the constructor.

      This property is by default false. It can be
      switched as long as the TDomNamedNodeMap has
      no child nodes.

      If namespaceAware is 'True', calling the following
      methods will raise an ENamespace_Err exception:
      getNamedItem, removeNamedItem, setNamedItem.

      If namespaceAware is false, calling the following
      methods will raise an ENamespace_Err exception:
      getNamedItemNS, removeNamedItemNS, setNamedItemNS.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OwnerNode: TDomNode (readonly)
    <literallayout>
      The TDomNode which uses the TDomNamedNodeMap,
      or nil if the TDomNamedNodeMap is not used by
      a TDomNode.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property ReadOnly: Boolean (readonly)
    <literallayout>
      Returns 'True' if the TDomNamedNodeMap object
      is readonly, otherwise 'False'.  The value of
      readOnly is always the same as the value of
      the owner node of this TDomNamedNodeMap object,
      or 'False' if it has no owner node.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) function RemoveItem(const Arg: TDomNode): TDomNode; virtual;
    <literallayout>
      Removes a node. [Not yet implemented: If the
      removed node is a TDomAttr with a default
      value it is immediately replaced.]

      Paramters:
      - Arg
         The node to remove.

      Return Value:
         The node removed from the list.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this TDomNamedNodeMap is readonly.
      - ENot_Found_Err
         Raised if Arg is not in the list.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TDomNode;
                       const NodeList: TList;
                       const AllowedNTs: TDomWhatToShow;
                       const DefaultNamespaceAware: Boolean); virtual;
    <literallayout>
      Creates a new instance of TDomNamedNodeMap.

      Parameters:
      - AOwner
         The node which uses the TDomNamedNodeMap,
         or nil if the TDomNamedNodeMap is not used by
         a node.
      - NodeList
         The collection of nodes which is to be accessed
         by this TDomNamedNodeMap, given as a TList.
      - AllowedNTs
         A set of TDomNodeType objects that indicates
         which types of nodes are allowed in this
         named node map.
      - DefaultNamespaceAware
         Specifies the value of the namespaceAware
         property if no owner node was specified.
         If an owner node was specified the value
         of defaultNamespaceAware is irrelevant.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function GetNamedItem(const Name: WideString): TDomNode;
    <literallayout>
      Retrieves a node specified by name.

      Parameters:
      - Name
         The name of the node to retrieve.

      Return Value:
         A TDomNode (of any type) with the specified
         nodeName, or nil if the map does not contain
         a node with the given name.

      Exceptions:
      - ENamespace_Err (+)
         Raised if namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function GetNamedItemNS(const NamespaceURI,
                                  LocalName: WideString): TDomNode;
    <literallayout>
      Retrieves a node specified by local name and
      namespace URI.

      Parameters:
      - NamespaceURI
         The namespace URI of a node to retrieve.
      - LocalName
         The local name of a node to retrieve.

      Return Value:
         A TDomNode (of any type) with the specified local
         name and namespace URI, or nil if the map does
         not contain a node with the given local  name
         and namespace UR.

      Exceptions:
      - ENamespace_Err (+)
         Raised if namespaceAware is false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Item(const Index: Integer): TDomNode; virtual;
    <literallayout>
      Returns the indexth item in the map. If index is
      greater than or equal to the number of nodes in
      the map, nil is returned.

      Parameters:
      - Index
         Index into the map.

      Return Value:
         The node at the indexth position in the
         TDomNamedNodemmap, or nil if that is not a
         valid index.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function RemoveNamedItem(const Name: WideString): TDomNode; virtual;
    <literallayout>
      Removes a node specified by name.

      Parameters:
      - Name
         The nodeName of the node to remove. [* not yet
         implemented: When this TDomNamedNodeMap contains
         the attribute attached to an element, as returned
         by the attributes property of the TDomNode class,
         if the removed attribute is known to have a default
         value, an attribute immediately appears containing
         the default value as well as the corresponding
         namespace URI, local name, and prefix when applicable]

      Return Value:
         The node removed from the map if such a name exists.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this TDomNamedNodeMap is readonly.
      - ENot_Found_Err
         Raised if there is no node named name in the map.
      - ENamespace_Err (+)
         Raised if namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function RemoveNamedItemNS(const NamespaceURI,
                                     LocalName: WideString): TDomNode; virtual;
    <literallayout>
      Removes a node specified by local name and namespace
      URI.

      Parameters:
      - NamespaceURI
         The namespace URI of a node to remove.
      - LocalName
         The local name of a node to remove. [* Not yet
         implemented: When this TDomNamedNodeMap contains
         the attribute attached to an element, as returned
         by the attributes property of the TDomNode class,
         if the removed attribute is known to have a class
         value, an attribute immediately appears containing
         the default value as well as the corresponding
         namespace URI, local name, and prefix.]

      Return Value:
         The node removed from the map if such a local name
         and namespaceURI exists.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this TDomNamedNodeMap is readonly.
      - ENot_Found_Err
         Raised if there is no node named name in the map.
      - ENamespace_Err (+)
         Raised if namespaceAware is false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function SetNamedItem(const Arg: TDomNode): TDomNode; virtual;
    <literallayout>
      Adds a node using its nodeName property.  As the
      nodeName property is used to derive the name which
      the node must be stored under, multiple nodes of
      certain types (those that have a "special" string
      value) cannot be stored as the names would clash.
      This is seen as preferable to allowing nodes to be
      aliased.

      Parameters:
      - Arg
         A node to store in a named node map.  The node
         will later be accessible using the value of the
         'nodeName' property of the node.  If a node with
         that name is already present in the map, it is
         replaced by the new one.

      Return Value:
         If the new TDomNode replaces an existing node
         the replaced tdomNode is returned, otherwise nil
         is returned.

      Exceptions:
      - EWrong_Document_Err
         Raised if Arg is owned by a different document
         than the one that created the TDomNamedNodeMap.
      - ENo_Modification_Allowed_Err
         Raised if this TDomNamedNodeMap is readonly.
      - EInuse_Err (*)
         Raised if arg is a TDomAttr that is already an
         attribute of another Element object [*that
         means: if the ownerElement of the TDomAttr is
         neither nil nor identical with the ownerNode of
         the map]. The DOM user must explicitly clone
         Attr nodes to re-use them in other elements.
         [Also raised if arg is a TDomNode that is
         already a child of a node (if its parentNode
         property is not nil).+]
      - ENamespace_Err (+)
         Raised if namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function SetNamedItemNS(const Arg: TDomNode): TDomNode; virtual;
    <literallayout>
      Adds a node using its 'namespaceURI' and 'localName'
      property.  If a node with that namespace URI and
      that local name is already present in this map, it
      is replaced by the new one.

      Parameters:
      - Arg
         A node to store in a named node map. The node
         will later be accessible using the value of
         the 'namespaceUri' and 'localName' property of
         the node.  If a node with those namespace URI
         and local name is already present in the map, it
         is replaced by the new one.

      Return Value:
         If the new tdomNode replaces an existing node
         the replaced tdomNode is returned, otherwise nil
         is returned.

      Exceptions:
      - EWrong_Document_Err
         Raised if Arg was created from a different
         document than the one that created the
         TDomNamedNodeMap.
      - ENo_Modification_Allowed_Err
         Raised if this TDomNamedNodeMap is readonly.
      - EInuse_Err (*)
         Raised if arg is a TDomAttr that is already an
         attribute of another Element object [*that
         means: if the ownerElement of the TDomAttr is
         neither nil nor identical with the ownerNode of
         the map]. The XDOM user must explicitly clone Attr
         nodes to re-use them in other elements.  [Also
         raised if arg is a TDomNode that is already a
         child of a node (if its parentNode property is not
         nil).+]
      - ENamespace_Err (+)
         Raised if namespaceAware is false.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomOwnerNamedNodeMap = class(TPersistent) (+)</title>

  <para> TDomOwnerNamedNodeMap instances are used to represent collections of a certain type of TDomCustomNamedNodes that can be accessed by name.  Items in a TDomOwnerNamedNodeMap instance are not maintained in any particular order. Items contained in an object implementing a TDomOwnerNamedNodeMap instance may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a TDomOwnerNamedNodeMap instance.  TDomOwnerNamedNodeMap controls the memory of its objects, freeing an object when it is removed from the list with the Delete, RemoveItem, RemoveNamedItem or Clear method; or when the TDomOwnerNamedNodeMap instance is itself destroyed.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ItemClass: TDomCustomNodeClass (readonly)
    <literallayout>
      Indicates the class to which the items to be added
      to the TDomOwnerNamedNodeMap instance must belong.
      This class is set in the constructor.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Count: Integer (readonly)
    <literallayout>
      The number of items in the TDomOwnerNamedNodeMap
      instance.  The range of valid child node indices
      is 0 to Count-1 inclusive.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Items[Index: Integer]: TDomCustomNode (default) (readonly)
    <literallayout>
      Provides access to the TDomCustomNode objects
      stored in the TDomOwnerNamedNodeMap.  The
      'index' parameter indicates the index of the
      object, where 0 is the index of the first
      object, 1 is the index of the second object,
      and so on.

      Exceptions on retrieval:
      - EStringListError
         Raised if an invalid index was specified.
  </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AItemClass: TDomCustomNodeClass);
    <literallayout>
      Creates a new instance of TDomNamedNodeMap.

      Paramters:
      - AItemClass
         Indicates the class to which the items to be added
         to the TDomOwnerNamedNodeMap instance must belong.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Add(const Node: TDomCustomNode): Integer; virtual;
    <literallayout>
      Inserts a TDomCustomNode object into the list.

      Paramters:
      - Node
         The TDomCustomNode object to be inserted.

      Return Value:
         The index of the inserted object.

      Exceptions:
      - EHierarchy_Request_Err
         Raised if 'node' is not of the type indicated by
         the 'itemClass' property.
      - EStringListError
         Raised if a TDomCustomNode with the same 'nodeName'
         is already present in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Clear; virtual;
    <literallayout>
      Empties the items array and set 'count' to 0.
      'Clear' also frees all object stored in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Delete(const Index: Integer); virtual;
    <literallayout>
      Removes the item at a specific position from the
      list. The index is zero-based, so the first item
      has an index value of 0, the second item has an
      index value of 1, and so on.  Calling 'Delete'
      moves up all items in the items array that follow
      the deleted item, and reduces 'count'.  The
      deleted object is freed.

      Parameters:
      - Index
         The list index of the item to be deleted.

      Exceptions:
      - EStringListError
         Raised if an invalid index was specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ExtractItem(const Node: TDomCustomNode): TDomCustomNode; virtual;
    <literallayout>
      Removes a specified object from the list without
      freeing it.  After an object is removed, all the
      objects that follow it are moved up in index
      position and 'count' is decremented.

      Paramters:
      - Node
         The TDomCustomNode object to be removed.

      Return Value:
         The removed TDomCustomNode object.

      Exceptions:
      - EStringListError
         Raised if the list does not contain the
         specified object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetNamedItem(const Name: WideString): TDomCustomNode; virtual;
    <literallayout>
      Returns the TDomCustomNode object with the specified
      name.

      Paramters:
      - Name
         The NodeName of the TDomCustomNode object to
         be returned.

      Return Value:
         The TDomCustomNode object with the specified name
         or nil of no such object is in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function HasNamedItem(const Name: WideString): Boolean; virtual;
    <literallayout>
      Tests whether a TDomCustomNode object with the
      specified name is in the list.

      Paramters:
      - Name
         The 'nodeName' of the TDomCustomNode object to
         test.

      Return Value:
         'True' if a TDomCustomNode object with the
         specified name is in the list, otherwise 'False'
         is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function IndexOfItem(const Node: TDomCustomNode): Integer; virtual;
    <literallayout>
      Returns the index of the TDomCustomNode object in
      the list.

      Paramters:
      - Node
         The TDomCustomNode object to be searched.

      Return Value:
         The index of the specified object, or '-1' if
         no such object is in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function IndexOfNamedItem(const Name: WideString): Integer; virtual;
    <literallayout>
      Returns the index of the TDomCustomNode object
      with the specified name in the list.

      Paramters:
      - Name
         The 'nodeName' of the TDomCustomNode object to be
         searched.

      Return Value:
         The index of the specified object, or '-1' if
         no TDomCustomNode object with the specified
         name is in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveItem(const Node: TDomCustomNode): Integer; virtual;
    <literallayout>
      Removes the specified TDomCustomNode object from
      the list and frees the object.

      Paramters:
      - Node
         The TDomCustomNode object to be removed.

      Return Value:
         The index of the TDomCustomNode object before
         it was removed, or '-1' if no TDomCustomNode
         object with the specified name is in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveNamedItem(const Name: WideString): Integer; virtual;
    <literallayout>
      Removes the TDomCustomNode object with the
      specified name from the list and frees the object.

      Paramters:
      - Name
         The 'nodeName' of the TDomCustomNode object to be
         removed.

      Return Value:
         The index of the TDomCustomNode object before
         it was removed, or '-1' if no TDomCustomNode
         object with the specified name is in the list.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  </sect1>
  
  

  <sect1>
  <title>Node Classes</title>
  
<!--
<para>The XPath language (see [XPath 1.0]), used for addressing parts of an XML document, models an XML document differently from the Document Object Model as specified in [DOM 2].</para>
-->

  <para>XDOM represents XML documents as a tree of node objects of different types. The class hierarchy of the Document Object Model nodes is as follows (only the node classes in bold are actually used in document trees):
  
  <literallayout>
TPersistent (from Classes.pas)
  |--TCustomOwnedNode (from TreeUtils.pas)
       |__ TDomCustomNode
            |__ TDomNode
                 |__<emphasis> TDomAttr</emphasis>
                 |__ TDomCharacterData
                 |    |__<emphasis> TDomComment</emphasis>
                 |    |__<emphasis> TDomText</emphasis>
                 |         |__<emphasis> TDomCDATASection</emphasis>
                 |__ TDomCustomDocument
                 |    |__<emphasis> TDomDocument</emphasis>
                 |    |__<emphasis> TDomDocumentNS</emphasis>
                 |         |__<emphasis> TDomDocumentXPath</emphasis>
                 |__<emphasis> TDomDocumentFragment</emphasis>
                 |__<emphasis> TDomDocumentTypeDecl</emphasis>
                 |__<emphasis> TDomElement</emphasis>
                 |__<emphasis> TDomEntityReference</emphasis>
                 |__<emphasis> TDomProcessingInstruction</emphasis>
                 |__ TDomXPathNamespace

  </literallayout>
  
  
  Some types of nodes may have child nodes of various types, and others are leaf nodes that cannot have anything below them in the document structure. The node types, and which node types they may have as children, are as follows:</para>

  <itemizedlist>
	<listitem>Attribute ( TDomAttr)
		<itemizedlist>
			<listitem>(no children)</listitem>
		</itemizedlist>
	</listitem>
	<listitem>CDATASection ( TDomCDATASection)
		<itemizedlist>
			<listitem>(no children)</listitem>
		</itemizedlist>
	</listitem>
	<listitem>Comment ( TDomComment)
		<itemizedlist>
			<listitem>(no children)</listitem>
		</itemizedlist>
	</listitem>
	<listitem>Document ( TDomDocument, TDomDocumentNS, TDomDocumentXPath)
		<itemizedlist>
			<listitem>Comment</listitem>
			<listitem>DocumentType (maximum of one. Not allowed in TDomDocumentXPath trees)</listitem>
			<listitem>Element (maximum of one)</listitem>
			<listitem>ProcessingInstruction</listitem>
		</itemizedlist>
	</listitem>
	<listitem>DocumentFragment ( TDomDocumentFragment)
		<itemizedlist>
			<listitem>CDATASection</listitem>
			<listitem>Comment</listitem>
			<listitem>Element</listitem>
			<listitem>EntityReference</listitem>
			<listitem>ProcessingInstruction</listitem>
			<listitem>Text</listitem>
		</itemizedlist>
	</listitem>
	<listitem>DocumentType ( TDomDocumentTypeDecl)
		<itemizedlist>
			<listitem>(no children)</listitem>
		</itemizedlist>
	</listitem>
	<listitem>Element ( TDomElement)
		<itemizedlist>
			<listitem>CDATASection</listitem>
			<listitem>Comment</listitem>
			<listitem>EntityReference</listitem>
			<listitem>Element</listitem>
			<listitem>ProcessingInstruction</listitem>
			<listitem>Text</listitem>
		</itemizedlist>
	</listitem>
	<listitem>EntityReference ( TDomEntityReference)
		<itemizedlist>
			<listitem>CDATASection</listitem>
			<listitem>Comment</listitem>
			<listitem>Element</listitem>
			<listitem>EntityReference</listitem>
			<listitem>ProcessingInstruction</listitem>
			<listitem>Text</listitem>
		</itemizedlist>
	</listitem>
	<listitem>ProcessingInstruction ( TDomProcessingInstruction)
		<itemizedlist>
			<listitem>(no children)</listitem>
		</itemizedlist>
	</listitem>
	<listitem>Text ( TDomText)
		<itemizedlist>
			<listitem>(no children)</listitem>
		</itemizedlist>
	</listitem>
  </itemizedlist>

  <sect2>
  <title>TDomCustomNode = class(TCustomOwnedNode) (+)</title>
  <para> TDomCustomNode is the base class that is the ancestor for all TDomNode classes. It implements an abstract 'nodeName' property.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property nodeName: WideString (readonly)
    <literallayout>
      The name of the node.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function GetNodeName: WideString; virtual; abstract;
    <literallayout>
      This abstract function is called from the nodeName
      property to retrieve the name of the node.
      Descendant classes must override it in order to
      implement node names.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure RaiseException(const E: ExceptClass); override;
    <literallayout>
      This procedure overrides the RaiseException
      method inherited from TCustomOwnedNode and
      perfroms the following Exception mapping:

      EHierarchyRequestError --> EHierarchy_Request_Err
      ENoModificationAllowedError --> ENo_Modification_Allowed_Err
      ENotAssignedError --> ENot_Supported_Err
      ENotFoundError --> ENot_Found_Err
      EWrongOwnerError --> EWrong_Document_Err
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>


  <sect2>
  <title>TDomCustomNodeClass = class of TDomCustomNode (+)</title>
  <para> TDomCustomNodeClass is the metaclass for TDomCustomNode. Its value is the class reference for TDomCustomNode or for one of its descendants.</para>
  </sect2>


  <sect2>
  <title>TDomNode = class( TDomCustomNode) (*)</title>

  <para>The TDomNode class is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects descending from TDomNode expose methods for dealing with children, not all objects descending from TDomNode may have children. For example, TDomText nodes may not have children, and adding children to such nodes results in a EdomException being raised.</para>

  <para>The properties 'nodeName', 'nodeValue' and 'attributes' are included as a mechanism to get at node information without casting down to the specific derived class. In cases where there is no obvious mapping of these attributes for a specific nodeType (e.g., 'nodeValue' for an TDomElement or 'attributes' for a TDomComment), this returns and empty WideString or nil respectivly.</para>

  <para>The values of 'nodeName', 'nodeValue', and 'attributes' vary according to the node type as follows:</para>

  <para>
  <literallayout>

                         nodeName         nodeValue     attributes
=====================================================================
Attribute             name of attribute  literal value     nil
                                         of attribute(*)
---------------------------------------------------------------------
CDATASection          #cdata-section     content of the    nil
                                         CDATA Section
---------------------------------------------------------------------
Comment               #comment           content of the    nil
                                         comment
---------------------------------------------------------------------
Document              #document          ''                nil
---------------------------------------------------------------------
DocumentFragment      #document-fragment ''                nil
---------------------------------------------------------------------
DocumentTypeDecl      document type name ''                nil
---------------------------------------------------------------------
Element               tagName            ''            NamedNodeMap
---------------------------------------------------------------------
EntityReference       name of entity     ''                nil
                      referenced
---------------------------------------------------------------------
ProcessingInstruction target             entire content    nil
                                         excluding the
                                         target
---------------------------------------------------------------------
Text                  #text              content of the    nil
                                         text node
---------------------------------------------------------------------
XPathNamespace        #namespace         namespace URI     nil
                                         represented by
                                         the node
  </literallayout>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property AbsoluteIndex: Integer (readonly)
    <literallayout>
      Returns the index of a node in a document tree 
      relative to the document node which is the root 
      of the document tree.  The document node has an
      absoluteIndex of 0 and subsequent nodes are 
      numbered sequentially. If a node has any child 
      nodes, its AbsoluteIndex is one less than the 
      index of its first child node.
      
      Nodes which are not part of a complete
      document tree have an absoluteIndex of -1.
      
      Hint: Calculating the absolute index of a node
      is a performance critical operation, especially
      for high values, because the algorithm visits 
      every node between this node and the document 
      node.  Therefore, it is usually not a good idea
      to use the absoluteIndex property within a 
      loop, except if the DOM tree is small and
      performance is not an issue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property attributes: TDomNamedNodeMap (readonly)
    <literallayout>
      Provides access to a NamedNodeMap containing the
      node's attributes (if it is an TDomElement) or
      nil otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property BaseUri: WideString (readonly)
    <literallayout>
      The absolute base URI of this node or an empty
      WideString if the implementation wasn't able to
      obtain an absolute URI. This value is computed
      according to [XML Base].
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ChildNodes: TDomNodeList (readonly)
    <literallayout>
      A NodeList object that contains all children of
      this node. If there are no children, this is a
      NodeList containing no nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ExpandedName: WideString (readonly)
    <literallayout>
      The expanded name of this node according to 
      [XPath 1.0], sec. 5, or an empty WideString
      if this type of node has no expanded name.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property FirstChild: TDomNode (readonly)
    <literallayout>
      The first child of a node. If there is no such
      node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property IsNamespaceNode: Boolean (readonly)
    <literallayout>
      Returns 'True' if the node is a TDomElement or
      TDomAttr node created by a namespace aware
      constructor, otherwise 'False' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property IsReadonly: Boolean (readonly)
    <literallayout>
      Returns 'True' if the node is readonly,
      otherwise 'False'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property Level: Integer (readonly)
    <literallayout>
      Indicates the distance between this node and the 
      document node which is the root of the document 
      tree.  The document node is of level 0, its child 
      nodes are of level 1, their child nodes are of 
      level 2, etc.
      
      Nodes which are not part of a complete document 
      tree have a level of -1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property Language: WideString (readonly)
    <literallayout>
      Returns the language of this node as specified
      in [XML 1.0], sec. 2.12.  
      
      The language of a or TDomXPathNamespace or
      TDomAttr node is determined is the same as the 
      language of its ownerElement node.  If the 
      TDomAttr or TDomXPathNamespace node does not 
      have an ownerElement node, this function 
      returns an empty WideString (even if the 
      attribute itself is a language declaration). 
      
      The language of an TDomElement node is 
      determined by the value of its xml:lang 
      attribute, or if it has no such attribute, by 
      the value of the xml:lang attribute of its 
      nearest ancestor that has such an attribute. 
      If none of its ancestors has an xml:lang 
      attribute, this function returns an empty 
      WideString.
      
      The language of all other node types is
      determined by the value of the xml:lang
      attribute of its nearest TDomElement node
      ancestor that has such an attribute. 
      If the node has no such ancestors, this 
      function returns an empty WideString. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property LastChild: TDomNode (readonly)
    <literallayout>
      The last child of a node. If there is no such
      node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property LocalName: WideString (readonly)
    <literallayout>
      Returns the local part of the qualified name
      of this node.

      For TDomXPathNamespace nodes the 'localName'
      property holds the prefix of the namespace 
      represented by the node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NamespaceURI: WideString (readonly)
    <literallayout>
      The namespace URI given at creation time of
      this node, or an empty WideString if it is
      unspecified.

      For TDomXPathNamespace nodes the 'namespaceURI'
      property holds the namespace URI of the namespace
      represented by the node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextSibling: TDomNode (readonly)
    <literallayout>
      The node immediately following the current
      node. If there is no such node, this returns
      nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeName: WideString (readonly) (inherited from TDomCustomNode)
    <literallayout>
      The name of the node depends on its type; see
      the table above.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeType: TDomNodeType (readonly)
    <literallayout>
      A code representing the type of the underlying
      object's type, as defined in the TDomNodeType
      class.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeValue: WideString
    <literallayout>
      The value of this node, depending on its type;
      see the table above. When it is defined to be
      an empty WideString or when this node is a 
      XPathNamespace node, setting it has no effect.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised when the node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerDocument: TDomCustomDocument (readonly)
    <literallayout>
      Provides access to the TDomCustomDocument object
      associated with this Node. This is also the
      Document object used to create new nodes. When 
      this Node is a TDomCustomDocument object the 
      ownerDocument property is nil. The ownerDocument
      object of a TDomXPathNamespace node matches the
      ownerDocument object of its ownerElement node.

      Hint: The similar RootDocument property
      provides also access to the TDomCustomDocument object
      associated with this Node. In addition, if the
      node is of type TDomCustomDocument, it returns the
      TDomCustomDocument object itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ParentNode: TDomNode (readonly)
    <literallayout>
      The parent of the given Node instance. All nodes,
      except TDomDocument, TDomDocumentNS, TDomDocumentXPath
      TDomDocumentFragment, and TDomAttr may have a 
      parent.  However, if a node has just been created 
      and not yet added to the tree, or if it has been 
      removed from the tree, this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PreviousSibling: TDomNode (readonly)
    <literallayout>
      The node immediately preceding the current node.
      If there is no such node, nil is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Prefix: WideString
    <literallayout>
      The namespace prefix of this node or an empty
      WideString if it is unspecified.

      Note that setting this property, when permitted,
      changes the 'nodeName' property, which holds the
      qualified name, as well as the 'tagName' and
      'name' properties of TDomElement and TDomAttr
      objects, when applicable.

      Note also that changing the prefix of an attribute
      that is known to have a default value, does not
      make a new attribute with the default value and
      the original prefix appear, since the 'namespaceURI'
      and 'localName' do not change.

      For TDomXPathNamespace nodes the 'prefix'
      property holds the prefix of the namespace 
      represented by the node. Trying to change the 
      prefix of a TDomXPathNamespace node has no 
      effect.

      For nodes of any type other than TDomElement and 
      TDomAttr nodes created with non namespace-aware 
      constructors ( TDomElement.CreateNS or 
      TDomAttr.CreateNS) this is always an empty
      string.  Note that trying to set the prefix of 
      such a node will raise an ENamespace_Err 
      exception.

      Exceptions on setting:
      - EInvalid_Character_Err
         Raised if the specified prefix contains an
         illegal character.
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENamespace_Err
         Raised if the specified prefix is malformed, if
         the namespaceURI of this node is an empty
         WideString, if the specified prefix is 'xml' and
         the namespaceURI is different from
         'http://www.w3.org/XML/1998/namespace', if
         this node is a TDomAttr and the specified prefix
         is 'xmlns' and the namespaceURI is different
         from 'http://www.w3.org/2000/xmlns/', or if
         this node is a TDomAttr and the qualifiedName
         of this node is 'xmlns'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property RootDocument: TDomCustomDocument (readonly)
    <literallayout>
      Provides access to the TDomCustomDocument object
      associated with this Node. This is also the
      Document object used to create new nodes. When the
      node is a TDomCustomDocument object this returns the
      TDomCustomDocument object itself. The RootDocument 
      object of a TDomXPathNamespace node matches the 
      RootDocument object of its ownerElement node.

      Hint: The similar ownerDocument property
      provides also access to the TDomCustomDocument object
      associated with this Node, but if the node is of
      type TDomDoTDomCustomDocument, it returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TextContent: WideString (readonly)
    <literallayout>
      This property returns the text content of this node
      and its decendants.  On getting, no serialization is
      performed, the returned WideString does not contain
      any markup.  The WideString returned is made of the
      text content of this node depending on its type, as
      defined below:

                               |
              nodeType         |       textContent
      ----------------------------------------------------
      ntElement_Node           | concatenation of the
      ntEntity_Reference_Node  | textContent property
      ntDocument_Fragment_Node | value of every child
                               | node, excluding
                               | TDomComment and
                               | TDomProcessingInstruction
                               | nodes
      ----------------------------------------------------
      ntAttribute_Node         | nodeValue
      ntText_Node              |
      ntCDATA_Section_Node     |
      ntComment_Node           |____
      ntProcessing_Instruction_Node |
      ----------------------------------------------------
      ntDocument_Node          | empty WideString
      ntDocument_Type_Decl_Node|
      ntXPath_Namespace_Node   |
                               |

      Notice: The implementation of this property requires
      a lot of string copying, and therefore might become
      rather slow when a lot of nodes are involved.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property XPathStringValue: WideString (readonly)
    <literallayout>
      The string-value of this node according to the
      [XPath 1.0] specification.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TCustomOwnedObject);
    <literallayout>
      Creates a new instance of TDomNode.  Applications 
      should not use TDomNode directly.  Instead they 
      should instantiate an appropriate descendant class.

      Parameters:
      - AOwner
         The TCustomOwnedObject instance that ownes the 
         Node.  Usually this is a TDomDocument,
         TDomDocumentNS, or TDomDocumentXPath object.

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if the specified owner does not support
         the type of node which is about to be created.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    destructor Destroy; override;
    <literallayout>
      Destroys an instance of TDomNode and all of its
      children.  The TDomNode is automatically removed
      from its parent node and detached from its
      owner document (if any).

      Do not call Destroy directly in an application.
      Instead, call Free. Free verifies that the
      TDomNode reference is not nil, and only then
      calls Destroy.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function AppendChild(const NewChild: TDomNode): TDomNode; virtual;
    <literallayout>
      Adds a child node to the end of the list of
      children for this node. If the newChild is
      already in the tree, it is first removed.

      Parameters:
      - NewChild
         The node to add. If this is a
         TDomDocumentFragment object, the entire
         contents of the document fragment are moved
         into the child list of this node.

      Return Value:
         The node added.

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if newChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does not
         allow children of the type of the newChild node,
         or if the node to append is this node or one of
         this node's ancestors.
      - EWrong_Document_Err
         Raised if newChild was created from a different
         document than the one that created this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent of
         the node being appended, is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure Clear; virtual;
    <literallayout>
      Frees all child nodes and attributes, if any, of 
      this node.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function CloneNode(const Deep: Boolean): TDomNode; virtual;
    <literallayout>
      Returns a duplicate of the node, i.e., serves
      as a generic copy constructor for Nodes. The
      duplicate node has no parent (parentNode
      returns nil)and no user data. User data 
      associated to the imported node is not carried 
      over. However, if any UserDataHandlers has been 
      specified along with the associated data these 
      handlers will be called with the appropriate 
      parameters before this method returns.

      Hint: To duplicate a node from another Document
      use the ImportNode function of the target
      document node.

      For all nodes, cloning a node creates a node
      object owned by the importing document, with
      property values identical to the source
      node's nodeName and nodeType, plus the
      properties related to namespaces (prefix and
      namespaces URI).  The source node is not
      altered.

      The following list describes the specifics
      for each type of node.

      ntAttribute_Node
      The ownerElement attribute is set to nil and
      the specified flag is set to true on the
      generated TDomAttr node. The descendants of
      the source TDomAttr node are recursively
      imported and the resulting nodes reassembled
      to form the corresponding subtree.  Note
      that the deep parameter has no effect on
      TDomAttr nodes; they always carry their
      children with them when cloned.

      ntDocument_Fragment_Node
      If the deep option was set to true, the
      descendants of the source element are
      recursively imported and the resulting
      nodes reassembled to form the corresponding
      subtree. Otherwise this simply generates
      an empty TDomDocumentFragment node.

      ntDocument_Node
      Document nodes cannot be cloned.

      ntDocument_Type_Decl_Node
      TDomDocumentTypeDecl nodes cannot be cloned.

      ntElement_Node
      Attribute nodes of the source element are
      cloned, and the generated TDomAttr nodes
      are attached to the generated TDomElement
      node.  If the cloneNode deep parameter
      was set to true, the descendants of the
      source element are recursively imported
      and the resulting nodes reassembled to
      form the corresponding subtree.

      ntEntity_Reference_Node
      Only the TDomEntityReference node itself is
      cloned, even if a deep import is requested.
      If the document the cloned node belongs to
      provides a definition for this entity name,
      its value is assigned.

      ntProcessing_Instruction_Node
      The duplicate node copies its target and data
      values from those of the source node.

      ntText_Node,
      ntCDATA_Section_Node,
      ntComment_Node
      These three types of nodes copy their data
      properties from those of the source node.  
      Text nodes also copy their charRefGenerated 
      property.

      ntXPath_Namespace_Node
      TDomXPathNamespace nodes cannot be cloned.

      Parameters:
      - Deep
         If true, recursively clone the subtree
         under the specified node; if false,
         import only the node itself (and its
         TDomAttr nodes, if it is a TDomElement
         node). This has no effect on TDomAttr
         and TDomEntityReference nodes.

      Return Value:
         The duplicate node.

      Exceptions:
      - ENot_Supported_Err
         Raised if the type of node being cloned is
         not supported.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function CompareDocumentPosition(const Other: TDomNode): TDomDocumentPosition; virtual;
    <literallayout>
      Compares a node with this node with regard to
      their position in the document and according to
      the document order.

      Parameters:
      - Other
         The node to compare against this node.

      Return Value:
         Return how the given node is positioned
         relatively to this node.

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if 'other' is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function EvaluateToBoolean(const Expression: WideString): Boolean; virtual;
    <literallayout>
      Evaluates an XPath expression with this node as the
      context node and converts the result of the
      evaluation into a Boolean.

      Parameters:
      - Expression
         The XPath expression to be parsed and evaluated.

      Return Value:
         The result of the evaluation converted to a
         Boolean according to the XPath boolean() function
         as specified in [XPath 1.0], sec. 4.3:

         - A number is true if and only if it is neither
           positive nor negative zero nor NaN.
         - A node-set is true if and only if it is 
           non-empty.
         - A string is true if and only if its length is
           non-zero.

      Exceptions:
      - EXPath_Invalid_Expression_Err
         Raised in the expression has a syntax error or
         otherwise is not a legal expression.
      - EXPath_Invalid_Function_Call_Err
         Raised if an error occurred while evaluating a
         function contained in the expression.
      - EXPath_Type_Err
         Raised if a type conflict was detected while
         evaluating the expression.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function EvaluateToNumber(const Expression: WideString): double; virtual;
    <literallayout>
      Evaluates an XPath expression with this node as the
      context node and converts the result of the
      evaluation into a double.

      Parameters:
      - Expression
         The XPath expression to be parsed and evaluated.

      Return Value:
         The result of the evaluation converted to a
         Boolean according to the XPath number() function
         as specified in [XPath 1.0], sec. 4.4:

         - A string that consists of optional whitespace
           followed by an optional minus sign followed by
           an XPath Number followed by whitespace is 
           converted to the IEEE 754 number that is 
           nearest (according to the IEEE 754 
           round-to-nearest rule) to the mathematical 
           value represented by the string; any other 
           string is converted to NaN.
         - Boolean true is converted to 1; Boolean false 
           is converted to 0.
         - A node-set is first converted to a string as 
           if by a call to the XPath string() function 
           and then converted in the same way as a 
           string argument.

      Exceptions:
      - EXPath_Invalid_Expression_Err
         Raised in the expression has a syntax error or
         otherwise is not a legal expression.
      - EXPath_Invalid_Function_Call_Err
         Raised if an error occurred while evaluating a
         function contained in the expression.
      - EXPath_Type_Err
         Raised if a type conflict was detected while
         evaluating the expression.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function EvaluateToNode(const Expression: WideString): TDomNode; virtual;
    <literallayout>
      Evaluates an XPath expression with this node as the
      context node and returns the first node of the
      resulting node-set (if any).

      Parameters:
      - Expression
         The XPath expression to be parsed and evaluated.

      Return Value:
         The first node of the resulting node-set.  If
         this would be an TDomXPathNamespace node, its
         owner TDomElement node is returned instead.  If
         the resulting node-set is empty or if the
         evaluation does not result in a node-set, then
         nil is returned.

      Exceptions:
      - EXPath_Invalid_Expression_Err
         Raised in the expression has a syntax error or
         otherwise is not a legal expression.
      - EXPath_Invalid_Function_Call_Err
         Raised if an error occurred while evaluating a
         function contained in the expression.
      - EXPath_Type_Err
         Raised if a type conflict was detected while
         evaluating the expression.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function EvaluateToWideString(const Expression: WideString): WideString; virtual;
    <literallayout>
      Evaluates an XPath expression with this node as the
      context node and converts the result of the
      evaluation into a WideString.

      Parameters:
      - Expression
         The XPath expression to be parsed and evaluated.

      Return Value:
         The result of the evaluation converted to a
         WideString according to the XPath string() 
         function as specified in [XPath 1.0], sec. 4.2:

         - A node-set is converted to a WideString by 
           returning the string-value of the node in the
           node-set that is first in document order. If 
           the node-set is empty, an empty WideString is 
           returned.
         - The Boolean False value is converted to the
           WideString 'False'. The Boolean True value 
           is converted to the string 'True'.
         - A number is converted to a WideString as 
           follows:
           - NaN is converted to the WideString 'NaN'.
           - Positive zero is converted to the 
             WideString '0'.
           - Negative zero is converted to the 
             WideString '0'.
           - Positive infinity is converted to the 
             WideString 'Infinity'.
           - Negative infinity is converted to the 
             WideString '-Infinity'.
           - If the number is an Integer, the number is
             represented in decimal form as a Number 
             with no decimal point and no leading zeros,
             preceded by a minus sign (-) if the number
             is negative.
           - Otherwise the number is represented in 
             decimal form as a Number including a 
             decimal point with at least one digit
             before the decimal point and at least one
             digit after the decimal point, preceded by
             a minus sign (-) if the number is negative;
             there must be no leading zeros before the 
             decimal point apart possibly from the one
             required digit immediately before the
             decimal point; beyond the one required 
             digit after the decimal point there must 
             be as many, but only as many, more digits
             as are needed to uniquely distinguish the 
             number from all other IEEE 754 numeric 
             values.

      Exceptions:
      - EXPath_Invalid_Expression_Err
         Raised in the expression has a syntax error or
         otherwise is not a legal expression.
      - EXPath_Invalid_Function_Call_Err
         Raised if an error occurred while evaluating a
         function contained in the expression.
      - EXPath_Type_Err
         Raised if a type conflict was detected while
         evaluating the expression.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function FindFirstChildElement: TDomElement; virtual;
    <literallayout>
      Returns the current node's first child element.

      Return Value:
         The current node's first child. If there is
         no such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function FindLastChildElement: TDomElement; virtual;
    <literallayout>
      Returns the current node's last child element.

      Return Value:
         The current node's last child element. If
         there is no such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function FindNextSiblingElement: TDomElement; virtual;
    <literallayout>
      Returns the next element node following the
      current node.

      Return Value:
         The next element node following the current
         node.  If there is no such node, this returns
         nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function FindParentElement: TDomElement; virtual;
    <literallayout>
      Returns the current node's first ancestor,
      i.e. the first element in the node tree above
      the current node.

      Return Value:
         The current node's first ancestor. If there
         is no such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function FindPreviousSiblingElement: TDomElement; virtual;
    <literallayout>
      Returns the privous element node preceding
      the current node.

      Return Value:
         The privous element node preceding the
         current node. If there is no such node,
         this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetFirstChildElement(const Name: WideString): TDomElement; virtual;
    <literallayout>
      Returns the current node's first child
      element with the specified element name.

      Parameters:
      - Name
         The element name.

      Return Value:
         The current node's first child element with
         the specified element name. If there is no
         such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetFirstChildElementNS(const NamespaceURI,
                                          LocalName: WideString): TDomElement; virtual;
    <literallayout>
      Returns the current node's first child element
      with the specified namespace URI and local name.

      Parameters:
      - NamespaceURI
         The element name.
      - LocalName
         The element name.

      Return Value:
         The current node's first child element with
         the specified namespace URI and local name.
         If there is no such node, this returns
         nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetLastChildElement(const Name: WideString): TDomElement; virtual;
    <literallayout>
      Returns the current node's last child element
      with the specified element name.

      Parameters:
      - Name
         The element name.

      Return Value:
         The current node's last child element with
         the specified element name. If there is no
         such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetLastChildElementNS(const NamespaceURI,
                                         LocalName: WideString): TDomElement; virtual;
    <literallayout>
      Returns the current node's last child element
      with the specified namespace URI and local name.

      Parameters:
      - NamespaceURI
         The element name.
      - LocalName
         The element name.

      Return Value:
         The current node's last child element with
         the specified namespace URI and local name.
         If there is no such node, this returns
         nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetNextSiblingElement(const Name: WideString): TDomElement; virtual;
    <literallayout>
      Returns the next element node with the
      specified element name following the
      current node.

      Parameters:
      - Name
         The element name.

      Return Value:
         The next element node with the specified
         element name following the current node.
         If there is no such node, this returns
         nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetNextSiblingElementNS(const NamespaceURI,
                                           LocalName: WideString): TDomElement; virtual;
    <literallayout>
      Returns the next element node with the
      specified namespace URI and local name
      following the current node.

      Parameters:
      - NamespaceURI
         The element name.
      - LocalName
         The element name.

      Return Value:
         The next element node with the
         specified namespace URI and local name
         following the current node. If there
         is no such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetParentElement(const Name: WideString): TDomElement; virtual;
    <literallayout>
      Returns the current node's first ancestor
      with the specified element name, i.e. the
      first element with the specified element
      name in the node tree above the current
      node.

      Parameters:
      - Name
         The element name.

      Return Value:
         The current node's first ancestor with
         the specified element name. If there is
         no such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetParentElementNS(const NamespaceURI,
                                      LocalName: WideString): TDomElement; virtual;
    <literallayout>
      Returns the current node's first ancestor
      with the specified namespace URI and local
      name, i.e. the first element with the
      specified element name in the node tree
      above the current node.

      Parameters:
      - NamespaceURI
         The element name.
      - LocalName
         The element name.

      Return Value:
         The current node's first ancestor with
         the specified namespace URI and local
         name. If there is no such node, this
         returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetPreviousSiblingElement(const Name: WideString): TDomElement; virtual;
    <literallayout>
      Returns the privous element node with the
      specified element name preceding the
      current node.

      Parameters:
      - Name
         The element name.

      Return Value:
         The privous element node with the
         specified element name preceding the
         current node. If there is no such
         node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetPreviousSiblingElementNS(const NamespaceURI,
                                               LocalName: WideString): TDomElement; virtual;
    <literallayout>
      Returns the privous element node with the
      specified namespace URI and local name
      preceding the current node.

      Parameters:
      - NamespaceURI
         The element name.
      - LocalName
         The element name.

      Return Value:
         The privous element node with the
         specified namespace URI and local name
         preceding the current node. If there
         is no such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function GetUserData(const Key: WideString): TObject; virtual;
    <literallayout>
      Retrieves the object associated to a key on
      a this node. The object must first have been
      set to this node by calling setUserData with
      the same key.

      Parameters:
      - Key
         The key the object is associated to.

      Return Value:
         Returns the TObject associated to the 
         given key on this node, or nil if there 
         was none.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function HasAsAncestor(const Node: TDomNode): Boolean; reintroduce; virtual;
    <literallayout>
      This is a convenience method to allow easy
      determination of whether a node is an ancestor
      of this node.

      Paramters:
      - Node
         The node which is being tested whether it
         is an ancestor of this node.
      Return Value:
         Returns 'True' if the specified node is an
         ancestor of this node, 'false otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function HasAttributes: Boolean; virtual;
    <literallayout>
      Returns whether this node (if it is an
      element) has any attributes.

      Return Value:
        'True' if this node has any attributes,
        'False' otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function hasChildNodes: Boolean; virtual;
    <literallayout>
      Returns whether this node has any children.

      Return Value:
        'True' if this node has any children,
        'False' otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function InsertBefore(const NewChild,
                                RefChild: TDomNode): TDomNode; reintroduce; virtual;
    virtual;
    <literallayout>
      Inserts a child node newChild before the
      existing child node refChild. If refChild
      is nil, insert newChild at the end of the
      list of children. If newChild is a
      DocumentFragment object, all of its children
      are inserted, in the same order, before
      refChild. If the newChild is already in the
      tree, it is first removed.

      Parameters:
      - NewChild
         The node to insert.
      - RefChild
         The reference node, i.e., the node before
         which the new node must be inserted.

      Return Value:
         The node being inserted.

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if newChild is nil.
      - EHierarchy_Request_Err (*)
         Raised if this node is of a type that does not
         allow children of the type of the newChild node,
         or if the node to insert one of this node's 
         ancestors, or this node itself, or if NewChild
         is identical with RefChild (unless both
         parameters are nil), or if this node if of type 
         TDomDocument and the application attempts to 
         insert a second DocumentTypeDecl or Element node or 
         attempts to insert an Element node before the
         DocumentTypeDecl node or a DocumentTypeDecl node 
         after an Element node.
      - EWrong_Document_Err
         Raised if newChild was created from a
         different document than the one that created
         this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent
         of the newChild node being inserted, is
         readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function LookupNamespaceURI(const APrefix: WideString): WideString; virtual;
    <literallayout>
      Look up the namespace URI associated with the 
      specified namespace prefix in the context of
      this node.  
      
      The prefix 'xml' is by predefinition  
      associatedwith the namespace URI 
      'http://www.w3.org/XML/1998/namespace', and
      the prefix 'xmlns' is associated with the
      namespace URI 'http://www.w3.org/2000/xmlns/'.

      Parameters:
      - APrefix
         The prefix to look for.

      Return Value:
         The associated namespace URI or an
         empty WideString if none was found or
         if the attribute value in the namespace 
         declaration for the specified prefix 
         in the context of this node was empty.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) procedure Normalize; virtual;
    <literallayout>
      Puts all Text nodes in the full depth of
      the sub-tree underneath this TDomElement,
      including attribute nodes, into a "normal"
      form where only markup (e.g., tags, comments,
      processing instructions, CDATA sections, and
      entity references) separates TDomText nodes,
      i.e., there are no adjacent TDomText nodes.
      This can be used to ensure that the DOM view
      of a document is the same as if it were
      saved and re-loaded, and is useful when
      operations (such as XPointer lookups) that
      depend on a particular document tree
      structure are to be used. Note: In cases
      where the document contains TDomCDATASection
      nodes, the normalize operation alone may not
      be sufficient, since XPointers do not
      differentiate between TDomText nodes and
      TDomCDATASection nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function RemoveChild(const OldChild: TDomNode): TDomNode; virtual;
    <literallayout>
      Removes the child node indicated by oldChild
      from the list of children and returns it.

      Parameters:
      - OldChild
         The node being removed

      Return Value:
         The node removed.

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if oldChild is nil.
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function ReplaceChild(const NewChild,
                                OldChild: TDomNode): TDomNode; virtual;
    <literallayout>
      Replaces the child node oldChild with newChild
      in the set of children of the given node, and
      returns the oldChild node. If newChild is a
      TDomDocumentFragment object, oldChild is
      replaced by all of the TDomDocumentFragment
      children, which are inserted in the same order.
      If the newChild is already in the tree, it is
      first removed.

      Parameters:
      - NewChild
         The new node to put in the child list.
      - OldChild
         The node being replaced in the list.

      Return Value:
         The node replaced.

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if newChild or oldChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does
         not allow children of the type of the
         newChild node, or if the node to insert is
         this node or one of this node's ancestors.
      - EWrong_Document_Err
         Raised if newChild was created from a
         different document than the one that created
         this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent
         of the newChild node, is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this
         node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function SetUserData(const Key: WideString;
                         const Data: TObject;
                         const Handler: TDomUserDataEvent): TObject; virtual;
    <literallayout>
      Associate an object to a key on this node. The 
      object can later be retrieved from this node by
      calling GetUserData with the same key.

      Parameters:
      - Key
         The key to associate the object to.
      - Data
         The object to associate to the given key, 
         or null to remove any existing association 
         to that key.
      - Handler
         A handler of type TDomUserDataEvent to associate 
         to that key, or nil.
         
         TDomUserDataEvent = 
           procedure(const Operation: TDomOperationType;
                     const Key: WideString;
                     const Data: TObject;
                     const Src,
                           Dst: TDomNode) 
                   of object;

         This event handler is called whenever the node 
         for which this handler is registered is imported
         or cloned.  Applications must not raise exceptions 
         in a TDomUserDataEvent.  The parameters have the
         following meaning:
         - Operation: 
             Specifies the type of operation that is being
             performed on the node.  Possible values are:
             OT_NODE_ADOPTED, OT_NODE_CLONED, 
             OT_NODE_DESTROYED, OT_NODE_IMPORTED,
             OT_NODE_RENAMED
             [Note: OT_NODE_ADOPTED and OT_NODE_RENAMED 
             are a placeholders.  Adopting or renaming
             nodes has not yet been implemented.]
         - Key:
             Specifies the key for which this handler is 
             being called. 
         - Data
             Specifies the data object for which this 
             handler is being called.
         - Src
             Specifies the node being cloned, adopted, 
             imported, or renamed. This is nil when the
             node is being deleted.
         - Dst
             Specifies the node newly created if any, or
             nil.

      Return Value:
         Returns the TObject previously associated
         to the given key on this node, or nil if 
         there was none.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomCustomDocument = class ( TDomNode)</title>

  <para>The TDomCustomDocument class is the common base class for the TDomDocument, TDomDocumentNS, and TDomDocumentXPath classes. Do not use instances of TDomCustomDocument directly in your application. Instead use one of the Document classes derived from TDomCustomDocument.</para>
  
  <para>An instance of a Document class represents the entire XML document. Conceptually, it is the root of the document tree, and provids the primary access to the document's data. XDOM supports two different ways of modelling an XML document, i.e. as a non namespace-aware or as a namespace aware document. Non namespace-aware documents are represented by the TDomDocument class, ordinary namespace-aware documents are represented by the TDomDocumentNS, and documents according to the XPath data model are represented by TDomDocumentXPath class.</para>

  <para>Since elements, text nodes, comments, processing instructions, etc. cannot exist outside the context of a Document, their constructor includes a parameter which associates them with an owner Document.</para>

  </sect2>


  <sect2>
  <title>TDomDocument = class ( TDomCustomDocument)</title>

  <para>A TDomDocument object represents the entire XML document. Conceptually, it is the root of a non namespace-aware document tree, and provides the primary access to the document's data.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DefaultView: TDomAbstractView (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      The default TDomAbstractView for this TDomDocument
      object, or nil if none is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property DoctypeDecl: TDomDocumentTypeDecl (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      The TDomDocumentTypeDecl object associated with
      this document.

      Hint:  Note the difference to the 'doctype'
      property.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DocumentElement: TDomElement (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      This is a convenience attribute that allows direct
      access to the child node that is the root element
      of the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property DocumentUri: WideString (inherited from TDomCustomDocument)
    <literallayout>
      The location of the document or an empty WideString if
      undefined or if the Document was created by the user.
      No lexical checking is performed when setting this 
      WideString; this could result in an empty WideString 
      value returned when using TDomNode.baseURI.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) property DomImplementation: TDomImplementation (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      The TDomImplementation object that handles this
      document. An XDOM application may use objects from
      multiple implementations. (* In the DOM guidelines
      this property is called "Implementation". Since this
      is a reserved Delphi expression the property had to
      been renamed.)
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property InputEncoding: WideString (inherited from TDomCustomDocument)
    <literallayout>
      Specifies the encoding used for this document at the
      time of parsing. This is an empty WideString when the
      encoding in unknown, such as when the Document was 
      created in memory.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property Modified: Boolean (inherited from TDomCustomDocument)
    <literallayout>
      Applications can use this property to indicate,
      whether the document has been modified.  The default
      value is 'False'.

      'Modified' is automatically set to 'True' when the
      value of a TDomText, TDomComment, TDomCDATASection
      or TDomProcessingInstruction node in the document's
      subtree was changed, when an attribute on a
      TDomElement node in the document's subtree was set
      or changed, or when nodes were added to or removed
      from the document's subtree.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property ValidationAgent: TDtdValidationAgent (readonly)
    <literallayout>
      This property gives access to the object, that 
      is used for validating the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property XmlEncoding: WideString (inherited from TDomCustomDocument)
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, the encoding of this document.
      This is an empty WideString when unspecified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property XmlStandalone: TDomStandalone (inherited from TDomCustomDocument)
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, whether this document is standalone.
      This is one of the following values:
      STANDALONE_YES
        The standalone status of the document is 'yes'.
      STANDALONE_NO
        The standalone status of the document is 'no'.
      STANDALONE_UNSPECIFIED
        The standalone status of the document is
        unspecified.
      The default value is STANDALONE_UNSPECIFIED.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property XmlVersion: WideString (inherited from TDomCustomDocument)
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, the version number of this document.
      This is an empty WideString otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Events</emphasis></para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property OnAttrModified: TDomAttrModifiedEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomAttrModifiedEvent =
    procedure(sender: TObject;
              modifiedNode: TDomNode;
              attrChange: TDomAttrChange;
              relatedAttr: TDomAttr)
            of object;

      This event is triggered after an attribute has been
      modified on a node.

      Parameters:
      - sender
         This TDomDocument node.
      - modifiedNode
         The TDomElement node whose attribute changed.
      - attrChange
         Indicates whether the related TDomAttr node was
         modified, added, or removed.  String based replacement
         of an attribute value will be viewed as a modification
         of the TDomAttr node since its identity does not change.
         Subsequently replacement of the TDomAttr node with a
         different TDomAttr node is viewed as the removal of the
         first TDomAttr node and the addition of the second.
      - relatedAttr
         Indicates the TDomAttr node whose value has been
         affected.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnCharacterDataModified: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered after character data within
      a node has been modified but the node itself has
      not been inserted or deleted. This event is also
      triggered by modifications to
      TDomProcessingInstruction nodes.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The TDomText, TDomComment, TDomCDATASection or
         TDomProcessingInstruction node whose value
         changed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) OnNodeClearing: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered when a node is about to
      be cleared. This event is dispatched before the
      node is cleared.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The node about to be cleared.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnNodeInserted: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered when a node has been added
      as a child of another node. This event is
      dispatched after the insertion has taken place.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The node being inserted.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnNodeRemoving: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered when a node is about to be
      removed from its parent node. This event is
      dispatched before the node is removed from the
      tree.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The node about to be removed.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TDomImplementation);
    <literallayout>
      Creates a new TDomDocument object and specifies its
      owner implementation component. 
      
      Freeing the owner implementation component 
      automatically frees its owned TDomDocument objects.
      However, a TDomDocument object may also be freed 
      individually by calling its Free method. Freeing a 
      TDomDocument object automatically frees all TDomNodes,
      TDomNodeLists, TDomNodeIterators, and TDomTreeWalkers 
      owned by the TDomDocument object, whether readonly or
      not.

      Parameters:
      - AOwner
         The TDomImplementation component that ownes the 
         new TDomDocument object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure Clear; virtual;
    <literallayout>
      Frees all TDomNodes, TDomNodeLists, TDomNodeIterators, 
      and TDomTreeWalkers owned by this TDomDocument object,
      whether readonly or not.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure ClearInvalidNodeIterators; virtual;
    <literallayout>
      Frees all TDomNodeIterators whose state is 'invalid'
      which means that their detache method had been used.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function CreateNodeIterator(const root: TDomNode;
                                      whatToShow: TDomWhatToShow;
                                      nodeFilter: TDomNodeFilter;
                                      entityReferenceExpansion: Boolean):
                                      TDomNodeIterator; virtual;
    <literallayout>
      Create a new TDomNodeIterator over the subtree
      rooted at the specified node.

      Parameters:
      - root
         The node which will be iterated together
         with its children. The iterator is
         initially positioned just before this
         node. The whatToShow flags and the filter,
         if any, are not considered when setting
         this position.
      - whatToShow
         This flag specifies which node types may
         appear in the logical view of the tree
         presented by the iterator.
      - nodeFilter
         The Filter to be used with this
         TDomNodeIterator, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether
         entity reference nodes are expanded.

      Return Value:
         The newly created TDomNodeIterator.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function CreateTreeWalker(const root: TDomNode;
                                    whatToShow: TDomWhatToShow;
                                    nodeFilter: TDomNodeFilter;
                                    entityReferenceExpansion: Boolean):
                                                          TDomTreeWalker;
                                                          virtual;
    <literallayout>
      Create a new TDomTreeWalker over the subtree
      rooted at the specified node.

      Parameters:
      - root
         The node which will serve as the root for
         the TDomTreeWalker. The whatToShow flags
         and the TDomNodeFilter are not considered
         when setting this value; any node type
         will be accepted as the root. The
         currentNode of the TDomTreeWalker is
         initialized to this node, whether or not
         it is visible. The root functions as a
         stopping point for traversal methods
         that look upward in the document
         structure, such as parentNode and
         nextNode. The root must not be nil.
      - whatToShow
         This flag specifies which node types may
         appear in the logical view of the tree
         presented by the iterator.
      - nodeFilter
         The Filter to be used with this
         TDomTreeWalker, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether
         entity reference nodes are expanded.

      Return Value:
         The newly created TDomTreeWalker.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure FreeTreeWalker(var treeWalker: TDomTreeWalker);
virtual;
    <literallayout>
      Frees a TDomTreeWalker object, that was created
      by this TDomDocument object.

      Parameters:
      - treeWalker
         The TreeWalker object to free (or nil).  This
         is set to nil.

      Exceptions:
      - EWrong_Document_Err
         Raised if the TreeWalker object to free was
         created from a different TDomDocument.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function GetElementById(const ElementId: WideString): TDomElement;
virtual;
    <literallayout>
      Returns the TDomElement whose ID is given by
      elementId. If no such element exists nil is
      returned. The behavior is not defined if more
      than one element has this ID.

      IMPORTANT:  Which attributes are of type ID
      is determined by evaluating the abstract
      schema models associated with the document
      when validating the document.  Therefore it
      is necessary to successfully call the
      TDomDocument.ValidationAgent.ValidateDocument 
      function before the GetElementById function 
      can be used.

      Hint: Attributes with the name "ID" are not
      of type ID unless so defined.

      Parameters:
      - ElementId
         The unique id value for an element.

      Return Value:
         The matching element.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetElementsByTagName(const tagName: WideString): TDomNodeList;
    virtual;
    <literallayout>
      Returns a TDomNodeList of all the TDomElement
      nodes with a given tag name in the order in
      which they would be encountered in a preorder
      traversal of the document tree.

      Hint: Calling this function will internally
      create a TDomNodeList for the specified tag
      name unless this had been done by a previous
      call. This TDomNodeList will be freed either
      when the clear method of the document is
      called or when the document itself is freed.
      Therefore calling the GetElementsByTagName
      function very often with different tag names
      will result in high memory usage; and since
      the DOM requires TDomNodeLists to be &quot;live&quot;,
      calling the TDomElementsNodeList.item method
      always starts a re-calculation of the index by
      traversing the node tree from the beginning
      till the specified element is found.

      So using this method to traverse the elements
      of large documents is considerably slower than
      using a node iterator or a tree walker with an
      appropriate filter and might need more of the
      computer's memory. It is therefore highly
      recommended to use a node iterator or a tree
      walker with an appropriate filter instead.

      Parameters:
      - tagname
         The name of the tag to match on. If the
         string "*" is given, this method returns
         all elements in the document.

      Return Value:
         A new TDomNodeList object containing all
         the TDomElements.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function ImportNode(const importedNode;
                        const deep: Boolean): TDomNode; virtual;
    <literallayout>
      Imports a node from another document to this
      document. The returned node has no parent
      (parentNode returns nil). The source node
      is not altered or removed from the original
      document; this method creates a new copy of
      the source node.

      For all nodes, importing a node creates a
      node object owned by the importing document,
      with property values identical to the source
      node's nodeName and nodeType.  As in the cloneNode
      operation on a Node, the source node is not
      altered.  User data associated to the imported
      node is not carried over. However, if any 
      user data handler has been specified along 
      with the associated data these handlers will
      be called with the appropriate parameters 
      before this method returns.

      Additional information is copied as
      appropriate to the nodeType, attempting to
      mirror the behavior expected if a fragment of
      XML source was copied from one document to
      another, recognizing that the two documents
      may have different DTDs.

      The following list describes the specifics
      for each type of node.

      ntAttribute_Node
      The ownerElement attribute is set to nil
      and the specified flag is set to true on the
      generated TDomAttr node.

      ntDocument_Fragment_Node
      If the deep option was set to true, the
      descendants of the source element are
      recursively imported and the resulting
      nodes reassembled to form the corresponding
      subtree. Otherwise this simply generates
      an empty TDomDocumentFragment node.

      ntDocument_Node
      document nodes cannot be imported.

      ntDocument_Type_Decl_Node
      TDomDocumentTypeDecl nodes cannot be imported.

      ntElement_Node
      Specified attribute nodes of the source
      element are imported, and the generated
      TDomAttr nodes are attached to the
      generated TDomElement node. Default
      attributes are not copied, so if this
      document defines default attributes for 
      the element type, an application must 
      explicitly generate them by calling the 
      PrepareAttributes function.

      ntEntity_Reference_Node
      Only the TDomEntityReference node itself is
      copied, even if a deep import is requested,
      since the source and destination documents
      might have defined the entity differently.
      If the document being imported into provides
      a definition for this entity name, its value
      is assigned.

      ntProcessing_Instruction_Node
      The imported node copies its target and data
      values from those of the source node.

      ntText_Node,
      ntCDATA_Section_Node,
      ntComment_Node
      These three types of nodes copy their data
      properties from those of the source node.  
      Text nodes also copy their charRefGenerated 
      property.

      ntXPath_Namespace_Node
      TDomXPathNamespace nodes cannot be imported.

      Parameters:
      - importedNode
         The node to import.
      - deep
         If true, recursively import the subtree
         under the specified node; if false,
         import only the node itself (and its
         TDomAttr nodes, if it is a TDomElement
         node). This has no effect on TDomAttr
         and TDomEntityReference nodes.

      Return Value:
         The imported node that belongs to this
         TDomDocument object.

      Exceptions:
      - ENot_Supported_Err
         Raised if the type of node being imported
         is not supported or if the value of the
         'importedNode' parameter is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function PrepareAttributes: Boolean; virtual;
    <literallayout>
      Sets or resets all missing or unspecified fixed
      and default attributes in the document according
      to the associated TDtdModel object.  All TDomAttr
      nodes in the document whose Specified property is 
      False are first removed and freed.  New TDomAttr 
      nodes for all now missing fixed and default 
      attributes are added (with their Specified 
      property set to False).  If the default value of 
      an attribute to be inserted is malformed this 
      attribute is skipped and the function returns
      False.

      Hint: Specified attributes in the document are not
      tested for validity.  If an application wants to
      prepare attributes and check the validity of
      the whole document at the same time, it may call
      TDomDocument.ValidationAgent.ValidateDocument. 

      Return Value:
         True, if all relevant attribute declaration 
         could be processed.  False, if an attribute
         was skipped due to a malformed declaration.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomDocumentNS = class ( TDomCustomDocument)</title>

  <para>A TDomDocument object represents the entire XML document. Conceptually, it is the root of a namespace-aware document tree, and provides the primary access to the document's data.</para>

  <para>Note that validating a namespace-aware document tree is not possible within XDOM. If validation is required, first parse an XML document into a non namespace-aware document tree (TDomDocument), validate it and parse the resulting valid document into a namespace-aware document tree (TDomDocumentNS or TDomDocumentXPath) using a parser pipeline which connects a TXmlStandardDomReader (set SignalElementID to 'True') with a TXmlDomBuilder component (set BuildIDList to 'True'). (If you are lucky, your XDOM distribution contains an XPath example application which shows how to do this.)</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property defaultView: TDomAbstractView (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      The default TDomAbstractView for this TDomDocument
      object, or nil if none is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property doctypeDecl: TDomDocumentTypeDecl (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      The TDomDocumentTypeDecl object associated with
      this document.

      Hint:  Note the difference to the 'doctype'
      property.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property documentElement: TDomElement (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      This is a convenience attribute that allows direct
      access to the child node that is the root element
      of the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property documentUri: WideString (inherited from TDomCustomDocument)
    <literallayout>
      The location of the document or an empty WideString if
      undefined or if the Document was created by the user.
      No lexical checking is performed when setting this 
      WideString; this could result in an empty WideString 
      value returned when using TDomNode.baseURI.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) property domImplementation: TDomImplementation (readonly) (inherited from TDomCustomDocument)
    <literallayout>
      The TDomImplementation object that handles this
      document. An XDOM application may use objects from
      multiple implementations. (* In the DOM guidelines
      this property is called "Implementation". Since this
      is a reserved Delphi expression the property had to
      been renamed.)
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property IDs: TUtilsWideStringList 
    <literallayout>
      Contains a list of all elements of type ID in the
      body of the document (but not of those contained in
      a TDomDocumentFragment node, etc.).

      The Sorted property of this TUtilsWideStringList is
      set to 'True' and the Duplicates property to 
      'dupIgnore'.  Applications must not change the values
      of these properties.

      The WideStrings property of the TUtilsWideStringList
      contains all attribute values which had been declared
      to be of type 'ID' in the DTD, while the corresponding 
      Objects property contains a pointer to the respective 
      TDomElement object.

      Since the detection of ID attributes depends on the
      document being valid, this list is, unlike other
      lists used in XDOM to access nodes, not 'live'.
      The application is responsible to initialize or update
      it.  Note that for non-namespace aware document trees
      XDOM includes a TDtdValidationAgent class which 
      provides such functionality in its ValidateDocument 
      function.  For other sorts of document trees, such as 
      based on the TDomDocumentNS class (and its derived
      classes) XDOM currently does not include an equivalent 
      class; for these classes it is up to the application 
      to maintaine the IDs list.

      Applications can use the TDomDocumentNS.GetElementById 
      function to retrieve an element with a specific ID.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property inputEncoding: WideString (inherited from TDomCustomDocument)
    <literallayout>
      Specifies the encoding used for this document at the
      time of parsing. This is an empty WideString when the
      encoding in unknown, such as when the Document was 
      created in memory.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property modified: Boolean (inherited from TDomCustomDocument)
    <literallayout>
      Applications can use this property to indicate,
      whether the document has been modified.  The default
      value is 'False'.

      'Modified' is automatically set to 'True' when the
      value of a TDomText, TDomComment, TDomCDATASection
      or TDomProcessingInstruction node in the document's
      subtree was changed, when an attribute on a
      TDomElement node in the document's subtree was set
      or changed, or when nodes were added to or removed
      from the document's subtree.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property xmlEncoding: WideString (inherited from TDomCustomDocument)
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, the encoding of this document.
      This is an empty WideString when unspecified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property xmlStandalone: TDomStandalone (inherited from TDomCustomDocument)
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, whether this document is standalone.
      This is one of the following values:
      STANDALONE_YES
        The standalone status of the document is 'yes'.
      STANDALONE_NO
        The standalone status of the document is 'no'.
      STANDALONE_UNSPECIFIED
        The standalone status of the document is
        unspecified.
      The default value is STANDALONE_UNSPECIFIED.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property xmlVersion: WideString (inherited from TDomCustomDocument)
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, the version number of this document.
      This is an empty WideString otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Events</emphasis></para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property OnAttrModified: TDomAttrModifiedEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomAttrModifiedEvent =
    procedure(sender: TObject;
              modifiedNode: TDomNode;
              attrChange: TDomAttrChange;
              relatedAttr: TDomAttr)
            of object;

      This event is triggered after an attribute has been
      modified on a node.

      Parameters:
      - sender
         This TDomDocument node.
      - modifiedNode
         The TDomElement node whose attribute changed.
      - attrChange
         Indicates whether the related TDomAttr node was
         modified, added, or removed.  String based replacement
         of an attribute value will be viewed as a modification
         of the TDomAttr node since its identity does not change.
         Subsequently replacement of the TDomAttr node with a
         different TDomAttr node is viewed as the removal of the
         first TDomAttr node and the addition of the second.
      - relatedAttr
         Indicates the TDomAttr node whose value has been
         affected.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnCharacterDataModified: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered after character data within
      a node has been modified but the node itself has
      not been inserted or deleted. This event is also
      triggered by modifications to
      TDomProcessingInstruction nodes.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The TDomText, TDomComment, TDomCDATASection or
         TDomProcessingInstruction node whose value
         changed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) OnNodeClearing: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered when a node is about to
      be cleared. This event is dispatched before the
      node is cleared.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The node about to be cleared.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnNodeInserted: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered when a node has been added
      as a child of another node. This event is
      dispatched after the insertion has taken place.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The node being inserted.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property OnNodeRemoving: TDomNotifyNodeEvent (inherited from TDomCustomDocument)
    <literallayout>
  TDomNotifyNodeEvent =
    procedure(sender: TObject;
              node: TDomNode)
            of object;

      This event is triggered when a node is about to be
      removed from its parent node. This event is
      dispatched before the node is removed from the
      tree.

      Parameters:
      - sender
         This TDomDocument node.
      - node
         The node about to be removed.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomImplementation);
    <literallayout>
      Creates a new TDomDocumentNS object and specifies its
      owner implementation component. 
      
      Freeing the owner implementation component 
      automatically frees its owned TDomDocumentNS objects.
      However, a TDomDocumentNS object may also be freed 
      individually by calling its Free method. Freeing a 
      TDomDocumentNS object automatically frees all TDomNodes,
      TDomNodeListNSs, TDomNodeIterators, and TDomTreeWalkers
      owned by the TDomDocument object, whether readonly or
      not.

      Parameters:
      - aOwner
         The TDomImplementation component that ownes the 
         new TDomDocument object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure clear; virtual;
    <literallayout>
      Frees all TDomNodes, TDomNodeListNSs, TDomNodeIterators, 
      and TDomTreeWalkers owned by this TDomDocument object, 
      whether readonly or not.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure clearInvalidNodeIterators; virtual;
    <literallayout>
      Frees all TDomNodeIterators whose state is 'invalid'
      which means that their detache method had been used.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function createNodeIterator(const root: TDomNode;
                                      whatToShow: TDomWhatToShow;
                                      nodeFilter: TDomNodeFilter;
                                      entityReferenceExpansion: Boolean):
                                      TDomNodeIterator; virtual;
    <literallayout>
      Create a new TDomNodeIterator over the subtree
      rooted at the specified node.

      Parameters:
      - root
         The node which will be iterated together
         with its children. The iterator is
         initially positioned just before this
         node. The whatToShow flags and the filter,
         if any, are not considered when setting
         this position.
      - whatToShow
         This flag specifies which node types may
         appear in the logical view of the tree
         presented by the iterator.
      - nodeFilter
         The Filter to be used with this
         TDomNodeIterator, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether
         entity reference nodes are expanded.

      Return Value:
         The newly created TDomNodeIterator.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function createTreeWalker(const root: TDomNode;
                                      whatToShow: TDomWhatToShow;
                                      nodeFilter: TDomNodeFilter;
                                      entityReferenceExpansion: Boolean):
                                                            TDomTreeWalker;
                                                            virtual;
    <literallayout>
      Create a new TDomTreeWalker over the subtree
      rooted at the specified node.

      Parameters:
      - root
         The node which will serve as the root for
         the TDomTreeWalker. The whatToShow flags
         and the TDomNodeFilter are not considered
         when setting this value; any node type
         will be accepted as the root. The
         currentNode of the TDomTreeWalker is
         initialized to this node, whether or not
         it is visible. The root functions as a
         stopping point for traversal methods
         that look upward in the document
         structure, such as parentNode and
         nextNode. The root must not be nil.
      - whatToShow
         This flag specifies which node types may
         appear in the logical view of the tree
         presented by the iterator.
      - nodeFilter
         The Filter to be used with this
         TDomTreeWalker, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether
         entity reference nodes are expanded.

      Return Value:
         The newly created TDomTreeWalker.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure freeTreeWalker(var treeWalker: TDomTreeWalker);
virtual;
    <literallayout>
      Frees a TDomTreeWalker object, that was created
      by this TDomDocumentNS object.

      Parameters:
      - treeWalker
         The TreeWalker object to free (or nil).  This
         is set to nil.

      Exceptions:
      - EWrong_Document_Err
         Raised if the TreeWalker object to free was
         created from a different TDomDocument.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function getElementById(const elementId: WideString): TDomElement;
virtual;
    <literallayout>
      Returns the TDomElement whose ID is given by
      elementId. If no such element exists nil is
      returned. The behavior is not defined if more
      than one element has this ID.

      IMPORTANT:  Which attributes are of type ID is
      determined by evaluating the TDomDocumentNS.IDs 
      list.  Therefore it is necessary that the 
      application initializes the IDs list with the
      correct values before the GetElementById 
      function can be used.

      Hint: Attributes with the name "ID" are not
      of type ID unless so defined.

      Parameters:
      - elementId
         The unique id value for an element.

      Return Value:
         The matching element.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function getElementsByTagNameNS(const namespaceURI,
                                          localName: WideString): TDomNodeList;
                                          virtual;
    <literallayout>
      Returns a TDomNodeList of all the TDomElements
      with a given local name and namespace URI in
      the order in which they would be encountered
      in a preorder traversal of the Document tree.

      Hint: Calling this function will internally
      create a TDomNodeList for the specified
      namespace URI and local name unless this had
      been done by a previous call.  This TDomNodeList
      will be freed either when the clear method of
      the document is called or when the document
      itself is freed.  Therefore calling the
      GetElementsByTagNameNS function very often with
      different parameters will result in high memory
      usage; and since the DOM requires TDomNodeLists
      to be &quot;live&quot;, calling the TDomElementsNodeList.item
      method always starts a re-calculation of the
      index by traversing the node tree from the
      beginning till the specified element is found.

      So using this method to traverse the elements
      of large documents is considerably slower than
      using a node iterator or a tree walker with an
      appropriate filter and might need more of the
      computer's memory. It is therefore highly
      recommended to use a node iterator or a tree
      walker with an appropriate filter instead.

      Parameters:
      - namespaceURI
         The namespace URI of the elements to
         match on. The special value '*' matches
         all namespaces.
      - localName
         The local name of the elements to match
         on. The special value '*' matches all
         local names.

      Return Value:
         A new TDomNodelist object containing all
         the matched TDomElements.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function importNode(const importedNode;
                        const deep: Boolean): TDomNode; virtual;
    <literallayout>
      Imports a node from another document to this
      document. The returned node has no parent
      (parentNode returns nil). The source node
      is not altered or removed from the original
      document; this method creates a new copy of
      the source node.

      For all nodes, importing a node creates a
      node object owned by the importing document,
      with property values identical to the source
      node's nodeName and nodeType, plus the
      properties related to namespaces (prefix and
      namespaces URI).  As in the cloneNode
      operation on a Node, the source node is not
      altered.  User data associated to the imported
      node is not carried over. However, if any 
      user data handler has been specified along 
      with the associated data these handlers will
      be called with the appropriate parameters 
      before this method returns.

      Additional information is copied as
      appropriate to the nodeType, attempting to
      mirror the behavior expected if a fragment of
      XML source was copied from one document to
      another, recognizing that the two documents
      may have different DTDs.

      The following list describes the specifics
      for each type of node.

      ntAttribute_Node
      The ownerElement attribute is set to nil
      and the specified flag is set to true on the
      generated TDomAttr node.

      ntDocument_Fragment_Node
      If the deep option was set to true, the
      descendants of the source element are
      recursively imported and the resulting
      nodes reassembled to form the corresponding
      subtree. Otherwise this simply generates
      an empty TDomDocumentFragment node.

      ntDocument_Node
      Document nodes cannot be imported.

      ntDocument_Type_Decl_Node
      TDomDocumentTypeDecl nodes cannot be imported.

      ntElement_Node
      Specified attribute nodes of the source
      element are imported, and the generated
      TDomAttr nodes are attached to the
      generated TDomElement node. Default
      attributes are not copied, so if this
      document defines default attributes for 
      the element type, an application must 
      explicitly generate them by calling the 
      PrepareAttributes function.

      ntEntity_Reference_Node
      Only the TDomEntityReference node itself is
      copied, even if a deep import is requested,
      since the source and destination documents
      might have defined the entity differently.
      If the document being imported into provides
      a definition for this entity name, its value
      is assigned.

      ntProcessing_Instruction_Node
      The imported node copies its target and data
      values from those of the source node.

      ntText_Node,
      ntCDATA_Section_Node,
      ntComment_Node
      These three types of nodes inheriting from
      TDomCharacterData copy their data and length
      attributes from those of the source node.

      ntXPath_Namespace_Node
      TDomXPathNamespace nodes cannot be imported.

      Parameters:
      - importedNode
         The node to import.
      - deep
         If true, recursively import the subtree
         under the specified node; if false,
         import only the node itself (and its
         TDomAttr nodes, if it is a TDomElement
         node). This has no effect on TDomAttr
         and TDomEntityReference nodes.

      Return Value:
         The imported node that belongs to this
         TDomDocument object.

      Exceptions:
      - ENot_Supported_Err
         Raised if the type of node being imported
         is not supported or if the value of the
         'importedNode' parameter is nil.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomDocumentXPath = class ( TDomDocumentNS)</title>

  <para>A TDomDocumentXPath object represents an entire XML document according to the XPath data model. It is derived from TDomDocumentNS and shares all properties and methods with its parent class.  The only difference between TDomDocumentXPath and TDomDocumentNS is that TDomDocumentXPath only supports creating the following classes:</para>

	<itemizedlist>
		<listitem> TDomDocumentFragment</listitem>
		<listitem> TDomProcessingInstruction</listitem>
		<listitem> TDomElement</listitem>
		<listitem> TDomAttr</listitem>
		<listitem> TDomComment</listitem>
		<listitem> TDomText</listitem>
	</itemizedlist>

  <para>In other words: If an application tries to create another node type and specifies a TDomDocumentXPath object as its owner, an ENot_Supported_Err exception is raised.</para>

  </sect2>


  <sect2>
  <title>TDomDocumentFragment = class ( TDomNode)</title>

  <para> TDomDocumentFragment is a lightweight or minimal Document object. It is very common to want to be able to extract a portion of a document's tree or to create a new fragment of a document. Imagine implementing a user command like cut or rearranging a document by moving fragments around. It is desirable to have an object which can hold such fragments and it is quite natural to use a Node for this purpose. While it is true that a Document object could fulfil this role, a Document object can potentially be a heavyweight object, depending on the underlying implementation. What is really needed for this is a very lightweight object. TDomDocumentFragment is such an object.</para>

  <para>Furthermore, various operations -- such as inserting nodes as children of another Node -- may take TDomDocumentFragment objects as arguments; this results in all the child nodes of the TDomDocumentFragment being moved to the child list of this node.</para>

  <para>The children of a TDomDocumentFragment node are zero or more nodes representing the tops of any sub-trees defining the structure of the document. TDomDocumentFragment do not need to be well-formed XML documents (although they do need to follow the rules imposed upon well-formed XML parsed entities, which can have multiple top nodes). For example, a TDomDocumentFragment might have only one child and that child node could be a Text node. Such a structure model represents neither an HTML document nor a well-formed XML document.</para>

  <para>When a TDomDocumentFragment is inserted into a document object (or indeed any other node that may take children) the children of the TDomDocumentFragment and not the TDomDocumentFragment itself are inserted into the Node. This makes the TDomDocumentFragment very useful when the user wishes to create nodes that are siblings; the TDomDocumentFragment acts as the parent of these nodes so that the user can use the standard methods from the TDomNode class, such as InsertBefore and AppendChild.</para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
(+) constructor create(const aOwner: TDomCustomDocument);
    <literallayout>
      Creates a new instance of a TDomDocumentFragment
      object.

      Parameters:
      - AOwner
         The TDomCustomDocument that ownes the node.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomCharacterData = class ( TDomNode)</title>

  <para>The TDomCharacterData object extends TDomNode with a set of attributes and methods for accessing character data in the DOM. This set is defined here rather than on each object that uses these attributes and methods for clarity. No DOM objects correspond directly to TDomCharacterData, though TDomText and others do inherit some properties and methods from it. All offsets in this class start from 0.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Data: WideString (readonly)
    <literallayout>
      This provides access to the character data of
      a node that implements this class.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised when the TDomCharacterData node is
         readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property length: Integer (readonly)
    <literallayout>
      This provides access to the number of characters
      that are available through data and the
      substringData method below. This may have the
      value zero, i.e., CharacterData nodes may be
      empty.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function SubstringData(const offset, count: Integer):WideString; virtual;
    <literallayout>
      Extracts a range of data from the object.

      Parameters:
      - offset
         Start offset of substring to extract
      - count
         The number of characters to extract.

      Return Value:
        This method returns the specified
        substring. If the sum of offset and
        count exceeds the length, then all
        characters to the end of the data are
        returned.

      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is
         negative or greater than the number
         of characters in data, and if the
         specified count is negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure AppendData(const arg: WideString); virtual;
    <literallayout>
      Append the WideString to the end of the
      character data in this object. Upon success, 
      'data' provides access to the concatenation 
      of data and the WideString specified.

      Parameters:
      - arg
         The WideString to append.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TDomCharacterData node is
         readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure InsertData(const offset: Integer; const arg: WideString); virtual;
    <literallayout>
      Insert a WideString at the specified character
      offset.

      Parameters:
      - offset
         The character offset at which to insert
      - arg
         The WideString to insert.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TDomCharacterData node is
         readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative
         or greater than the number of characters
         in data, or if the specified count is
         negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure deleteData(const offset, count: Integer); virtual;
    <literallayout>
      Remove a range of characters from the node.
      Upon success, data and length reflect the
      change.

      Parameters:
      - offset
         The offset from which to remove characters.
      - count
         The number of characters to delete. If
         the sum of offset and count exceeds length
         then all characters from offset to the end
         of the data are deleted.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TDomCharacterData node is
         readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative
         or greater than the number of characters
         in data, or if the specified count is
         negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure replaceData(const offset, count: Integer; const arg: WideString);
    virtual;
    <literallayout>
      Replace the characters starting at the specified
      character offset with the specified string.

      Parameters:
      - offset
         The offset from which to start replacing.
      - count
         The number of characters to replace. If the
         sum of offset and count exceeds length, then
         all characters to the end of the data are
         replaced (i.e., the effect is the same as a
         remove method call with the same range,
         followed by an append method invocation).
      - arg
         The WideString with which the range must be
         replaced.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TDomCharacterData node is
         readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative
         or greater than the number of characters in
         data, or if the specified count is
         negative.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomAttr = class ( TDomNode) (#*)</title>

  <para>A TDomAttr object represents an attribute in an TDomElement object. Typically the allowable values for the attribute are defined in a document type definition (DTD) associated with the owner Document of a TDomAttr object.</para>

  <para> TDomAttr objects inherit the TDomNode class, but since they are not actually child nodes of the element they describe, they are not consider part of the XDOM document tree. Thus, the TDomNode properties parentNode, previousSibling, and nextSibling have a 'nil' value for TDomAttr objects. XDOM takes the view that attributes are properties of elements rather than having a separate identity from the elements they are associated with. Furthermore, Attribute nodes may not be immediate children of a TDomDocumentFragment object. However, they can be associated with element nodes contained within a TDomDocumentFragment object. In short, users need to be aware that Attribute nodes have some things in common with other objects inheriting the TDomNode class, but they also are quite distinct.</para>

  <para>The attribute's effective value is determined as follows: if this attribute has been explicitly assigned any value, that value is the attribute's effective value; otherwise, if there is a declaration for this attribute, and that declaration includes a default value, then that default value is the attribute's effective value; otherwise, the attribute does not exist on this element in the structure model until it has been explicitly added.  Note that the nodeValue property inherited from TDomNode can used to set or retrieve the attribute's literal value.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property dataType: TXmlDataType (readonly)
    <literallayout>
      Returns the data type of the attribute.  If
      the data type of the attribute is unknown,
      AS_STRING_DATATYPE is returned. 

      IMPORTANT: The data type of an attribute is
      determined by the DTD model associated with
      the document wherein it appears.  The DTD model 
      is initialized by validating a document. This 
      means that an application should call the 
      Validate function of an attribute's owner 
      document before it uses the attribut's 
      DataType property.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property isXmlnsDef: TDomXmlnsDeclType (readonly)
    <literallayout>
      'NSDT_DEFAULT' if this attribute is a default XML
      namespace declaration attribute, i.e. its name
      conforms to [XML Namespaces] prod. [3].
      'NSDT_PREFIXED' if this attribute is a prefixed
      XML namespace declaration attribute, i.e. its
      name conforms to [XML Namespaces] prod. [2].
      'NSDT_NONE'  if this attribute is not an XML
      namespace declaration.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property name: WideString (readonly)
    <literallayout>
      Returns the name of this attribute.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) property ownerElement: TDomElement (readonly)
    <literallayout>
      The TDomElement this attribute is attached to or
      nil if this attribute is not in use.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property specified: Boolean (readonly)
    <literallayout>
      If this attribute was explicitly given a value in the
      original document, this is true; otherwise, it is false.
      Note that the implementation is in charge of this
      attribute, not the user. If the user changes the value
      of the attribute (even if it ends up having the same
      value as the default value) then the specified flag is
      automatically flipped to true. To re-specify the
      attribute as the default value from the DTD, the user
      must delete the attribute, and then the implementation
      will make a new attribute available with specified set
      to false and the default value (if one exists).

      In summary: If the attribute has an assigned value in
      the document and specified is true, the value is the
      assigned value. If the attribute has no assigned value
      in the document and has a default value in the DTD, then
      specified is false, and the value is the default value
      in the DTD. If the attribute has no assigned value in
      the document and has a value of #IMPLIED in the DTD,
      then the attribute does not appear in the structure
      model of the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) property value: WideString (readonly)
    <literallayout>
      Returns the normalized value of the attribute as 
      described in [XML 1.0], sec. 3.3.3.

      Note that if the attribute is attached to an TDomElement
      and if information about the attribute type is available
      via a TDtdAttributeDecl object in a document structure
      model associated with the owner document of the attribute
      and if the so determined attribute type is not CDATA,
      then the normalized attribute value is further processed
      by discarding any leading and trailing space (#$20)
      characters, and by replacing sequences of space (#$20)
      characters by a single space (#$20) character.

      Hint: Use the 'nodeValue' property to set or retrieve the
      attribute's literal value.  &amp;, &lt; and " characters must,
      &gt; and ' characters should be escaped by references to
      their corresponding predefined entities.  There exists a
      global helper function EscapeDelimiters which can be
      used for this purpose.  Example:

         S:= '&lt;foo>&lt;/foo>';
         myAttribute.nodeValue:= escapeDelimiters(S);
         assert(myAttribute.value = S);

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised when the node is readonly.

      Exceptions on retrieval:
      - EConvertError
         Raised if an attempt is made to retrieve the value of
         an Attribute containing an entity reference whose
         replace value cannot be determined.
      </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomDocument;
                       const name: WideString;
                       const spcfd: Boolean);
    <literallayout>
      Creates a new instance of a TDomAttr object which is
      not namespace aware.

      Parameters:
      - aOwner
         The TDomDocument object that ownes the TDomAttr.
      - tagName
         The name of the attribute type to instantiate.
         Note that this is case-sensitive in XML.
      - spcfd
         Sets the 'isSpecified' flag of the TDomAttr.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomAttr nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor createNS(const aOwner: TDomDocumentNS;
                         const namespaceURI,
                               qualifiedName: WideString;
                         const spcfd: Boolean);
    <literallayout>
      Creates a new instance of a namespace aware TDomAttr
      object.

      Parameters:
      - aOwner
         The TDomDocumentNS object that ownes the 
         TDomAttr.
      - namespaceURI
         The namespace URI of the attribute to create.
      - qualifiedName
         The qualified name of the attribute type to
         instantiate.
      - spcfd
         Sets the 'isSpecified' flag of the TDomAttr.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name
         contains an illegal character.
      - ENamespace_Err
         Raised if the qualifiedName is malformed,
         if the qualifiedName has a prefix and the
         namespaceURI is an empty string, if the
         qualifiedName has a prefix that is 'xml'
         and the namespaceURI is different from
         'http://www.w3.org/XML/1998/namespace',
         if the qualifiedName has a prefix that is
         'xmlns' and the namespaceURI is different
         from 'http://www.w3.org/2000/xmlns/', or
         if the qualifiedName is 'xmlns', and the
         namespaceURI is different from
         'http://www.w3.org/2000/xmlns/'.
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomAttr nodes.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>


  <sect2>
  <title>TDomElement = class ( TDomNode) (*)</title>

  <para>A TDomElement objects represents an element an XML document. Elements may have attributes associated with them; since the TDomElement class inherits from TDomNode, the generic TDomNode property 'attributes' may be used to retrieve the set of all attributes for an element. There are methods on the TDomElement class to retrieve either an TDomAttr object by name or directly an Attribute value by name. Since an attribute value may contain entity references, a TDomAttr object should be retrieved to examine the possibly fairly complex sub-tree representing the attribute value.</para>

  <para>Hint: Note that the nodeValue property of a TDomElement object is always an empty WideString.  Trying to assign another value has no effect.  The information about the content of an element, i.e. text, other element, comments, etc. between a start tag and its corresponding end tag, is accessible through the element's set of child nodes.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property tagName: WideString (readonly)
    <literallayout>
      This attribute contains the string that is the
      element's name. For example, in:
               &lt;elementExample id="demo"&gt;
                       ...
               &lt;/elementExample&gt; ,
      tagName has the value "elementExample". Note
      that this is case-preserving in XML, as are
      all of the operations of XDOM.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomDocument;
                       const tagName: WideString);
    <literallayout>
      Creates a new instance of a TDomElement object which is
      not namespace aware.

      Parameters:
      - aOwner
         The TDomDocument object that ownes the TDomElement.
      - tagName
         The name of the element type to instantiate. Note that
         this is case-sensitive in XML.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid tagName is specified.
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomElement nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor createNS(const aOwner: TDomDocumentNS;
                         const namespaceURI,
                               qualifiedName: WideString);
    <literallayout>
      Creates a new instance of a namespace aware TDomElement
      object.

      Parameters:
      - aOwner
         The TDomDocumentNS object that ownes the TDomElement.
      - namespaceURI
         The namespace URI of the element to create.
      - qualifiedName
         The qualified name of the element type to instantiate.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains
         an illegal character.
      - ENamespace_Err
         Raised if the qualifiedName is malformed, if the
         qualifiedName has a prefix and the namespaceURI is an
         empty string, if the qualifiedName has a prefix that
         is 'xml' and the namespaceURI is different from
         'http://www.w3.org/XML/1998/namespace'.
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomElement nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function getAttributeLiteralValue(const name: WideString): WideString; virtual;
    <literallayout>
      Retrieves an attribute's literal value by
      name.

      Parameters:
      - name
         The name of the attribute to retrieve

      Return Value:
         The attribute's literal value as a
         WideString, or the empty string if that
         attribute does not have a specified or
         defaulted value.

      Exceptions:
      - ENamespace_Err
         Raised if attributes.namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function getAttributeNormalizedValue(const name: WideString): WideString; virtual;
    <literallayout>
      Retrieves an attribute's normalized value by
      name.

      Parameters:
      - name
         The name of the attribute to retrieve

      Return Value:
         The attribute's normalized value as a
         WideString, or the empty string if that
         attribute does not have a specified or
         defaulted value.

      Exceptions:
      - EConvert_Err
         Raised if the attribute's literal attribute
         value cannot be resolved into a normalized
         value.
      - ENamespace_Err
         Raised if attributes.namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function getAttributeNode(const name: WideString): TDomAttr; virtual;
    <literallayout>
      Retrieves an attribute node by name. To
      retrieve an attribute with a qualified
      name and namespace URI, use the
      getAttributeNS method.

      Parameters:
      - name
         The name of an attribute to retrieve.
      Return Value:
         The TDomAttr node with the specified
         attribute name or nil if there is no
         such TDomAttr.

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware
         is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function getAttributeNodeNS(const namespaceURI,
                                      localName: WideString): TDomAttr; virtual;
    <literallayout>
      Retrieves an attribute node by local name
      and namespace URI.

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to
         retrieve.
      - localName
         The local name of the attribute to
         retrieve.

      Return Value:
         The TDomAttr node with the specified
         attribute local name and namespace
         URI or nil if there is no such TDomAttr.

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function getAttributeNSLiteralValue(const namespaceURI,
                                              localName: WideString): WideString; virtual;
    <literallayout>
      Retrieves an attribute value by local name
      and namespace URI.

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to
         retrieve
      - localName
         The local name of the attribute to
         retrieve

      Return Value:
         The Attribute value as a string, or the
         empty string if that attribute does not
         have a specified or defaulted value.

      Exceptions:
      - ENamespace_Err
         Raised if attributes.namespaceAware is
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function getAttributeNSNormalizedValue(const namespaceURI,
                                                 localName: WideString): WideString; virtual;
    <literallayout>
      Retrieves an attribute value by local name
      and namespace URI.

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to
         retrieve
      - localName
         The local name of the attribute to
         retrieve

      Return Value:
         The Attribute value as a string, or the
         empty string if that attribute does not
         have a specified or defaulted value.

      Exceptions:
      - EConvert_Err
         Raised if the attribute's literal attribute
         value cannot be resolved into a normalized
         value.
      - ENamespace_Err
         Raised if attributes.namespaceAware is
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function getElementsByTagName(const Name: WideString): TDomNodeList;
    virtual;
    <literallayout>
      Returns a TDomNodeList of all descendant
      TDomElements with a given tag name in the
      order in which they would be encountered
      in a preorder traversal of the Element
      tree. Note that calling this function
      will internally create a TDomNodeList for
      the specified tag name unless this had
      been done by a previouse call. This
      TDomNodeList will (only) be freed when
      the TDomElement itself is freed. Since
      calling the GetElementsByTagName function
      very often with different tag names will
      result in high memory usage, it is
      recommended to use a node iterator or a
      tree walker with an appropriate filter
      instead. Since the DOM requires
      TDomNodeLists to be &quot;live&quot;,
      calling the TDomElementsNodeList.item
      method always starts a re-calculation of
      the index by traversing the node tree
      from the beginning till the specified
      element is found.  Therefore using this
      method to traverse the elements of large
      documents is considerably slower than
      using a node iterator or a tree walker
      with an appropriate filter.

      Parameters:
      - name
         The name of the tag to match on. The
         special value '*' matches all tags.

      Return Value:
         A list of matching TDomElement nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function getElementsByTagNameNS(const namespaceURI,
                                          localName: WideString): TDomNodeList;
                                          virtual;
    <literallayout>
      Returns a TDomNodeList of all the TDomElements
      with a given local name and namespace URI in
      the order in which they would be encountered
      in a preorder traversal of the Element tree,
      starting from this node.

      Hint: Calling this function will internally
      create a TDomNodeList for the specified tag
      name unless this had been done by a previouse
      call. This TDomNodeList will (only) be freed
      when the TDomElement itself is freed. Since
      calling the GetElementsByTagNameNS function
      very often with different tag names will
      result in high memory usage, it is recommented
      to use a node iterator or a tree walker with
      an appropriate filter instead. Since the DOM
      requires TDomNodeLists to be &quot;live&quot;,
      calling the TDomElementsNodeList.item method
      always starts a re-calculation of the index by
      traversing the node tree from the beginning
      till the specified element is found. Therefore
      using this method to traverse the elements of
      large documents is considerably slower than
      using a node iterator or a tree walker with an
      appropriate filter.

      Parameters:
      - namespaceURI
         The namespace URI of the elements to match
         on. The special value '*' matches all
         namespaces.
      - localName
         The local name of the elements to match on.
         The special value '*' matches all local
         names.

      Return Value:
         A new TDomNodelist object containing all
         the matched TDomElements.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function hasAttribute(const name: WideString): Boolean;
    <literallayout>
      Returns true when an attribute with a given
      name is specified on this element [not yet
      implemented: or has a default value].

      Parameters:
      - name
         The name of the attribute to look for.

      Return Value: (*)
         true if an attribute with the given name
         is specified on this element [not yet
         implemented: or has a default value],
         false otherwise.

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is
         'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function hasAttributeNS(const namespaceURI,
                                  localName: WideString): Boolean;
    <literallayout>
      Returns true when an attribute with a
      given local name and namespace URI is
      specified on this element [not yet
      implemented: or has a default value].

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to
         look for.
      - localName
         The local name of the attribute to
         look for.

      Return Value: (*)
         true if an attribute with a given
         local name and namespace URI is
         specified [not yet implemented: or
         has a default value] on this element,
         false otherwise.

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware
         is 'False'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function removeAttribute(const Name: WideString): TDomAttr; virtual;
    <literallayout>
      Removes the Attribute with the specified name.
      [*Not yet implemented: If the removed Attribute
      has a default value it is immediately replaced.]
      To remove an attribute with a qualified name and
      namespace URI, use the removeAttributeNS method.

      Parameters:
      - name
         The name of the attribute to remove.

      Return Value: (+)
         The removed TDomAttr object.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENot_Found_Err (+)
         Raised if there is no attribute named name in
         the list.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function removeAttributeNode(const OldAttr: TDomAttr): TDomAttr; virtual;
    <literallayout>
      Removes the specified attribute. [*Not yet
      implemented: If the removed Attribute has a
      default value it is immediately replaced.
      The replacing attribute has the same
      namespace URI and local name, as well as
      the original prefix, when applicable.]

      Parameters:
      - oldAttr
         The TDomAttr node to remove from the
         attribute list.

      Return Value:
         Returns the TDomAttr node that was
         removed.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENot_Found_Err (+)
         Raised if oldAttr is not a TDomAttr
         of the TDomElement.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function removeAttributeNS(const namespaceURI,
                                     localName: WideString): TDomAttr; virtual;
    <literallayout>
      Removes the Attribute by local name and
      namespace URI. [*Not yet implemented: If the
      removed Attribute has a default value it is
      immediately replaced. The replacing attribute
      has the same namespace URI and local name, as
      well as the original prefix.]

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to remove.
      - localName
         The local name of the attribute to remove.

      Return Value: (+)
         The removed TDomAttr object.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENot_Found_Err (+)
         Raised if there is no attribute named name
         in the list.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function setAttribute(const name,
                                value: WideString): TDomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with that name
      is already present in the element, its literal value
      is changed to be that of the value parameter.

      Hint: Some characters allowed in the attribute's
      normalized value are not allowed in the attribute's
      literal value.  Instead, they must be escaped by
      references to their corresponding predefined
      entities.  See the description of the TDomAttr.value
      property for details.

      Hint: To set an attribute with a qualified name and
      namespace URI, use the setAttributeNS method.

      Parameters:
      - name
         The name of an attribute to create or alter.
      - value
         The literal value of the attribute.

      Return Value: (+)
         The new TDomAttr object if one was created,
         otherwise nil.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function setAttributeNode(const NewAttr: TDomAttr): TDomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with
      that name (nodename) is already present in
      the element, it is replaced by the new one.
      To add a new attribute node with a
      qualified name and namespace URI, use the
      setAttributeNodeNS method.

      Parameters:
      - newAttr
         The attribute node to add to the
         attribute list

      Return Value:
         If the newAttr attribute replaces an
         existing attribute with the same name,
         the previously existing Attribute node
         is returned, otherwise nil is returned.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - EWrong_Document_Err
         Raised if newAttr was created from a
         different document than the one that
         created the TDomElement.
      - EInuse_Err
         Raised if newAttr is already a TDomAttr
         of another TDomElement object. The DOM
         user must explicitly clone TDomAttr nodes
         to re-use them in other TDomElements.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is
         true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function setAttributeNodeNS(const NewAttr: TDomAttr): TDomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with
      that local name and namespace URI is
      already present in the element, it is
      replaced by the new one.

      Parameters:
      - newAttr
         The attribute node to add to the
         attribute list

      Return Value:
         If the newAttr attribute replaces an
         existing attribute with the same local
         name and namespace URI, the replaced
         TDomAttribute node is returned,
         otherwise nil is returned.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - EWrong_Document_Err
         Raised if newAttr was created from a
         different document than the one
         that created the TDomElement.
      - EInuse_Err
         Raised if newAttr is already a TDomAttr
         of another TDomElement object. The DOM
         user must explicitly clone TDomAttr
         nodes to re-use them in other
         TDomElements.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function setAttributeNS(const namespaceURI,
                                  qualifiedName,
                                  value: WideString): TDomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with
      that same local name and namespace URI is
      already present on the element, its prefix
      is changed to be the prefix part of the
      qualifiedName, and its literal value is
      changed to be the value parameter.

      Hint: Some characters allowed in the attribute's
      normalized value are not allowed in the attribute's
      literal value.  Instead, they must be escaped by
      references to their corresponding predefined
      entities.  See the description of the TDomAttr.value
      property for details.

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to
         create or alter.
      - qualifiedName
         The qualified name of the attribute to
         create or alter.
      - value
         The literal value of ther attribute.

      Return Value: (+)
         The new TDomAttr object if one was
         created, otherwise nil.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed,
         if the qualifiedName has a prefix and the
         namespaceURI is an empty string, if the
         qualifiedName has a prefix that is 'xml'
         and the namespaceURI is different from
         'http://www.w3.org/XML/1998/namespace',
         if the qualifiedName has a prefix that is
         'xmlns' and the namespaceURI is defferent
         from 'http://www.w3.org/2000/xmlns/', or
         if the qualifiedName is 'xmlns', and the
         namespaceURI is different from
         'http://www.w3.org/2000/xmlns/'[*, or if
         attributes.namespaceAware is false].
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomText = class ( TDomCharacterData)</title>

  <para>The TDomText object represents the textual content (termed "character data" in XML) of an Element or Attribute. If there is no markup inside an element's content, the text is contained in a single TDomText object that is the child of the element. Any markup is parsed into child elements that are siblings of the text nodes on either side of it, and whose content is represented as text node children of the markup element.</para>

  <para>When a document object model is first made available using one of the parsing methods of a TXmlToDomParser component, there is only one TDomText node for each block of text. Users may create adjacent Text nodes that represent the contents of a given element without any intervening markup, but should be aware that there is no way to represent the separations between these nodes in XML, so they will not (in general) persist between XML editing sessions. The normalize method on TDomElement merges any such adjacent TDomText objects into a single node for each block of text; this is recommended before employing operations that depend on a particular document structure, such as navigation with XPointers.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property charRefGenerated: Boolean;
    <literallayout>
      'True' if the TDomText node represents text which
      was composed completely or in part with character
      references in its source XML document.

      The default value of CharRefGenerated is 'False';      
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isElementContentWhitespace: Boolean (readonly);
    <literallayout>
      Returns 'True' if this text node contains only
      whitespace in element content, often abusively
      called 'ignorable whitespace'; otherwise or if
      the document structure model (DTD or Schema, etc.)
      of the owner document of this Text node does not
      contain an element declaration for this Text node's
      parent element or if this Text node has no parent
      element or if there exists no document structure
      model for the owner document of this Text node, 
      'False' is returned.

      Note that whitespace characters generated directly 
      from character references do not qualify for 
      whitespace in element content (see [XML 1.0], 
      sect. 3, prod. [39] "VC: Element Valid").
      
      Hint: To automatically build an document structure 
      model for a given TDomDocument instance use the 
      BuildDtdModel or Validate method of its associated
      Validation Agent.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomCustomDocument);
    <literallayout>
      Creates a new instance of a TDomText object.

      Parameters:
      - aOwner
         The owner document of the TDomText.

      Exceptions:
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomText nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function splitText(const offset: Integer): TDomText; virtual;
    <literallayout>
      Breaks a text node into two text nodes at the
      specified offset, keeping both in the tree as
      siblings. This node then only contains all the
      content up to the offset point. And a new Text
      node, which is inserted as the next sibling of
      this node, contains all the content at and
      after the offset point.

      Note that the CharRefGenerated property of the
      new Text node has the same value as that of the
      old Text node.

      Parameters:
      - offset
         The offset at which to split, starting from 0.

      Return Value:
         This method returns the new text node
         containing all the content at and after the
         offset point. The original node contains all
         the content up to the offset point.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative
         or greater than the number of characters
         in data.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  <sect2>
  <title>TDomComment = class ( TDomCharacterData)</title>

  <para>This represents the content of a comment, i.e. all the characters between the starting '&lt;!--' and ending '--&gt;'.</para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomCustomDocument);
    <literallayout>
      Creates a new instance of a TDomComment object.

      Parameters:
      - aOwner
         The owner document of the TDomComment.

      Exceptions:
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomComment nodes.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>


  <sect2>
  <title>TDomProcessingInstruction = class ( TDomNode)</title>

  <para>The ProcessingInstruction class represents a <quote>processing instruction</quote>, used in XML as a way to keep processor-specific information in the text of the document.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property data: WideString
    <literallayout>
      The content of the processing instruction. This
      is from from the first non whitespace character
      after the target to the character immediately
      preceding the ?&gt;.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property target: WideString (readonly);
    <literallayout>
      The target of the processing instruction. XML
      defines this as being the first token following
      the markup that begins the processing instruction.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomCustomDocument;
                       const targ: WideString);
    <literallayout>
      Creates a new instance of a TDomProcessingInstruction 
      object.

      Parameters:
      - aOwner
         The owner document of the TDomProcessingInstruction.
      - targ
         The target part of the processing instruction.

      Exceptions:
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomProcessingInstruction nodes.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>


  <sect2>
  <title>TDomCDATASection = class ( TDomText)</title>

  <para>CDATA Sections are used to escape blocks of text containing characters that would otherwise be regarded as markup. The only delimiter that is recognized in a CDATA Section is the <quote>]]&gt;</quote> string that ends the CDATA Section. CDATA Sections cannot be nested. The primary purpose is for including material such as XML fragments, without needing to escape all the delimiters. Applications should be aware of the fact that CDATA Sections are nevertheless bound to the character range defined in [XML 1.0], prod. [2], § 2.2: #x9 | #xA | #xD | [#x20-#xD7FF]| [#xE000-#xFFFD]| [#x10000-#x10FFFF] mapped to UTF-16.  Therefore CDATA Sections may not be used directly with a character encoding (&quot;charset&quot;) or binary data which use values excluded by prod. [2] mapped to UTF-16. Instead an application should use a conversion function for illegal values and convert the data back on retrieval, or use an external unparsed entity to refer to the data.</para>

  <para>The TDomCDATASection inherits the TDomCharacterData properties and methods through the TDomText class. Adjacent CDATA Sections are not merged by use of the TDomElement.normalize method.</para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomCustomDocument);
    <literallayout>
      Creates a new instance of a TDomCDATASection object.

      Parameters:
      - aOwner
         The owner document of the TDomCDATASection.

      Exceptions:
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomCDATASection nodes.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>


  <sect2>
  <title>TDomDocumentTypeDecl = class ( TDomNode) (+)</title>

  <para> TDomDocumentTypeDecl represents a XML document type declaration. Each document has a (possibly nil) 'doctypeDecl' property that contains a reference to a TDomDocumentTypeDecl object.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property internalSubset: WideString  (readonly)
    <literallayout>
      The internal subset as a WideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property intSubsetStartByteNumber: Int64  
    <literallayout>
      The byte offset of the first character of the
      internal subset of the DTD, if the DTD 
      has an XML document representation.  This is the
      character immediately following the '[' in
      a Document Type Declaration.  If this DTD has no
      XML document representation, this value should be
      '0'.  IntSubsetByteOffset is used to calculate 
      location information in error reports.

      The default value is '0'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property intSubsetStartCharNumber: Int64 
    <literallayout>
      The offset of the first character of the internal 
      subset of the DTD in terms of preceeding UCS-4 
      characters, if the DTD has an XML document 
      representation.  If this DTD has no XML document 
      representation, this value should be '0'.  
      IntSubsetByteOffset is used to calculate 
      location information in error reports.

      The default value is '0'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property intSubsetStartColumn: Int64 
    <literallayout>
      The column offset of the first character of the 
      internal subset of the DTD, if the DTD 
      has an XML document representation.  The first 
      character of the internal subset of the DTD is the
      character immediately following the '[' in
      a Document Type Declaration.  The column offset
      is the column of this character minus 1. If this 
      DTD has no XML document representation, this value 
      should be '0'.  IntSubsetStartColumn is used to 
      calculate location information in error reports.

      The default value is '0'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property intSubsetStartLine: Int64
    <literallayout>
      The line of the first character of the internal 
      subset of the DTD, if the DTD has an 
      XML document representation.  This is the
      character immediately following the '[' in
      a Document Type Declaration.  If this DTD has no
      XML document representation, this value should be
      '1'.  IntSubsetStartLine is used to calculate 
      location information in error reports.

      The default value is '1'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property name: WideString (readonly)
    <literallayout>
      The name attribute is a WideString that holds the name
      of DTD; i.e., the name immediately following the DOCTYPE
      keyword.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property publicId: WideString  (readonly)
    <literallayout>
      The public identifier of the external subset.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property systemId: WideString  (readonly)
    <literallayout>
      The system identifier of the external subset.
    </literallayout>
    </para>
    </listitem>

   </itemizedlist>
   </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomCustomDocument;
                       const doctypeName,
                             pubId,
                             sysId,
                             intSubset: WideString);
    <literallayout>
      Creates a new instance of a TDomDocumentTypeDecl 
      object.

      Parameters:
      - aOwner
         The document object that ownes the
         TDomDocumentTypeDecl object.
      - doctypeName
         The name of the DTD; i.e., the name immediately
         following the DOCTYPE keyword.
      - pubId
         The public identifier of the document type.
      - sysId
         The system identifier of the document type.
      - intSubset
         The internal subset of the document type.

      Exceptions:
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomDocumentTypeDecl nodes.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomEntityReference = class ( TDomNode) (*)</title>

  <para> TDomEntityReference objects may be inserted into the structure model when an entity reference is in the source document, or when the user wishes to insert an entity reference. Note that character entities are considered to be expanded by the HTML or XML processor so that characters are represented by their Unicode equivalent rather than by an entity reference. The replacement value of the referenced entity, if available, appears in the child list of the TDomEntityReference object. Alternatively, the XML processor may completely expand references to entities while building the structure model, instead of providing EntityReference objects.</para>

  <para>XML does not mandate that a non-validating XML processor read and process entity declarations made in the external subset or declared in external parameter entities. This means that parsed entities declared in the external subset need not be expanded by some classes of applications, and that the replacement value of the entity may not be available.</para>

  <para>The resolution of the children of the EntityReference (the replacement value of the referenced entity) may be lazily evaluated; actions by the user (such as calling the childNodes method on the EntityReference Node) are assumed to trigger the evaluation.</para>


  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property refersToPredefinedEntity: Boolean (readonly)
    <literallayout>
      This is 'True', if this TDomEntityReference refers
      to one of the predefined entities "lt", "gt", "amp",
      "apos", or "quote" (see [XML 1.0], sec. 4.6),
      otherwise it is 'False'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwner: TDomCustomDocument;
                       const name: WideString);
    <literallayout>
      Creates a new instance of a TDomEntityReference object.

      Parameters:
      - aOwner
         The document object that ownes the TDomEntityReference.
      - name
         The name of the TDomEntityReference.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENot_Supported_Err 
         Raised if the specified owner does not support
         the creation of TDomEntityReference nodes.
    </literallayout>
    </para>
  </listitem>

  </itemizedlist>
  </para>
  </sect2>

  <sect2>
  <title>TDomXPathNamespace = class ( TDomNode) (+)</title>

  <para> TDomXPathNamespace nodes are maintained by TDomXPathNodeSetResult objects to represent the XPath namespace node type (see [XPath 1.0]). Attempts to place it into a hierarchy or a TDomNamedNodeMap result in a EHierarchy_Request_Err exception. TDomXPathNamespace nodes are read only, so setting of attributes that would mutate the node or attempts to set the prefix or node value result in an ENo_Modification_Allowed_Err exception.</para>

  <para> TDomXPathNamespace objects are created by XDOM when evaluating an XPath expression.  They are owned by the TDomXPathNodeSetResult object created during XPath evaluation.  TDomXPathNamespace objects are automatically destroyed when their owner TDomXPathNodeSetResult object is destroyed.</para>
      
  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property localName: WideString (readonly)
    <literallayout>
      The prefix of the namespace represented by the
      node. This is the same as 'prefix'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property namespaceURI: WideString (readonly)
    <literallayout>
      The namespace URI of the namespace represented
      by the node. This is the same as 'nodeValue'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property nodeValue: WideString
    <literallayout>
      The namespace URI of the namespace represented
      by the node. This is the same as 'namespaceURI'.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Always raised, because TDomXPathNamespace
         nodes are readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ownerDocument: TDomCustomDocument (readonly) 
    <literallayout>
      OwnerDocument matches the ownerDocument of 
      the ownerElement even if the element is later
      adopted.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ownerElement: TDomElement (readonly)
    <literallayout>
      The TDomElement node on which the namespace 
      was in scope when it was requested. This does
      not change on a returned namespace node even 
      if the document changes such that the namespace 
      goes out of scope on that element and this node
      is no longer found there by XPath.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ownerSet: TDomXPathNodeSetResult (readonly)
    <literallayout>
      The TDomXPathNodeSetResult object which owns
      this TDomXPathNamespace node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property prefix: WideString 
    <literallayout>
      The prefix of the namespace represented by the
      node. This is the same as 'localName'.
      
      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Always raised, because TDomXPathNamespace
         nodes are readonly.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aOwnerSet: TDomXPathNodeSetResult;
                       const aOwnerElement: TDomElement;
                       const aNamespaceUri,
                             aPrefix: WideString);
    <literallayout>
      Creates a new instance of a TDomXPathNamespace object.
      Applications should not call 'create' directly.
      TDomXPathNamespace objects are created by XDOM when
      evaluating an XPath expression.

      Parameters:
      - aOwnerSet
         The TDomXPathNodeSetResult object which owns
         this TDomXPathNamespace object.
      - aOwnerElement
         The TDomElement object this TDomXPathNamespace 
         object is attached to.
      - aNamespaceUri
         The namespace URI associated with this 
         TDomXPathNamespace object.
      - aPrefix
         The prefix associated with this TDomXPathNamespace
         object.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified prefix is malformed.
      - ENamespace_Err
         Raised if a prefix is specified and the
         namespaceURI is an empty string, if the prefix
         is 'xml' and the namespaceURI is different from
         'http://www.w3.org/XML/1998/namespace', or if
         the prefix is 'xmlns' and the namespaceURI is
         different from 'http://www.w3.org/2000/xmlns/'.
    </literallayout>
    </para>
  </listitem>

  </itemizedlist>
  </para>
  </sect2>
  
  
  </sect1>

</chapter>


<chapter>
<title>Document Validation (+)</title>

<para>This chapter describes classes used for building DTD structure models.</para>

<sect1>
<title>Procedural Types</title>

  <sect2>
  <title>TDomResolveEntityProc</title>
    <para>
    <literallayout>
      TDomResolveEntityProc =
          procedure(const Origin: TDtdOrigin;
                    const BaseURI,
                          PubId,
                          SysId: WideString;
                      out ReplacementText: WideString;
                      out Error: TXmlErrorType) 
                    of object;
    </literallayout>
    </para>

    <para>Defines the callback function used in the TDtdEntityDecl.Resolve method to retrieve the replacement text of an external parsed entity.</para>
  </sect2>

</sect1>


<sect1>
<title>Typed and Untyped Constants</title>

<sect2>
<title>Untyped Constants</title>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>AS_UNBOUNDED</emphasis> = High(Integer);</para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TDtdContentType</title>

<para> TDtdContentType defines all valid values for the 'contentType' property of the TDtdElementDecl class.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>DTD_ANY_CONTENTTYPE</emphasis>
    Represents an ANY content type for an Element declaration.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ELEMENT_CONTENTTYPE</emphasis>
    Represents an element only content type for an Element declaration.  An element-only content type validates elements with children that conform to the supplied content model.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_EMPTY_CONTENTTYPE</emphasis>
    Represents an EMPTY content type for an Element declaration.  A content type with the distinguished value empty validates elements with no character or element information item children.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_MIXED_CONTENTTYPE</emphasis>
    Represents a MIXED content type for an Element declaration where the element order and number of the child elements has not to be respected.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_STRICT_MIXED_CONTENTTYPE</emphasis>
    Represents a MIXED content type for an Element declaration where the element order and number of the child elements has to be respected.
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TXmlDataType</title>

<para>TXmlDataType defines basic data types supported by DTD or Schema models. Note that only a some of these data types are actually supported by DTD models. The Schema model types have been added in case an application wants to implement support for additional data types.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>AS_STRING_DATATYPE</emphasis>
    A code representing the string data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NOTATION_DATATYPE</emphasis>
    A code representing the NOTATION data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_ID_DATATYPE</emphasis>
    A code representing the ID data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_IDREF_DATATYPE</emphasis>
    A code representing the IDREF data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_IDREFS_DATATYPE</emphasis>
    A code representing the IDREFS data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_ENTITY_DATATYPE</emphasis>
    A code representing the ENTITY data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_ENTITIES_DATATYPE</emphasis>
    A code representing the ENTITIES data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NMTOKEN_DATATYPE</emphasis>
    A code representing the NMTOKEN data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NMTOKENS_DATATYPE</emphasis>
    A code representing the NMTOKENS data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_BOOLEAN_DATATYPE</emphasis>
    A code representing the Boolean data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_FLOAT_DATATYPE</emphasis>
    A code representing the float data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_DOUBLE_DATATYPE</emphasis>
    A code representing the double data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_DECIMAL_DATATYPE</emphasis>
    A code representing the decimal data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_HEXBINARY_DATATYPE</emphasis>
    A code representing the hexbinary data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_BASE64BINARY_DATATYPE</emphasis>
    A code representing the base64binary data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_ANYURI_DATATYPE</emphasis>
    A code representing the uri reference data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_QNAME_DATATYPE</emphasis>
    A code representing the XML qualified name data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_DURATION_DATATYPE</emphasis>
    A code representing the duration data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_DATETIME_DATATYPE</emphasis>
    A code representing the datetime data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_DATE_DATATYPE</emphasis>
    A code representing the date data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_TIME_DATATYPE</emphasis>
    A code representing the time data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_GYEARMONTH_DATATYPE</emphasis>
    A code representing the yearmonth data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_GYEAR_DATATYPE</emphasis>
    A code representing the year data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_GMONTHDAY_DATATYPE</emphasis>
    A code representing the monthday data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_GDAY_DATATYPE</emphasis>
    A code representing the day data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_GMONTH_DATATYPE</emphasis>
    A code representing the month data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_INTEGER_DATATYPE</emphasis>
    A code representing an Integer data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NAME_DATATYPE</emphasis>
    A code representing the Name data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NCNAME_DATATYPE</emphasis>
    A code representing the NCName data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NORMALIZEDSTRING_DATATYPE</emphasis>
    A code representing the Normalized string data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_TOKEN_DATATYPE</emphasis>
    A code representing a token data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_LANGUAGE_DATATYPE</emphasis>
    A code representing a Language data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NONPOSITIVEINTEGER_DATATYPE</emphasis>
    A code representing a Non-positive Integer data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NEGATIVEINTEGER_DATATYPE</emphasis>
    A code representing a negative Integer data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_LONG_DATATYPE</emphasis>
    A code representing a long data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_INT_DATATYPE</emphasis>
    A code representing an Integer data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_SHORT_DATATYPE</emphasis>
    A code representing a short data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_BYTE_DATATYPE</emphasis>
    A code representing a byte data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_NONNEGATIVEINTEGER_DATATYPE</emphasis>
    A code representing a non-negative Integer data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_UNSIGNEDLONG_DATATYPE</emphasis>
    A code representing an unsigned long data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_UNSIGNEDINT_DATATYPE</emphasis>
    A code representing an unsigned Integer data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_UNSIGNEDSHORT_DATATYPE</emphasis>
    A code representing a unsigned short data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_UNSIGNEDBYTE_DATATYPE</emphasis>
    A code representing an unsigned byte data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_POSITIVEINTEGER_DATATYPE</emphasis>
    A code representing a positive Integer data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_ANYSIMPLETYPE_DATATYPE</emphasis>
    A code representing an anySimpleType data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AS_ANYTYPE_DATATYPE</emphasis>
    A code representing an anyType data type as defined in [XML Schema Part 2].
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TDtdEntityType</title>

<para> TDtdEntityType defines all valid values for the 'entityType' property of the TDtdEntityDecl class.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>DTD_INTERNAL_ENTITY</emphasis>
    Indicates an internal entity.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_EXTERNAL_ENTITY</emphasis>
    Indicates an external entity.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_PREDEFINED_ENTITY</emphasis>
    Indicates a predefined entity.
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TDtdOrigin</title>

<para> TDtdOrigin defines all valid values to describe the origin of declarations in a DTD document structure model.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>DTD_INTERNALLY_DECLARED</emphasis>
    Indicates that a declaration is appearing in the internal subset of a DTD, but not in a parameter entity (external or internal, the latter being excluded because non-validating processors are not required to read them).
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_EXTERNALLY_DECLARED</emphasis>
    Indicates that a declaration is appearing in the external subset of a DTD or in a parameter entity (external or internal, the latter being included because non-validating processors are not required to read them).
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_PREDEFINED</emphasis>
    Indicates that a declaration is representing a predefined entity.
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TDtdFrequency</title>

<para>TDtdFrequency defines all valid values for the 'frequency' property of the TDtdContentModel class.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>DTD_REQUIRED_FRQ</emphasis>
    XML elements correspond to the content model must appear exactly once.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_OPTIONAL_FRQ</emphasis>
    XML elements correspond to the content model may appear zero or one times.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ONE_OR_MORE_FRQ</emphasis>
    XML elements correspond to the content model may appear one or more times.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ZERO_OR_MORE_FRQ</emphasis>
    XML elements correspond to the content model may appear zero or more times.
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TDtdContentModelType</title>

<para> TDtdContentModelType defines all valid values for the ContentModelType property of the TDtdContentModel class.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>DTD_CHOICE_CM</emphasis>
    This constant value signifies a choice operator. For example, in a DTD, this would be the '|' operator.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ELEMENT_CM</emphasis>
    This constant value signifies a content model representing an elementary particle.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_SEQUENCE_CM</emphasis>
    This constant value signifies a sequence operator. For example, in a DTD, this would be the ',' operator.
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TDtdObjectType</title>

<para> TDtdObjectType defines all valid DTD node types.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>DTD_UNDEFINED</emphasis>
    The object describes no particular schema element.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ATTLIST_DECLARATION</emphasis>
    The object describes an attribute-list declaration.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ATTRIBUTE_DECLARATION</emphasis>
    The object describes an attribute declaration within an attribute-list declaration.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_CONTENT_MODEL</emphasis>
    The object describes a content model definition.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ELEMENT_DECLARATION</emphasis>
    The object describes an element declaration.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_ENTITY_DECLARATION</emphasis>
    The object describes an entity declaration.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>DTD_NOTATION_DECLARATION</emphasis>
    TThe object describes a notation declaration.
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>TDtdObjectTypeSet</title>

<para> TDtdObjectTypeSet = set of TDtdObjectType;</para>
<para> TDtdObjectTypeSet defines a set of TDtdObjectType instances.</para>
</sect2>


<sect2>
<title>TDomAttrValueConstraint</title>

<para> TDomAttrValueConstraint defines all valid DTD value constraints.</para>

<para>Defined Constants:</para>
<para>
<itemizedlist>

  <listitem>
  <para><emphasis>AVC_DEFAULT</emphasis>
    Indicates that there is a default value constraint.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AVC_FIXED</emphasis>
    Indicates that there is a fixed value constraint for this attribute.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AVC_IMPLIED</emphasis>
    Describes that the component does not have any value constraint.
  </para>
  </listitem>

  <listitem>
  <para><emphasis>AVC_REQUIRED</emphasis>
    Indicates that attribute is required.
  </para>
  </listitem>

</itemizedlist>
</para>
</sect2>


</sect1>


<sect1>
<title>List Classes</title>

<sect2>
<title>TDtdObjectList = class</title>

  <para>The TDtdObjectList class provides an ordered collection of TDtdObject objects.  TDtdObjectList objects are "live".   The items in the TDtdObjectList object are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property length: Integer (readonly)
    <literallayout>
      The number of nodes in the TDtdObjectList
      instance.  The range of valid child node indices
      is '0' to 'length - 1' inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function item(const index: Integer): TDtdObject; virtual;
    <literallayout>
      Returns the indexth item in the collection.
      If index is greater than or equal to the number
      of nodes in the list, nil is returned.

      Parameters:
      - index
         Index into the collection.

      Return Value:
         The TDtdObject object at the indexth
         position in the collection, or nil if that is
         not a valid index.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>


<sect2>
<title>TDtdNamedObjectMap = class</title>

  <para>A TDtdNamedObjectMap object is used to maintaine a collection of non namespace-aware objects that can be accessed by name. These objects are not maintained in any particular order. Objects contained in a TDtdNamedObjectMap object may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a TDtdNamedObjectMap object.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property length: Integer (readonly)
    <literallayout>
      The number of nodes in the TDtdNamedObjectMap
      instance.  The range of valid child node
      indices is '0' to 'length - 1' inclusive.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ownerModel: TDtdModel (readonly)
    <literallayout>
      The TDtdModel instance this map belongs to.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function getNamedItem(const name: WideString): TDtdObject; virtual;
    <literallayout>
      Retrieves a TDtdObject object specified by name.

      Parameters:
      - Name
         The name of a TDtdObject object to retrieve.

      Return Value:
         A TDtdObject object with the specified name,
         or nil if the map does not contain a
         TDtdObject with the given name.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function item(const index: Integer): TDtdObject; virtual;
    <literallayout>
      Returns the indexth item in the map. If index is
      greater than or equal to the number of nodes in
      the map, nil is returned.

      Parameters:
      - index
         Index into the map.

      Return Value:
         The TDtdObject object at the indexth position
         in the map, or nil if that is not a valid index.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>

</sect1>


<sect1>
<title>Validation Agents</title>

<para>Validation agents are classes used to centralize the code for validating an XML document. They are usually not created directly by an application, but used internally in other XDOM classes such as TDomDocument.</para>

<sect2>
<title>TDtdValidationAgent = class</title>

  <para>The TDtdValidationAgent class is used to centralize the code for validating a document tree against a DTD. The DTD itself is represented by a TDtdModel object which is accessible via the TDtdValidationAgent.DtdModel property.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DtdModel: TDtdModel (readonly)
    <literallayout>
      Provides access to the TDtdModel object used 
      to model the DTD, if any, of the owner document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerDocument: TDomDocument (readonly)
    <literallayout>
      Provides access to the TDomDocument object
      associated with this model collection.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const aOwner: TDomDocument);
    <literallayout>
      Creates a new TDtdValidationAgent instance.
      Applications usually do not need to create
      TDtdValidationAgent objects themselves,
      because each TDomDocument objects maintains 
      its own validation agent.

      Parameters:
      - aOwner
         The TDomDocument node which owns this
         TDtdValidationAgent instance.

      Exceptions:
      - ENot_Supported_Err
         Raised if no owner document had been 
         specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure BuildDtdModel(const ResolveExtEntities: Boolean); virtual;
    <literallayout>
      Builds or rebuilds the associated DTD object model
      for the owner document, based on the owner
      document's DoctypeDecl node, if any.

      How external parameter entities are treated when
      building the DTD object model is governed by the 
      ResolveExtEntities property.

      Parsing errors are reported to the application via
      the OnError event of the owner document's
      associated TDomImplementation component.  The
      location information offset is determined by
      the IntSubsetStartByteNumber, IntSubsetStartCharNumber,
      IntSubsetStartColumn, and IntSubsetStartLine
      properties of the owner document's DoctypeDecl node.

      Applications may use the OnResolveResource event 
      of the associated TDomImplementation component to 
      redirect reference resolution to external resources.
      
      After calling BuildDtdModel, the PreparationStatus 
      property of the associated DTD object model holds 
      information about whether and to what extent the DTD 
      model had been successfully built.

      Hint: If the function does not accept your stream and 
      reports an invalid character, this is in most cases 
      caused by a missing or false text declaration at the 
      beginning of an external entity.  Note that you may 
      only skip a text declaration if the external entity is
      encoded in the default UTF-8 or UTF-16 encoding.  For 
      all other encodings, e.g. those from the ISO-8859-x 
      family, a text declaration is required, for example:
         &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
      when you use the Latin1 character set.

      Parameters:
      - ResolveExtEntities
         Indicates how external parameter entities and the
         external subset of the DTD should be treated when
         building a DTD object model.  
      
         A value of True indicates that an external subset
         should be processed as well as all references to 
         external parameter entities should be resolved and 
         their replacement text be parsed (even if they 
         appear in the internal subset).  This behaviour is
         equivalent to what a validating processor is
         supposed to do.
      
         A value of False indicates that an external subset 
         should not be processed and all references to 
         external parameter entities in the internal subset 
         should either (i) be skipped but subsequent 
         declarations be processed as usual or (ii) be 
         ignored and subsequent declarations not be 
         processed but still be checked for wellformedness 
         (which of the alternatives (i) or (ii) takes place
         depents on the value of the standalone status of 
         the document to which the document type declaration
         belongs).  This behaviour is equivalent to what a 
         non-validating processor is supposed to do.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ValidateDocument(const Opt: TDomEntityResolveOption): Boolean; virtual;
    <literallayout>
      Validates the owner document according to the DTD
      contained in a TDomDocumentTypeDecl child node.

      Each fatal error, error or warning encountered is
      reported via the OnError event of the corresponding
      DomImplementation component.  This might occur more
      than once, if more than one fatal error, error or
      warning is encountered.  Location information in
      error reports depends on the associated 
      TDomDocumentTypeDecl node's IntSubsetStartByteNumber, 
      IntSubsetStartCharNumber, IntSubsetStartColumn, and 
      IntSubsetStartLine properties.

      When validating an internal list of ID attributes 
      is updated which is used by the document's 
      GetElementById function.  However, this fails, if 
      the document is not valid; in that case, the IDs 
      list is empty.

      Validating a document also resolves its entity
      references.  The Opt parameter controls whether the
      entity references found are replaced or expanded (see
      below).  If the owner document is invalid, validating 
      it may lead to a document tree with incompletely 
      resolved entities.

      Parameters:
      - Opt
         If Opt is erReplace, then all TDomEntityReference
         found in the document are recursively being replaced
         by nodes or node trees according to its entity's
         declaration. Attribute values are normalized and 
         modified as follows:  All ampersands (&amp;) are 
         replaced with &amp;amp;, all open angle brackets (&lt;) with 
         &amp;lt;, all quotation mark characters with &amp;quot;, and 
         the whitespace characters #x9, #xA, and #xD, with 
         character references. The character references are 
         written in uppercase hexadecimal with no leading zeroes 
         (for example, #xD is represented by the character 
         reference &amp;#xD;).

         If Opt is erExpand, then to each TDomEntityReference
         node found in the document a subtree of nodes is added
         according to its entity's declaration.  The subtree
         itself will not contain any TDomEntityReference.
         Instead every entity reference _inside_ this subtree
         is recursively replaced (not expanded) by nodes or
         node trees according to its entity's declaration.

         Note that a TDomEntityReference cannot be resolved,
         if there exists no corresponding entity declaration for
         this entity reference or for an entity reference in its 
         subtree, or if its corresponding enity is an unparsed 
         entity, or if the literal value of the corresponding 
         enity leads to a violation of one of the XML 
         wellformedness or validity constraint in the context 
         of its owner object, e.g. if it contains a (probably 
         indirect) reference to itself.

      Return Value:
         True if the document is valid, False otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>

</sect1>


<sect1>
<title>DTD Model Classes</title>

<para>Document validation via the TDomDocument.ValidationAgent.ValidateDocument function is based on non namespace-aware DTD modelling classes decsribed in this section.</para>

<sect2>
<title>TDtdModel = class</title>

  <para>A TDtdModel object contains a collection of declaration of a DTD.  It does not represent every aspect of a DTD.  For example it unites different attribute list declarations for the same element type in a single object.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AttDeclCollections: TDtdNamedObjectMap (readonly)
    <literallayout>
      A list of all created TDtdAttDeclCollection objects.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ElementDecls: TDtdNamedObjectMap (readonly)
    <literallayout>
      A list of all created TDtdElementDecl objects.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EntityDecls: TDtdNamedObjectMap (readonly)
    <literallayout>
      A list of all created TDtdEntityDecl objects.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ExtSubsetSysId: WideString 
    <literallayout>
      The URI reference of the external subset of the
      represented DTD, of an empty WideString if unkown.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IntSubsetSysId: WideString 
    <literallayout>
      The URI reference of the internal subset of the
      represented DTD, of an empty WideString if unkown.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NotationDecls: TDtdNamedObjectMap (readonly)
    <literallayout>
      A list of all owned TDtdNotationDecl objects.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PEsInIntSubset: Boolean
    <literallayout>
      Indicates whether the DTD contains parameter entity
      references in the internal subset.

      The default value is False.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PreparationStatus: TDomPreparationStatus 
    <literallayout>
      Indicates the preparation status of the DTD model. 
      The values have the following meaning:
      
      PS_UNPREPARED:         
        The DTD model has not yet been built.
      PS_INCOMPLETE: 
        The DTD is currently been built and no decision
        about a more specific status had been made.  (In
        other words: Building .)
      PS_INCOMPLETE_STANDALONE: 
        The DTD model is incomplete as the result of
        building it with a non-validating processor which
        skipped references to external parameter entities 
        and/or an external subset.  All declarations in
        the internal subset have been processed.
      PS_INCOMPLETE_NOT_STANDALONE:
        The DTD model is incomplete as the result of
        building it with a non-validating processor which
        skipped references to external parameter entities 
        and/or an external subset.  No declarations in
        the internal subset after the first reference to an
        external parameter reference have been processed.
      PS_INCOMPLETE_ABORTED:
        The DTD model is incomplete, because an error or 
        fatal error was encountered during preparation.
      PS_INT_SUBSET_COMPLETED:
        The internal subset of the DTD, if any, has 
        completely been processed without any error or 
        fatal error encountered.  No attempt had been made 
        to process an external subset, if any or not.
      PS_COMPLETED: 
        The DTD model has completely been built without 
        any error or fatal error encountered.
      PS_INEXISTANT: 
        The DTD model was not built, because no DTD had
        been defined.

      The default value is PS_UNPREPARED.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create;
    <literallayout>
      Creates a new instance of a TDtdModel object and sets
      declarations for predefined entities.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Clear; virtual; 
    <literallayout>
      Frees all TDtdObject instances owned by the TDtdModel
      object and resets declarations for predefined entities.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function FindAttDeclCollection(const Name: WideString): TDtdAttDeclCollection; virtual;
    <literallayout>
      Retrieves a TDtdAttDeclCollection object from
      the list of attribut declaration collections.

      Parameters:
      - Name
         The name of the TDtdAttDeclCollection object
         to retrieve.

      Return Value:
         A TDtdAttDeclCollection object with the
         specified parameters or nil if the name
         does not identify any TDtdAttDeclCollection
         object in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function FindAttributeDecl(const ElementName,
                                     AttributeName: WideString): TDtdAttributeDecl; virtual;
    <literallayout>
      Retrieves a TDtdAttributeDecl object in the scope
      of an associated TDtdElementDecl object.

      Parameters:
      - ElementName
         The name of the associated TDtdElementDecl.
      - AttributeName
         The name of the TDtdAttributeDecl to retrieve.

      Return Value:
         A TDtdAttributeDecl object with the specified
         parameters or nil if it does not identify any
         TDtdAttributeDecl object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function FindElementDecl(const Name: WideString): TDtdElementDecl; virtual;
    <literallayout>
      Retrieves a TDtdElementDecl object from
      the list of elements.

      Parameters:
      - Name
         The name of the TDtdElementDecl to retrieve.

      Return Value:
         A TDtdElementDecl object with the
         specified parameters or nil if it does not identify
         any TDtdElementDecl object in the map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function FindEntityDecl(const Name: WideString): TDtdEntityDecl; virtual;
    <literallayout>
      Retrieves a TDtdEntityDecl object from
      the list of elements.

      Parameters:
      - Name
         The name of the TDtdEntityDecl to retrieve.

      Return Value:
         A TDtdEntityDecl object with the
         specified name or nil if it does not identify
         any TDtdEntityDecl object in the map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function FindNotationDecl(const Name: WideString): TDtdNotationDecl; virtual;
    <literallayout>
      Retrieves a TDtdNotationDecl object from
      the list of elements.

      Parameters:
      - Name
         The name of the TDtdNotationDecl to
         retrieve.

      Return Value:
         A TDtdNotationDecl object with the
         specified parameters or nil if it does
         not identify any TDtdNotationDecl object
         in the map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveAttDeclCollection(const Name: WideString): Boolean; virtual;
    <literallayout>
      Removes a TDtdAttDeclCollection object from the
      list of attribute declaration collections and frees it.

      Parameters:
      - Name
         The name of the TDtdAttDeclCollection to remove.

      Return Value:
         'True' if a TDtdAttDeclCollection object was
         removed and freed from the list of attribute
         declaration collections, 'False' if no such
         TDtdAttDeclCollection object was found.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveAttributeDecl(const ElementName,
                                       AttributeName: WideString): Boolean; virtual;
    <literallayout>
      Removes a TDtdAttributeDecl object from the 
      DTD model.

      Parameters:
      - ElementName
         The element name of the TDtdAttributeDecl 
         object to be reomved.
      - AttributeName
         The attribute name of the TDtdAttributeDecl 
         object to be reomved.

      Return Value:
         'True' if a TDtdAttributeDecl object was
         removed and freed from the list of attribute
         declaration collections, 'False' if no such
         TDtdAttributeDecl object was found.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveElementDecl(const Name: WideString): Boolean; virtual;
    <literallayout>
      Removes a TDtdElementDecl object from
      the list of elements and frees it.

      Parameters:
      - Name
         The name of the TDtdElementDecl object to 
         remove.

      Return Value:
         'True' if a TDtdElementDecl object was
         removed and freed from the list of
         element declarations, 'False' if no such
         TDtdElementDecl object was found.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveEntityDecl(const Name: WideString): Boolean; virtual;
    <literallayout>
      Removes a TDtdEntityDecl object from the list
      of elements and frees it.  Predefined declarations
      cannot be removed.

      Parameters:
      - Name
         The name of the TDtdEntityDecl to remove.

      Return Value:
         'True' if a TDtdEntityDecl object was
         removed and freed from the list of
         entity declarations, 'False' if no such
         TDtdEntityDecl object was found.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveNotationDecl(const Name: WideString): Boolean; virtual;
    <literallayout>
      Removes a TDtdNotationDecl object from
      the list of elements and frees it.

      Parameters:
      - Name
         The name of the TDtdNotationDecl to remove.

      Return Value:
         'True' if a TDtdNotationDecl object was
         removed and freed from the list of
         notation declarations, 'False' if no such
         TDtdNotationDecl object was found.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function SetAttributeDecl(const ElementName,
                                    AttrName,
                                    AttrValue: WideString;
                              const Enumeration: TUtilsWideStringList;
                              const AttrType: TXmlDataType;
                              const ConstraintType: TDomAttrValueConstraint;
                              const Origin: TDtdOrigin;
                                out AttributeDecl: TDtdAttributeDecl): Boolean; virtual;
    <literallayout>
      Creates and adds a TDtdAttributeDecl object to
      the list of attribute declarations unless an
      declaration for the same pair of element and 
      attribute names already exists.

      Parameters:
      - ElementName
         The element type of the attribute declaration to
         be represented by the new TDtdAttributeDecl 
         object. 
      - AttrName
         The attribute name of the attribute declaration to
         be represented by the new TDtdAttributeDecl 
         object. 
      - AttrValue
         The default or fixed literal value of the 
         TDtdAttributeDecl object to create and add, 
         or an empty WideString if there is none.
      - Enumeration
         The enumeration or notation content of the 
         TDtdAttributeDecl to create and add, if any.
      - AttrType
         The data type of the TDtdAttributeDecl object
         to create and add.
      - ConstraintType
         The constaint type of the TDtdAttributeDecl 
         object to create and add, if any.
      - Origin
         DTD_EXTERNALLY_DECLARED, if the declaration 
         appears in the external subset of a DTD or in
         a parameter entity (external or internal, the 
         latter being included because non-validating 
         processors are not required to read them); 
         DTD_INTERNALLY_DECLARED otherwise.

      Out Parameters:
      - AttributeDecl
         The newly created TDtdAttributeDecl object
         or the old TDtdAttributeDecl object if a
         declaration of the specified name is already
         there.

      Return Value:
         'True' if a new TDtdAttributeDecl object was
         created and added to the list of attribute
         declarations, 'False' if no new TDtdAttributeDecl
         object was added, because a declaration of the same
         name already exists.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function SetElementDecl(const Name: WideString;
                            const ContentType: TDtdContentType;
                            const Origin: TDtdOrigin;
                              out ElementDecl: TDtdElementDecl): Boolean; virtual;
    <literallayout>
      Creates and adds a TDtdElementDecl object
      to the list of element declarations unless an
      declaration for the same element name already
      exists.

      Parameters:
      - Name
         The name of the TDtdElementDecl to
         create and add.
      - ContentType
         The content type of the element declaration.
         One of DTD_ANY_CONTENTTYPE, DTD_EMPTY_CONTENTTYPE,
         DTD_ELEMENT_CONTENTTYPE, DTD_MIXED_CONTENTTYPE,
         DTD_STRICT_MIXED_CONTENTTYPE.
      - Origin
         DTD_EXTERNALLY_DECLARED, if the declaration 
         appears in the external subset of a DTD or in
         a parameter entity (external or internal, the 
         latter being included because non-validating 
         processors are not required to read them); 
         DTD_INTERNALLY_DECLARED otherwise.

      Out Parameters:
      - ElementDecl
         The newly created TDtdElementDecl object
         or the old TDtdElementDecl object if a
         declaration of the specified name is already
         there.

      Return Value:
         'True' if a new TDtdElementDecl object was
         created and added to the list of element
         declarations, 'False' if no new TDtdElementDecl
         was added, because a declaration of the same
         name is already there.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function SetEntityDecl(const Name,
                                 ReplacementText,
                                 PublicId,
                                 SystemId,
                                 NotationName,
                                 BaseUri: WideString;
                           const Origin: TDtdOrigin;
                             out EntityDecl: TDtdEntityDecl): Boolean; virtual;
    <literallayout>
      Creates and adds a TDtdEntityDecl object to
      the list of entity declarations unless an
      declaration for the same entity name is already
      there.

      Parameters:
      - Name
         The name of the represented entity declaration to
         create and add.
      - ReplacementText
         The replacement text of the TDtdEntityDecl
         to create and add if the entity is an internal
         parsed entity.  

         Note that in case of an internal entity "the 
         replacement text is the content of the entity 
         after replacement of character references and 
         parameter-entity references" ([XML 1.0], sec. 
         4.5.)

         The 'replacementText' parameter is being
         ignored if 'publicId', 'systemId' or
         'notationName' is not an empty WideString,
         thus indicating an external entity (parsed or
         unparsed).  

         Hint: To initialize the replacement text of 
         an external parsed entity call the Resolve
         method of the new TDtdEntityDecl object.

      - publicId
         The public ID of the TDtdEntityDecl to
         create and add, or an empty WideString if
         the entity is internal.
      - SystemId
         The system ID of the TDtdEntityDecl to
         create and add, or an empty WideString if
         the entity is internal.
      - NotationName
         The notation name of the TDtdEntityDecl to
         create and add, or an empty WideString if
         the entity is a parsed entity.
      - BaseUri
         The base URI of the entity declaration, i.e.
         the URI of the entity containing the '&lt;' 
         which starts the declaration, at the point 
         when it is parsed as a declaration.
      - Origin
         DTD_EXTERNALLY_DECLARED, if the declaration 
         appears in the external subset of a DTD or in
         a parameter entity (external or internal, the 
         latter being included because non-validating 
         processors are not required to read them). 
         DTD_INTERNALLY_DECLARED otherwise.
         The value DTD_PREDEFINED is not supported and
         raises a ENot_Supported_Err exception.

      Out Parameters:
      - EntityDecl
         The newly created TDtdEntityDecl object or
         the old TDtdEntityDecl object if a
         declaration of the specified name is already
         there.

      Return Value:
         'True' if a new TDtdEntityDecl object was
         created and added to the list of entity
         declarations, 'False' if no new TDtdEntityDecl
         was added, because a declaration of the same
         name is already there.

      Exceptions:
      - ENot_Supported_Err
         Raised if Origin is DTD_PREDEFINED.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function SetNotationDecl(const Name,
                                   PublicId,
                                   SystemId: WideString;
                             const Origin: TDtdOrigin;
                               out NotationDecl: TDtdNotationDecl): Boolean; virtual;
    <literallayout>
      Creates and adds a TDtdNotationDecl object
      to the list of notation declarations unless
      a declaration for the same notation name is
      already there.

      Parameters:
      - Name
         The name of the TDtdNotationDecl object to
         create and add.
      - PublicId
         The public identifier of the TDtdNotationDecl
         object to create and add.
      - SystemId
         The system identifier of the TDtdNotationDecl
         object to create and add.
      - Origin
         DTD_EXTERNALLY_DECLARED, if the declaration 
         appears in the external subset of a DTD or in
         a parameter entity (external or internal, the 
         latter being included because non-validating 
         processors are not required to read them); 
         DTD_INTERNALLY_DECLARED otherwise.

      Out Parameters:
      - NotationDecl
         The newly created TDtdNotationDecl object
         or the old TDtdNotationDecl object if a
         declaration of the specified name is already
         there.

      Return Value:
         'True' if a new TDtdNotationDecl object
         was created and added to the list of
         notation declarations, 'False' if no new
         TDtdNotationDecl was added, because a
         declaration of the same name is already
         there.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
</sect2>


<sect2>
<title>TDtdObject = class</title>

  <para>The TDtdObject class is the primary datatype for a non namespace-aware DTD Model from which the individual object classes used in the document model tree are derived.  It must not be directly used in an application.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Key: Int64 (readonly) 
    <literallayout>
      Returns the number which uniquely identifies
      a TDtdObject instance in the context of
      the owner agent of its owner model.  
      TDtdObject instances created later have 
      higher Key values.  Thus, the Key property may 
      be used to determine the relative creation 
      order of TDtdObject instances of the same 
      owner agent.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Name: WideString (readonly) 
    <literallayout>
      The name of type Name of this declaration
      as defined in [XML 1.0], if any.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ObjectType: TDtdObjectType (readonly) 
    <literallayout>
      The type of this object as defined in the
      TDtdObjectType class.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerModel: TDtdModel (readonly) 
    <literallayout>
      The TDtdModel object associated with this
      TDtdObject instance.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TDtdModel;
                       const AName: WideString);
    <literallayout>
      Calling Create constructs and initializes an
      instance of TDtdObject. However, applications
      should never attempt to instantiate a 
      TDtdObject.  This class is intended solely as
      a common base class from which other Abstract 
      Schema Model classes derive. 

      Parameters:
      - AOwner
         The TDtdModel that ownes the
         TDtdObject instance.
      - AName
         The name of type Name of this declaration
         as defined in [XML 1.0], if any.
      
      Exceptions:
      - EAccessViolation
         Raised if no owner TDtdModel object
         was specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>


<sect2>
<title>TDtdAttDeclCollection = class( TDtdObject)</title>

  <para>Represents a collection of non namespace-aware attribute declarations for the same element type.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AttributeDecls: TDtdNamedObjectMap (readonly)
    <literallayout>
      A list of all attached TDtdAttributeDecl objects.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure Clear; virtual; abstract;
    <literallayout>
      Frees all TDtdAttributeDecl objects that 
      belong to this TDtdAttDeclCollection object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function FindAttributeDecl(const Name: WideString): TDtdAttributeDecl; virtual;
    <literallayout>
      Retrieves a TDtdAttributeDecl object from
      the list of attribute declarations.

      Parameters:
      - name
         The name of the attribute declaration to
         retrieve.

      Return Value:
         A TDtdAttributeDecl object with the
         specified parameters or 'nil' if the specified
         name does not identify any TDtdAttributeDecl 
         object in the map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveAttributeDecl(const Name: WideString): Boolean; virtual;
    <literallayout>
      Removes a TDtdAttributeDecl object from the
      list of attribute declarations and frees it.

      Parameters:
      - name
         The name of the TDtdAttributeDecl object
         to remove.

      Return Value:
         'True' if a TDtdAttributeDecl object was
         removed and freed from the list of
         attribute declarations, 'False' if no such
         TDtdAttributeDecl object was found.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function SetAttributeDecl(const AAttrName,
                                    AAttrValue: WideString;
                              const AEnumeration: TUtilsWideStringList;
                              const AAttrType: TXmlDataType;
                              const AConstraintType: TDomAttrValueConstraint;
                              const AOrigin: TDtdOrigin;
                                out AttributeDecl: TDtdAttributeDecl): Boolean; virtual;
    <literallayout>
      Creates and adds a TDtdAttributeDecl object to
      the list of attribute declarations unless an
      declaration for the same attribute name already
      exists.

      Parameters:
      - AAttrName
         The name of the TDtdAttributeDecl object to
         create and add.
      - AAttrValue
         The default or fixed literal value of the 
         TDtdAttributeDecl object to create and add, 
         or an empty WideString if there is none.
      - AEnumeration
         The enumeration or notation content of the 
         TDtdAttributeDecl to create and add, if any.
      - AAttrType
         The data type of the TDtdAttributeDecl object
         to create and add.
      - AConstraintType
         The constaint type of the TDtdAttributeDecl 
         object to create and add, if any.
      - AOrigin
         DTD_EXTERNALLY_DECLARED, if the declaration 
         appears in the external subset of a DTD or in
         a parameter entity (external or internal, the 
         latter being included because non-validating 
         processors are not required to read them); 
         DTD_INTERNALLY_DECLARED otherwise.

      Out Parameters:
      - AttributeDecl
         The newly created TDtdAttributeDecl object
         or the old TDtdAttributeDecl object if a
         declaration of the specified name is already
         there.

      Return Value:
         'True' if a new TDtdAttributeDecl object was
         created and added to the list of attribute
         declarations, 'False' if no new TDtdAttributeDecl
         object was added, because a declaration of the same
         name already exists.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>


<sect2>
<title>TDtdAttributeDecl = class( TDtdObject)</title>

  <para>Represents a non namespace-aware attribute declaration.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AttrType: TXmlDataType (readonly)
    <literallayout>
      The datatype of the attribute.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ConstraintType: TDomAttrValueConstraint (readonly)
    <literallayout>
      The Constraint type if any for this attribute.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DefaultValue: WideString (readonly)
    <literallayout>
      Default or fixed literal value or an empty
      WideString if there is none.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Enumeration: TUtilsWideStringList (readonly)
    <literallayout>
      A TUtilsWideStringList object of valid attribute
      values.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Origin: TDtdOrigin (readonly) 
    <literallayout>
      Returns DTD_EXTERNALLY_DECLARED, if the 
      declaration appears in the external subset of
      a DTD or in a parameter entity (external or 
      internal, the latter being included because 
      non-validating processors are not required to 
      read them); otherwise DTD_INTERNALLY_DECLARED 
      is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerCollection: TDtdAttDeclCollection (readonly)
    <literallayout>
      The TDtdAttDeclCollection object that owns this
      TDtdAttributeDecl object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>


<sect2>
<title>TDtdContentModel = class( TDtdObject)</title>

  <para> TDtdContentModel represents a part of a non namespace-aware DTD Model of a TDtdElementDecl object.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ContentModelType: TDtdContentModelType (readonly)
    <literallayout>
      Indicates the type of the submodel.  This is one of 
      DTD_CHOICE_CM, DTD_ELEMENT_CM or DTD_SEQUENCE_CM.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Frequence: TDtdFrequency
    <literallayout>
      Determines whether XML elements correspond to
      this content model must appear exactly once
      (DTD_REQUIRED_FRQ), may appear zero or one times
      (DTD_OPTIONAL_FRQ), may appear one or more times
      (DTD_ONE_OR_MORE_FRQ), or may appear zero or more
      times (DTD_ZERO_OR_MORE_FRQ).  The default value
      is DTD_REQUIRED_FRQ.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerElementDecl: TDtdElementDecl (readonly)
    <literallayout>
      The TDtdElementDecl object associated with
      this TDtdContentModel.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SubModels: TDtdObjectList (readonly)
    <literallayout>
      Holds additional submodels in which the
      element can be defined.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function AppendSubModel(const newCM: TDtdContentModel): TDtdContentModel; virtual;
    <literallayout>
      Appends a new TDtdContentModel object to
      the end of the list representing the
      subModels.

      Parameters:
      - newCM
         The new TDtdContentModel object to be
         appended.

      Return Values:
         The TDtdContentModel object appended.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function InsertBeforeSubModel(const newCM,
                                        refCM: TDtdContentModel): TDtdContentModel; virtual;
    <literallayout>
      Appends a new TDtdContentModel to the end
      of the list representing the subModels.

      Parameters:
      - newCM
         The TDtdContentModel object to insert.
      - refCM
         The reference TDtdContentModel object,
         i.e., the TDtdContentModel object before
         which the new TDtdContentModel object
         must be inserted.

      Return Value:
         The TDtdContentModel object being inserted.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function RemoveSubModel(const oldCM: TDtdContentModel): TDtdContentModel; virtual;
    <literallayout>
      Removes a TDtdContentModel object from
      the list and returns it.

      Parameters:
      - oldCM
         The TDtdContentModel object being
         removed.

      Return Value:
         The TDtdContentModel object removed.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>


<sect2>
<title>TDtdElementDecl = class( TDtdObject)</title>

  <para>Represents a non namespace-aware element declaration.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ContentModel: TDtdContentModel (readonly)
    <literallayout>
      The content model of the element declaration.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ContentType: TDtdContentType (readonly)
    <literallayout>
      The content type of the element.  One of
      DTD_ANY_CONTENTTYPE, DTD_EMPTY_CONTENTTYPE,
      DTD_ELEMENT_CONTENTTYPE, DTD_MIXED_CONTENTTYPE,
      DTD_STRICT_MIXED_CONTENTTYPE.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CreatedContentModels: TDtdObjectList (readonly)
    <literallayout>
      A list of all created TDtdContentModel
      objects.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Origin: TDtdOrigin (readonly) 
    <literallayout>
      Returns DTD_EXTERNALLY_DECLARED, if the 
      declaration appears in the external subset of
      a DTD or in a parameter entity (external or 
      internal, the latter being included because 
      non-validating processors are not required to 
      read them); otherwise DTD_INTERNALLY_DECLARED 
      is returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure Clear; virtual; abstract;
    <literallayout>
      Frees all TDtdAttributeDecl and
      TDtdContentModel objects that belong
      to this TDtdElementDecl object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateContentModel(const name: WideString;
                                const contentModelType: TDtdContentModelType): TDtdContentModel; virtual;
    <literallayout>
      Creates a new TDtdContentModel object.

      Parameters:
      - name
         The name of the element type associated with
         an DTD_ELEMENT_CM content model.  For other
         content model types this parameter is being
         ignored.
      - contentModelType
         The type of the TDtdContentModel to
         create.  One of DTD_CHOICE_CM, DTD_ELEMENT_CM,
         or DTD_SEQUENCE_CM.  
         
      Return Value:
         The newly created TDtdContentModel
         object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure FreeAndNilContentModel(var cm: TDtdContentModel); virtual;
    <literallayout>
      Frees the specified TDtdContentModel object
      and replaces the reference with nil.

      Var Parameters:
      - cm
         The TDtdContentModel to be freed. The
         reference is replaces with nil.

      Exceptions:
      - EInuse_Err
         Raised if cm is in use somewhere.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ReplaceContentModel(const newContentModel: TDtdContentModel): TDtdContentModel; virtual;
    <literallayout>
      Replaces the current associated content model
      with a new one.  If the content type of the
      element declaration is DTD_ANY_CONTENTTYPE or
      DTD_EMPTY_CONTENTTYPE, then the element 
      declaration needs no content model and trying 
      to use the ReplaceContentModel function will 
      raise an ENot_Supported_Err (unless the 
      'newContentModel' parameter is nil).  If the 
      content type of the element declaration is 
      DTD_ELEMENT_CONTENTTYPE, DTD_MIXED_CONTENTTYPE
      or DTD_STRICT_MIXED_CONTENTTYPE the new content
      model must be of content model type 
      DTD_CHOICE_CM or DTD_SEQUENCE_CM.

      Parameters:
      - newContentModel
         The new TDtdContentModel object to be
         associated or nil to associate no content
         model.

      Return Value:
         The TDtdContentModel object removed or
         nil, if non was associated before.

      Exceptions:
      - ENot_Supported_Err
         Raised if the content model type of the
         new content model is not supported by this
         element declaration or if NewContentModel 
         was created from a different TDtdElementDecl 
         object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>


<sect2>
<title>TDtdEntityDecl = class( TDtdObject)</title>

  <para>Represents a non namespace-aware entity declaration, either internal or external, parsed or unparsed.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property BaseUri: WideString (readonly)
    <literallayout>
      The base URI of the entity declaration, i.e.
      the URI of the entity containing the '&lt;' 
      which starts the declaration, at the point 
      when it is parsed as a declaration.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EntityRefs: TUtilsWideStringList (readonly)
    <literallayout>
      A list of the names of entity references in the
      replacement text of this entity.  If the replacement
      text of this entity is unkown, this list is empty.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EntityType: TDtdEntityType (readonly)
    <literallayout>
      DTD_INTERNAL_ENTITY if the entity is an internal entity;
      DTD_EXTERNAL_ENTITY if the entity is an external entity.
      DTD_PREDEFINED_ENTITY if the entity is a predefined entity.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsParsedEntity: Boolean (readonly)
    <literallayout>
      'True' if the entity is a parsed entity,
      otherwise 'False'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NotationName: WideString (readonly)
    <literallayout>
      For unparsed entities, the name of the
      notation declaration for the entity. For
      parsed entities,  an empty WideString is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Origin: TDtdOrigin (readonly) 
    <literallayout>
      Returns DTD_EXTERNALLY_DECLARED, if the 
      declaration appears in the external subset of
      a DTD or in a parameter entity (external or 
      internal, the latter being included because 
      non-validating processors are not required to 
      read them); otherwise DTD_INTERNALLY_DECLARED 
      is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier associated with the
      entity, if specified. If the public identifier
      was not specified, an empty WideString is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ReplacementText: WideString (readonly)
    <literallayout>
      Returns the replacement text of the entity.

      In case of an unparsed entity (if IsParsedEntity 
      returns 'False') or an external parsed entity 
      whose value could not be retrieved (i.e. calling 
      the Resolve function returned 'False'), the 
      ReplacementText property returns an empty 
      WideString.
         
      Note that the replacement text of an entity is
      determined as follows: "For an internal entity, 
      the replacement text is the content of the 
      entity after replacement of character references 
      and parameter-entity references. For an external 
      entity, the replacement text is the content of 
      the entity, after stripping the text declaration 
      (leaving any surrounding whitespace) if there is 
      one but without any replacement of character 
      references or parameter-entity references." 
      ([XML 1.0], sec. 4.5.)
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly)
    <literallayout>
      The system identifier associated with the
      entity, if specified. If the system identifier
      was not specified, an empty WideString is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsResolved: Boolean (readonly)
    <literallayout>
      Returns False if the entity is an external entity
      and its replacement text has not been successfully
      resolved.  Otherwise True is returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function CheckNoRecursion: Boolean; virtual;
    <literallayout>
      Checks whether the entity or any of its 
      direct or indirect entity references contains 
      a recursive reference to itself, either 
      directly or indirectly.  Unresolved entities 
      are skipped.

      Return Value:
         True, if no recursive reference had been
         detected; False otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ResolveReplacementText(const ResolveEntityFunc: TDomResolveEntityProc): TXmlErrorType; virtual;
    <literallayout>
      Tries to resolve the value of an external
      parsed entity.

      Parameters:
      - ResolveEntityFunc
         The callback function that should be used 
         by the Resolve function to retrieve the 
         replacement text of the entity.

      Return Value:
         Returns the type of error, if any, that 
         occurred during the attempt to resolve a
         replacement text.  If no error occurred
         ET_NONE is returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>


<sect2>
<title>TDtdNotationDecl = class( TDtdObject)</title>

  <para>Represents a non namespace-aware notation declaration.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Origin: TDtdOrigin (readonly) 
    <literallayout>
      Returns DTD_EXTERNALLY_DECLARED, if the 
      declaration appears in the external subset of
      a DTD or in a parameter entity (external or 
      internal, the latter being included because 
      non-validating processors are not required to 
      read them); otherwise DTD_INTERNALLY_DECLARED 
      is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier associated with the
      entity, if specified. If the public identifier
      was not specified, this is an empty WideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly)
    <literallayout>
      The system identifier associated with the
      entity, if specified. If the system identifier
      was not specified, this is an empty WideString.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect2>

</sect1>

</chapter>



<chapter>
<title>Document Object Model Views</title>

<para>A document may have one or more "views" associated with it, e.g., a computed view on a document after applying a CSS stylesheet, or multiple presentations (e.g., HTML Frame) of the same document in a client. That is, a view is some alternate representation of, or a presentation of, and associated with, a source document. A view may be static, reflecting the state of the document when the view was created, or dynamic, reflecting changes in the target document as they occur, subsequent to the view being created.</para>

<para>XDOM defines a TDomAbstractView class which provides a base class from which all such views shall derive. It defines an attribute which references the target document of the TDomAbstractView. The only semantics of the TDomAbstractView defined here create an association between a view and its target document.</para>

<para>Future versions of XDOM might use TDomAbstractView to derive special view classes</para>

  <sect1>
  <title>TDomAbstractView = class</title>

  <para>A base class that all views shall derive from.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Document: TDomCustomDocument (readonly)
    <literallayout>
      The source TDomCustomDocument of which this is an
      AbstractView.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>
</chapter>


<chapter>
<title>Parsing and Serializing XML (+)</title>

<sect1>
<title>Introduction</title>

<sect2>
<title>Design goals</title>

<para>Writing an XML parser is always a compromise between competing requirements which can be divided into three basic groups: user goals, developer goals and implementer goals.</para>

<para>Users of an application which needs to parse XML data expect the parser to be reliable, fast, and efficient. For developers, who want to integrate the parser in their applications, it is important that the design is flexible enough to adapt to a wide variety of use cases. And for the implementer of a parser it should be easy to maintain the source code, while the reusability of code pieces should be maximized.</para>

<para>In order to achive a large degree of maintainability, reusability, and flexibility the design of XDOM's parser classes is highly object oriented.  Though XDOM provides the user with some simple, ready-to-use parser components like TXmlToDomParser, TDtdToDtdModelParser, and TDomToXmlParser, these components are internally built out of several fundamental XML processor components. All communication between the fundamental components is performed by passing single XML Signal objects, each representing a small pieces of XML data.</para>

</sect2>

<sect2>
<title>Conformance</title>

<para>XDOM's XML parser components may be used to build a fully conforming validating XML processor according to the [XML 1.0] specification.  This validating XML processor was check against the XML test suite published by the W3C and passed all XML 1.0 related tests.</para>

<para>To use XDOM as a validating XML processor an application must use a TXmlToDomParser component which is connected to a TDomImplementation component itself connected to a Resource Resolver (if required).  The KeepCDATASections and KeepComments options of the TXmlToDomParser component must both be set to True.  In a first step the XML document to be validated must be parsed into a document object tree by using any of the TXmlToDomParser component's parsing methods.  Afterward the ValidationAgent.ValidateDocument function of the returned TDomDocument object must be called.</para>

<para>Currently XDOM does not include a conforming non-validating XML processor.  Calling the TXmlToDomParser parsing functions is not equivalent to using a non-validating XML processor, because these functions do not process the DTD of a document and check it for wellformedness.</para>

<para>Note that the XML specification allows slight differences between validating XML processors.  Validating XML processors must report violations of the wellformedness and validation constraints, but they are not required to report errors which are not rated as wellformedness or validation constraints.  The results of violating such rules are undefined.  In such cases the result of validating an XML document with XDOM may differ from the result of other validators.  In particular, XDOM does not check the value of an 'xml:space' attribute, it does not test whether system literals are not URI fragments, accepts non-deterministic content models as long as their non-determinsm does not effect the validation of a particular document, and accepts a reference to an unparsed entity in an entity value (unless the entity is referenced, of course).</para>

</sect2>

</sect1>

<sect1>
<title>Helper Functions</title>

  <para>
  <itemizedlist>

    <listitem>
    <para>
function XmlReplaceQuotes(const source: WideString): WideString;
    </para>
    </listitem>

    <listitem>
    <para>
procedure XmlTruncRoundBrackets(   source: WideString;
                                var content: WideString;
                                out error: Boolean);
    </para>
    </listitem>

  </itemizedlist>
  </para>
</sect1>


<sect1>
<title>Typed Constants</title>
  <para>
  <itemizedlist>

    <listitem>
    <para>
  TDomPieceType = ( xmlProcessingInstruction,
                    xmlComment,
                    xmlCDATA,
                    xmlPCDATA,
                    xmlDoctype,
                    xmlStartTag,
                    xmlEndTag,
                    xmlEmptyElementTag,
                    xmlCharRef,
                    xmlEntityRef,
                    xmlAttribute,
                    xmlParameterEntityRef,
                    xmlEntityDecl,
                    xmlElementDecl,
                    xmlAttributeDecl,
                    xmlNotationDecl,
                    xmlCondSection,
                    xmlParameterEntityDecl,
                    xmlXmlDeclaration,
                    xmlTextDeclaration,
                    xmlUnknown );
    </para>
    </listitem>

    <listitem>
    <para>
  TXmlAttrValueTokenType = (
    ATTR_CHAR_REF,
    ATTR_END_OF_SOURCE_TOKEN,
    ATTR_ENTITY_REF,
    ATTR_START_OF_SOURCE_TOKEN,
    ATTR_TEXT
  );
    </para>
    <para>TXmlAttrValueTokenType is used by the TXmlAttrValueTokenizer.TokenType property to indicate the type of an attribute value construct.</para>
    </listitem>

    <listitem>
    <para>
  TXmlDocTokenType = (
    XML_CDATA_TOKEN,
    XML_CHAR_REF_DEC_TOKEN,
    XML_CHAR_REF_HEX_TOKEN,
    XML_COMMENT_TOKEN,
    XML_DOCTYPE_TOKEN,
    XML_EMPTY_ELEMENT_TAG_TOKEN,
    XML_END_OF_SOURCE_TOKEN,
    XML_END_TAG_TOKEN,
    XML_ENTITY_REF_TOKEN,
    XML_PCDATA_TOKEN,
    XML_PI_TOKEN,
    XML_START_OF_SOURCE_TOKEN,
    XML_START_TAG_TOKEN
  );
    </para>
    <para>TXmlDocTokenType is used by the TXmlDocTokenizer.TokenType property to indicate the type of an XML construct.</para>
    </listitem>

    <listitem>
    <para>
  TXmlDoctypeDeclTokenType = (
    DOCTYPE_END_OF_SOURCE_TOKEN,
    DOCTYPE_INTSUBSET_TOKEN,
    DOCTYPE_NAME_TOKEN,
    DOCTYPE_PUBID_TOKEN,
    DOCTYPE_START_OF_SOURCE_TOKEN,
    DOCTYPE_SYSID_TOKEN
  );
    </para>
    <para>TXmlDoctypeDeclTokenType is used by the TXmlDoctypeDeclTokenizer.TokenType property to indicate the type of a Document Type Declaration construct.</para>
    </listitem>

    <listitem>
    <para>
  TXmlDtdDetailTokenType = (
    DTD_DETAIL_ATTLIST_DECL_START_TOKEN,
    DTD_DETAIL_COMMENT_TOKEN,
    DTD_DETAIL_COND_SECT_END_TOKEN,
    DTD_DETAIL_COND_SECT_OPENER_TOKEN,
    DTD_DETAIL_COND_SECT_START_TOKEN,
    DTD_DETAIL_DECL_END_TOKEN,
    DTD_DETAIL_ELEMENT_DECL_START_TOKEN,
    DTD_DETAIL_END_OF_SOURCE_TOKEN,
    DTD_DETAIL_ENTITY_DECL_START_TOKEN,
    DTD_DETAIL_INVALID_MARKUP_TOKEN,
    DTD_DETAIL_KEYWORD_TOKEN,
    DTD_DETAIL_NOTATION_DECL_START_TOKEN,
    DTD_DETAIL_OPERATOR_TOKEN,
    DTD_DETAIL_PARAMETER_ENTITY_REF_TOKEN,
    DTD_DETAIL_PI_CONTENT_TOKEN,
    DTD_DETAIL_PI_TARGET_TOKEN,
    DTD_DETAIL_QUOTED_STRING_TOKEN,
    DTD_DETAIL_START_OF_SOURCE_TOKEN,
    DTD_DETAIL_UNQUOTED_STRING_TOKEN,
    DTD_DETAIL_WHITESPACE_TOKEN
  );
    </para>
    <para>TXmlDtdDetailTokenType is used by the TXmlDtdDetailTokenizer.TokenType property to indicate the type of a DTD construct.</para>
    </listitem>

    <listitem>
    <para>
  TXmlDtdAbstractTokenType = (
    DTD_ABSTRACT_ATTLIST_DECL_TOKEN,
    DTD_ABSTRACT_COMMENT_TOKEN,
    DTD_ABSTRACT_CONDITIONAL_SECTION_TOKEN,
    DTD_ABSTRACT_ELEMENT_DECL_TOKEN,
    DTD_ABSTRACT_END_OF_SOURCE_TOKEN,
    DTD_ABSTRACT_ENTITY_DECL_TOKEN,
    DTD_ABSTRACT_EXT_PARAMETER_ENTITY_REF_TOKEN,
    DTD_ABSTRACT_IGNORABLE_WHITESPACE_TOKEN,
    DTD_ABSTRACT_INVALID_MARKUP_TOKEN,
    DTD_ABSTRACT_NOTATION_DECL_TOKEN,
    DTD_ABSTRACT_PARAMETER_ENTITY_DECL_TOKEN,
    DTD_ABSTRACT_PI_TOKEN,
    DTD_ABSTRACT_START_OF_SOURCE_TOKEN
  );
    </para>
    <para>TXmlDtdAbstractTokenType is used by the TXmlCustomSubsetTokenizer.TokenType property to indicate the type of a DTD construct.</para>
    </listitem>

    <listitem>
    <para>
  TXmlElementCMTokenType = (
    DTD_ECM_ANY_KEYWORD_TOKEN,
    DTD_ECM_CLOSING_BRACKET_TOKEN,
    DTD_ECM_EMPTY_KEYWORD_TOKEN,
    DTD_ECM_END_OF_SOURCE_TOKEN,
    DTD_ECM_FREQUENCY_TOKEN,
    DTD_ECM_INVALID_MARKUP_TOKEN,
    DTD_ECM_NAME_TOKEN,
    DTD_ECM_OPENING_BRACKET_TOKEN,
    DTD_ECM_PCDATA_KEYWORD_TOKEN,
    DTD_ECM_SEPARATOR_TOKEN,
    DTD_ECM_START_OF_SOURCE_TOKEN
  );
    </para>
    <para>TXmlElementCMTokenType is used by the TXmlElementCMTokenizer.TokenType property to indicate the type of a construct of the content model of an element type declaration in a DTD.</para>
    </listitem>

    <listitem>
    <para>
  TXmlSignalScope = set of (
    ssDoc,
    ssDtd
  );
    </para>
    <para>TXmlSignalScope is used by the TXmlSignal.Scope property to indicate whether an XML Signal represents a piece of DTD or non-DTD data.</para>
    </listitem>

    <listitem>
    <para>
  TXmlActivityStatus = ( 
    asInactive, 
    asDocActive, 
    asDocFragActive,
    asExtDtdActive, 
    asIntDtdActive
  );
    </para>
    <para>TXmlActivityStatus is used by the TXmlWFTestHandler and the TXmlDtdModelBuilder components to track their activity status.</para>
    </listitem>

    <listitem>
    <para>
  TXmlPERefTreatment = ( 
    petResolveInMarkup, 
    petResolveInDeclSep, 
    petResolveInDeclSepSkipExt
  );
    </para>
    <para>TXmlPERefTreatment is used in the TXmlDtdDetailPETokenizer class to indicate how references to external parameter entities are to be treated.</para>
    </listitem>

    <listitem>
    <para>
  TXmlRootProcessingStatus = ( 
    rsBeforeRoot, 
    rsInRoot, 
    rsAfterRoot
  );
    </para>
    <para>TXmlRootProcessingStatus is internally used by the TXmlWFTestHandler component to track whether the root element has already been processed.</para>
    </listitem>

    <listitem>
    <para>
  TXmlBOMOpt = ( 
    bomUTF8, 
    bomUTF16,
    bomUCS2
  );
    </para>
    <para>TXmlBOMOpt is used by the TXmlStreamBuilder and TDomToXmlParser components to determine whether or not to use a byte order mark (BOM) when serializing a document tree into an XML file or string, etc.</para>
    </listitem>

    <listitem>
    <para>
  TXmlParserAction = ( ACTION_APPEND_AS_CHILDREN,
                       ACTION_INSERT_AFTER,
                       ACTION_INSERT_BEFORE,
                       ACTION_REPLACE,
                       ACTION_REPLACE_CHILDREN );
  );
    </para>
    <para>A set of possible actions for the TDomToXmlParser.ParseWithContext function.</para>
    </listitem>

  </itemizedlist>
  </para>
</sect1>


<sect1>
<title>Event Classes</title>

  <sect2>
  <title>TDomLocationEvent</title>
    <para>
    <literallayout>
      TDomLocationEvent =
          procedure(Sender: TObject;
                    const Locator: IDomLocator) 
                   of object;
    </literallayout>
    </para>

    <para>Defines an event class which may be used to provide location information during XML document processing.</para>
  </sect2>

  <sect2>
  <title>TXmlProcessingEvent</title>
    <para>
    <literallayout>
      TXmlProcessingEvent =
          procedure(Sender: TObject;
                    Signal: TXmlSignal;
                    var Accept: Boolean) 
                   of object;
    </literallayout>
    </para>

    <para>Defines an event class which may be used to pass a TXmlSignal object to the application.  An application may provide an event handler for the OnSignal event to evaluate or modify the TXmlSignal instance before it is further propagated or to stop its propagation.</para>
  </sect2>

  <sect2>
  <title>TXmlPostProcessingEvent</title>
    <para>
    <literallayout>
      TXmlPostProcessingEvent =
          procedure(Sender: TObject;
                    Signal: TXmlSignal) 
                   of object;
    </literallayout>
    </para>

    <para>Defines an event class which may be used to pass a TXmlSignal object to the application.  An application may provide an event handler for the OnSignal event to evaluate or modify the TXmlSignal instance before it is further propagated.</para>
  </sect2>

  <sect2>
  <title>TDomResolveEntityEvent</title>
    <para>
    <literallayout>
      TDomResolveEntityEvent =
          procedure(Sender: TObject;
                    const EntityName: WideString;
                      var EntityValue,
                          PubId,
                          SysId: WideString;
                      var Error: TXmlErrorType) 
                   of object;
    </literallayout>
    </para>

    <para>Defines an event class which may be used to retrieve the value of an entity or parameter entity.</para>
  </sect2>

  <sect2>
  <title>TDomResolveResourceEvent</title>
    <para>
    <literallayout>
      TDomResolveResourceEvent =
          procedure(      Sender: TObject;
                    const ResourceType,
                          NamespaceURI: WideString;
                      var PublicId,
                          SystemId: WideString;
                      var Stream: TStream;
                      var CertifiedText: Boolean) 
                   of object;
    </literallayout>
    </para>

    <para>Defines the event class which is used for the OnResolveResource event in TStandardResourceResolver.</para>
  </sect2>

  <sect2>
  <title>TDomSerializationEvent</title>
    <para>
    <literallayout>
      TDomSerializationEvent =
          procedure(Sender: TXmlStreamBuilder;
                    PieceType: TDomPieceType;
                    const Locator: IDomLocator) 
                   of object;
    </literallayout>
    </para>

    <para>Defines an event class which may be used to provide information about an XML structure element to be serialized.</para>
  </sect2>

  <sect2>
  <title>TDomWideStringLocationEvent</title>
    <para>
    <literallayout>
      TDomLocationEvent =
          procedure(Sender: TObject;
                    const S: WideString; 
                    const Locator: IDomLocator) 
                   of object;
    </literallayout>
    </para>

    <para>Defines an event class which may be used to provide a WideString together with location information during XML document processing.</para>
  </sect2>

</sect1>


<sect1>
<title>Parser Classes</title>

  <sect2>
  <title>TXmlCustomParser = class (TDomBaseComponent)</title>

  <para>TXmlCustomParser is the ancestor for all XDOM parser components.  It implements a property that can be used to specify an associated TDomImplementation component.  Direct instances of TXmlCustomParser are usually not used in an application.</para>

  <para><emphasis>Published properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation
    <literallayout>
      The TDomImplementation component associated with
      this TXmlCustomParser component.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>


  <sect2>
  <title>TXmlToDomParser = class (TXmlCustomParser)</title>

  <para>This component is a non-validating XML parser (with the exception that entity references are not resolved and thus their content is not checked for wellformedness) which can be placed as a non-visual component on every formular.  Before it can be used a TDomImplementation object must be assigned to its DOMImpl property.  Via linking the Unicode Utilities Library (cUnicodeCodecs.pas) the parser supports more then 70 character encoding schemes.  For details about the supported encodings consult the documentation of the Unicode Utilities Library.</para>

  <para>When parsing an XML source, each fatal error, error or warning encountered is reported via the OnError event of the TDomImplementation component associated with the parser.  OnError events might occur more than once, if more than one fatal error, error or warning is encountered.</para>

  <para><emphasis>Published properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property BufferSize: Integer;
    <literallayout>
      The buffer size for the internal TXmlInputSource
      object.

      The value should be a multiplicity of 1024.  The
      default value is 4096.

      Exceptions on setting:
      - ENot_Supported_Err
         Raised if the specified buffer size is less
         than 1024.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation
    <literallayout>
      (Inherited from TXmlCustomParser.)

      The TDomImplementation object to which the document
      tree will be attached while parsing an XML document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property KeepCDATASections: Boolean
    <literallayout>
      If True, keep TDomCDATASection nodes in the
      document.  If False, transform TDomCDATASection
      nodes in the document into TDomText nodes. The
      new TDomText node is then combined with any
      adjacent TDomText node.

      The default value is True.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property KeepComments: Boolean
    <literallayout>
      If True, keep TDomComment nodes in the document.
      If False, discard TDomComment nodes in the 
      document.

      The default value is True.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property KeepEntityRefs: Boolean
    <literallayout>
      If True, keep TDomEntityReference nodes to
      predefined entities in the document.  If False,
      remove all entity references to predefined
      entities from the document, putting the entity
      expansions directly in their place.

      This option has no effect on entity references
      in attribute values, because they are resolved
      'on the fly' when the value of a TDomAttr node
      is calculated.

      The default value is True.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

  <listitem>
  <para>
    constructor Create(AOwner: TComponent); override;
    <literallayout>
      Creates a new TXmlToDomParser object. Note that
      TXmlToDomParser objects are being created automatically
      when adding them from the component's palette onto a
      form.

      If you derive your own parser class from TXmlToDomParser
      which contain replacements for the original Handlers, 
      Builders and Readers, you must override the protected
      CreateSubcomponents procedure which is called by this
      constructor.

      Parameters:
      - AOwner
         The component that holds the new TXmlToDomParser
         object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Parse(const InputSource: TXmlInputSource): TDomDocument; virtual;
    <literallayout>
      Reads an XML document from a TXmlInputSource object
      and parses it into a Document Object Model tree.

      Parameters:
      - InputSource
         The TXmlInputSource object to be parsed.

      Return Value:
         A newly created TDomDocument node containing the 
         resulting document tree of the parsing process.  
         The DocumentUri property of this document node is 
         set to the value of the SystemId property of the
         specified input source.  The document node is 
         attached to the TDomImplementation object 
         specified by the DOMImpl property at the time the 
         function is called -- which means that this
         document node is automatically freed, when the 
         TDomImplementation object is being destroyed. 
         However the document can be freed explicitly by 
         calling its Free method.

      Exceptions:
      - EAccessViolation
         Raised if there is no TDomImplementation component 
         associated with this TXmlToDomParser component, or
         if no TXmlInputSource object is specified.
      - EParserException
         Raised if the parser stumbles over a non-wellformed
         entity in the XML document.  Note that not every
         violation of a wellformedness constraint as defined
         in [XML 1.0] can be detected by parsing a document.
         Some of them can only be discovered by validating
         the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ParseFile(const Filename: TFileName;
                       const InclDecl: Boolean): TDomDocument; virtual;
    <literallayout>
      Reads an XML document from a data medium and parses
      it into a Document Object Model tree.

      The parsed document is not automatically validated
      nor is its DTD checked for wellformedness.  Entity
      references to the predefined entities "lt", "gt",
      "amp", "apos", and "quote" are only being resolved
      if the 'KeepEntityRefs' is set to 'False'.   So e.g.,
      if 'KeepEntityRefs' is set to 'True' and the XML
      document to be parsed contains the line
          &lt;foo> &amp;amp; &lt;/foo>
      this will result in a TDomElement node with three
      child nodes: 1. a TDomText node whose nodeValue is
      a space character, 2. a TDomEntityReference node
      whose nodeName is 'amp', 3. again a TDomText node
      whose nodeValue is a space character.

      To validate the document and expand or replace its
      entity references call the ValidateDocument function
      of its associated ValidationAgent.

      HINT:  If the parser does not accept your document and
      reports an invalid character, this is in most cases caused
      by a missing or false XML declaration at the beginning of
      the document.  Note that you may only skip an XML
      declaration if the XML document is encoded in the default
      UTF-8 or UTF-16 encoding.  For all other encodings, e.g.
      those from the ISO-8859-x family, an XML declaration is
      required, for example:
         &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
      when you use the Latin1 character set.

      Parameters:
      - Filename
         The filename of the document to be parsed.
      - InclDecl
         If True, location information includes any XML
         declaration at the beginning of the XML document. 
         If False, the location information is calculated 
         as if no XML declaration had been found.

      Return Value:
         A newly created TDomDocument node containing the 
         resulting document tree of the parsing process.  The 
         DocumentUri property of this document node is set to 
         the specified Filename value (transformed into an 
         URI, of course).  The document node is attached to 
         the TDomImplementation object specified by the 
         DOMImpl property at the time the function is called 
         -- which means that this document node is
         automatically freed, when the TDomImplementation 
         object is being destroyed. However the document can 
         be freed explicitly by calling its Free method. Here 
         is a code example:
    </literallayout>
    <programlisting>
                procedure ParseAndFree;
                var
                  Doc: TDomDocument;
                begin
                  Doc := MyParser.ParseFile('myFile.xml', True);
                  ... // Code ommitted here.
                  Doc.Free;
                end;
    </programlisting>
    <literallayout>
      Exceptions:
      - EAccessViolation
         Raised if there is no TDomImplementation component 
         associated with this TXmlToDomParser component or 
         if no filename is specified.
      - EParserException
         Raised if the parser stumbles over a non-wellformed
         entity in the XML document.  Note that not every
         violation of a wellformedness constraint as defined
         in [XML 1.0] can be detected by parsing a document.
         Some of them can only be discovered by validating
         the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ParseResource(const BaseUri: WideString;
                                 PublicId,
                                 SystemId: WideString;
                           const CodecClass: TUnicodeCodecClass;
                           const InclDecl: Boolean): TDomDocument; virtual;
    <literallayout>
      Reads an XML document from an external resource and
      parses it into a Document Object Model tree.
      
      The parser attempts to retrieve the document to parse
      via the resource resolver specified in its associated 
      DOM Implementation component (see the DOMImpl 
      property).  The resource resolver must, of course, be
      able to handle the requested URI scheme (such as 
      'http', 'file' or 'ftp') or to map the specified 
      public identifier to an input stream.

      Parameters:
      - BaseUri
         The base URI to be used (see section 5.1.4 in 
         [RFC 2396]) for resolving a relative SystemId to 
         an absolute URI.
      - PublicId
         The public identifier of the XML document to be
         parsed, or an empty WideString, if the public
         identifier is unknown.
      - SystemId
         The system identifier, a URI reference (see 
         [RFC 2396]), of the XML document to be parsed, 
         or an empty WideString, if the system identifier 
         is unknown.
      - CodecClass
         The codec class of the external resource if known, or
         nil if unkown. If nil, the effective codec class is 
         determined with the help of the input stream's 
         byte order mark or the encoding value of an XML or 
         text declaration or set to the default TUTF8Codec 
         class, if none of the former applied.
      - InclDecl
         If True, location information includes any XML
         declaration at the beginning of the XML document. 
         If False, the location information is calculated 
         as if no XML declaration had been found.

      Return Value:
         A newly created TDomDocument node containing the 
         resulting document tree of the parsing process.  
         The DocumentUri property of this document node is 
         set to the specified Uri value.  The document 
         node is attached to the TDomImplementation object 
         specified by the DOMImpl property at the time the 
         function is called -- which means that this
         document node is automatically freed, when the 
         TDomImplementation object is being destroyed. 
         However the document can be freed explicitly by 
         calling its Free method.

      Exceptions:
      - EAccessViolation
         Raised if there is no TDomImplementation component 
         associated with this TXmlToDomParser component.
      - EParserException
         Raised if the external resource could not be 
         retreived or if the parser stumbles over a 
         non-wellformed entity in the XML document. Note 
         that not every violation of a wellformedness 
         constraint as defined in [XML 1.0] can be detected 
         by parsing a document. Some of them can only be 
         discovered by validating the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ParseWithContext(const InputSource: TXmlInputSource;
                              const ContextNode: TDomNode;
                              const Action: TXmlParserAction): TDomNode; virtual;
    <literallayout>
      Parses an XML fragment from a TXmlInputSource 
      object and insert the content into an existing 
      Document Object Model tree at the position 
      specified with the ContextNode and Action 
      parameters. 

      If the context node is a TDomDocument node and the 
      action is ACTION_REPLACE_CHILDREN, then the 
      document that is passed as the context node will 
      be changed such that its XmlEncoding, DocumentURI, 
      XmlVersion, InputEncoding, XmlStandalone, and all
      other such properties are set to what they would be 
      set to if the input source was parsed using the
      Parse function.

      If an exception is raised while inserting the 
      content into the Document Object Model tree the
      effect of the insertion is undefined. A part of the
      content might have been inserted; if the
      Action is ACTION_REPLACE_CHILDREN the child nodes
      (or a part of them) might have been removed and 
      freed. Nevertheless, the context node will be
      still in place.

      Parameters:
      - InputSource
         The TXmlInputSource object from which the source
         document is to be read. The source document must 
         be an XML fragment, i.e. anything except a 
         complete XML document (except in the case where 
         the context node of type TDomDocument, and the 
         action is ACTION_REPLACE_CHILDREN), a DOCTYPE
         (internal subset), entity declaration(s), 
         notation declaration(s), or XML or text 
         declaration(s).
      - ContextNode
         The node that is used as the context for the
         data that is being parsed. This node must be a 
         TDomDocument node, a TDomDocumentFragment node, 
         or a node of a type that is allowed as a child 
         of a TDomElement node, e.g. it cannot be an 
         TDomAttribute node.
      - Action
         This parameter describes which action should be 
         taken between the new set of nodes being 
         inserted and the existing children of the 
         context node. The set of possible actions is as
         follows:

         ACTION_APPEND_AS_CHILDREN:
           Append the result of the parse operation as 
           children of the context node. For this action
           to work, the context node must be a 
           TDomElement or a DocumentFragment node.
         ACTION_INSERT_AFTER:
           Insert the result of the parse operation as 
           the immediately following sibling of the 
           context node. For this action to work the 
           context nodes parent must be a TDomElement
           or a TDomDocumentFragment node.
         ACTION_INSERT_BEFORE:
           Insert the result of the parse operation as 
           the immediately preceding sibling of the
           context node. For this action to work the 
           context nodes parent must be a TDomElement
           or a TDomDocumentFragment node.
         ACTION_REPLACE:
           Replace the context node with the result of 
           the parse operation and free the context node.
           For this action to work, the context node 
           must have a parent, and the parent must be a 
           TDomElement or a TDomDocumentFragment node.
         ACTION_REPLACE_CHILDREN:
           Replace (and free) all the children of the 
           context node with the result of the parse 
           operation. For this action to work, the 
           context node must be a TDomElement, a 
           TDomDocument, or a TDomDocumentFragment node.

      Return Value:
         The node that is the result of the parse 
         operation. If the result is more than one 
         top-level node, the first one is returned.

      Exceptions:
      - EAccessViolation
         Raised if there is no TDomImplementation 
         component associated with this TXmlToDomParser 
         component, or if no TXmlInputSource object or
         no context node is specified.
      - EHierarchy_Request_Err
         Raised if the content cannot replace, replace 
         children, be inserted before, after, or appended
         as a child of the context node (see also 
         TDomNode.InsertBefore or TDomNode.ReplaceChild, 
         etc.)
      - ENo_Modification_Allowed_Err
         Raised if the context node is a read only node 
         and the content is being appended to its child 
         list, or if the parent node of the context node 
         is a read only node and the content is being 
         inserted in its child list.
      - EParserException
         Raised if the parser stumbles over a 
         non-wellformed entity in the XML document. Note 
         that not every violation of a wellformedness 
         constraint as defined in [XML 1.0] can be 
         detected by parsing a document. Some of them can
         only be discovered by validating the document.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  <sect2>
  <title>TDtdToDtdModelParser = class (TXmlCustomParser)</title>

  <para>A TDtdToDtdModelParser component allows to parse XML DTDs into a DTD Model.  Before it can be used a TDomImplementation object must be assigned to its 'DOMImpl' property.</para>

  <para><emphasis>Published properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property BufferSize: Integer;
    <literallayout>
      The buffer size for the internal TXmlInputSource
      object.

      The value should be a multiplicity of 1024.  The
      default value is 4096.

      Exceptions on setting:
      - ENot_Supported_Err
         Raised if the specified buffer size is less
         than 1024.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation
    <literallayout>
      (Inherited from TXmlCustomParser.)

      The TDomImplementation component asscoiated with
      this TDtdToDtdModelParser component.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property TargetDtdModel: TDtdModel
    <literallayout>
      The DTD model were the result of the parsing 
      process is to be inserted.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

  <listitem>
  <para>
    constructor Create(AOwner: TComponent); override;
    <literallayout>
      Creates a new TDtdToDtdModelParser object. Note that
      TDtdToDtdModelParser objects are being created
      automatically when adding them from the component's
      palette onto a form.

      If you derive your own parser class from TXmlToDomParser
      which contain replacements for the original Handlers, 
      Builders and Readers, you must override the protected
      CreateSubcomponents procedure which is called by this
      constructor.

      Parameters:
      - AOwner
         The component that holds the new TDtdToDtdModelParser
         object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ParseDocTypeDecl(const DocTypeDecl: TDomDocumentTypeDecl;
                               const ResolveExtEntities,
                                     InclDecl: Boolean); virtual;
    <literallayout>
      Updates the associated TargetDtdModel object 
      according to the specified document type 
      declaration node.

      Parsing errors are reported to the application via
      the OnError event of the associated TDomImplementation 
      component.  The location information offset is 
      determined by the IntSubsetStartByteNumber, 
      IntSubsetStartCharNumber, IntSubsetStartColumn, and 
      IntSubsetStartLine properties of the specified
      TDomDocumentTypeDecl node.

      Applications may use the OnResolveResource event 
      of the associated TDomImplementation component to 
      redirect references to external resources.
      
      It is not necessary to call Prepare before calling
      the ParseDocTypeDecl function. ParseDocTypeDecl 
      is designed for parsing a complete DTD and thus 
      internally calls Prepare to initialize the parsing 
      process.

      After calling ParseDocTypeDecl, the PreparationStatus 
      property of the associated TargetDtdModel object 
      holds information about whether and to what extent
      the DTD model had been successfully built.

      Hint: If the function reports an invalid character, 
      this is often due to a missing or false text 
      declaration at the beginning of an external entity.  
      Note that you may only skip a text declaration if 
      the external entity is encoded in the default UTF-8
      or UTF-16 encoding.  For all other encodings, e.g. 
      those from the ISO-8859-x family, a text declaration
      is required, for example:
         &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
      when you use the Latin1 character set.

      Parameters:
      - DocTypeDecl
         The TDomDocumentTypeDecl node to be parsed.
      - ResolveExtEntities
         Indicate how the parser should treat external 
         parameter entities and the external subset of
         a DTD.  A value of True indicates that the 
         external subset should be processed as well as
         all references to external parameter entities 
         should be resolved and their replacement text be
         parsed (even if they appear in the internal 
         subset); False indicates that external subset 
         should not be processed and all references to
         external parameter entities in the internal
         subset should either be skipped but subsequent 
         declarations be processed as usual or be ignored 
         and subsequent declarations not be processed but 
         still be checked for wellformedness (which one 
         of these alternatives takes place depents on the 
         value of the Standalone parameter). A value of 
         True is equivalent to the behaviour of a 
         validating processor; a value of False is 
         equivalent to the behaviour of a non-validating 
         processor.
      - InclDecl
         If True, location information for the external
         subset of the DTD includes any text declaration.
         If False, the location information is calculated 
         as if no text declaration had been found.

      Exceptions:
      - EAccessViolation
         Raised if there is no TDomImplementation component
         or no TargetDtdModel object associated with this 
         TDtdToDtdModelParser component, or if the specified 
         document type declaration node is nil.
      - EWrong_DOM_Implementation_Err
         Raised if the TDomImplementation object associated
         with this TDtdToDtdModelParser component is not
         identical with the TDomImplementation object 
         associated with the specified TDomDocumentTypeDecl
         node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ParseExtSubset(const InputSource: TXmlInputSource); virtual;
    <literallayout>
      Parses the external subset of a DTD from a 
      TXmlInputSource object and appends it to the 
      TargetDtdModel.

      Note that applications should call Prepare 
      before calling a method for parsing a DTD 
      subset, unless the parsing operation to be 
      performed is a sequel of the previous parsing 
      operation. (For Details, see the description of
      the Prepare method.)

      Parameters:
      - InputSource
         The TXmlInputSource object to be parsed.

      Exceptions:
      - EAccessViolation
         Raised if there is no TDomImplementation component 
         associated with this TDtdToDtdModelParser component, 
         or if no TXmlInputSource object is specified.
      - EParserException
         Raised if the parser stumbles over a non-wellformed
         entity.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ParseIntSubset(const InputSource: TXmlSimpleInputSource;
                             const Standalone: TDomStandalone;
                             const ResolveExtPEs: Boolean); virtual;
    <literallayout>
      Parses the internal subset of a DTD from a 
      TXmlSimpleInputSource object and appends it to 
      the TargetDtdModel.

      Note that applications should call Prepare 
      before calling a method for parsing a DTD 
      subset, unless the parsing operation to be 
      performed is a sequel of the previous parsing 
      operation. (For Details, see the description of
      the Prepare method.)

      Parameters:
      - InputSource
         The TXmlSimpleInputSource object to be parsed.
      - Standalone
         Specifies the standalone status of the XML
         document that contains the internal subset
         to be processed.  This is one of the following 
         values:
         STANDALONE_YES
           The document starts with an XML declaration
           containing a standalone document declaration 
           of value 'yes'.
         STANDALONE_NO
           The document starts with an XML declaration
           containing a standalone document declaration
           of value 'no'.
         STANDALONE_UNSPECIFIED
           The document starts with an XML declaration
           containing no standalone document declaration, 
           or there was no declaration found at the
           beginning of the document, or the standalone
           status of the document is unknown.
      - ResolveExtPEs
         Indicate how the parser should behave after a 
         reference to an external parameter entity was 
         encountered. A value of True indicates that 
         such references should be resolved and their
         replacement text be parsed; False indicates that 
         such references should either be skipped but that 
         subsequent declarations should be processed as 
         usual or be ignored and subsequent declarations 
         not be processed but still be checked for 
         wellformedness (which one of these alternatives
         takes place depents on the value of the
         Standalone parameter). A value of True is 
         equivalent to the behaviour of a validating 
         processor; a value of False is equivalent to the
         behaviour of a non-validating processor.

      Exceptions:
      - EAccessViolation
         Raised if there is no TDomImplementation component 
         associated with this TDtdToDtdModelParser component, 
         or if no TXmlInputSource object is specified.
      - EParserException
         Raised if the parser stumbles over a non-wellformed
         entity.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Prepare; virtual;
    <literallayout>
      Advices the TDtdToDtdModelParser component to 
      initialize itself to prepare one or more 
      contiguous parsing operations of a DTD
      subset. Calling Prepare also clears the 
      associated TargetDtdModel object, if any.
      
      When finishing a parsing operation the 
      TDtdToDtdModelParser component keeps some 
      information, for example a list that records the 
      element types of all attribute-list declarations 
      read.  This information is re-used in subsequent
      parsing operation, for example to issue a 
      warning when more than one attribute-list 
      declaration is provided for a given element type.
      Calling Prepare advises the TDtdToDtdModelParser 
      component to discard all information gathered 
      during previous parsing operations.
      
      Applications should call Prepare before 
      calling a parsing method, unless the parsing
      operation to be performed is a sequel of the 
      previous parsing operation.  An example of such
      a sequel is the parsing of an external subset
      of a DTD after parsing its internal subset.  In
      this case the Prepare method must only be
      called before parsing the internal subset:
    </literallayout>
    <programlisting>
        Prepare;
        IntSubsetStringToDtdModel(MyIntInputString,
                         MyPublicId,
                         MySystemId,
                         MyIntSubsetStartByteNumber,
                         MyIntSubsetStartCharNumber,
                         MyIntSubsetStartColumn,
                         MyIntSubsetStartLine,
                         True);
        ExtSubsetStringToDtdModel(MyExtInputString,
                         MyPublicId,
                         MySystemId);
    </programlisting>
    <literallayout>
      It is not necessary to call Prepare before 
      calling the ParseDocTypeDecl function.
      ParseDocTypeDecl is designed for parsing a 
      complete DTD and thus internally calls Prepare
      to initialize the parsing process.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TDomToXmlParser = class (TXmlCustomParser)</title>

  <para>This component provides functions for serializing (writing) a document tree out in an XML document. Before it can be used a TDomImplementation object must be assigned to its 'DOMImpl' property.  By linking the Unicode Utilities Library (cUnicodeCodecs.pas) the parser supports more then 70 character encoding schemes.  For details consult the documentation of the Unicode Utilities Library.</para>

  <para>The following example demonstrates how to write an XML document to a file:</para>

  <literallayout>
  procedure SaveToFile(const Doc: TDomDocument; 
                       const Path: TFilename; 
                       const Encoding: WideString);
  var
    DomToXMLParser: TDomToXMLParser;
    Stream: TFileStream;
  begin
    if not Assigned(Doc) then Exit; 
    DomToXMLParser := TDomToXMLParser.Create(nil);
    try
      DomToXMLParser.DomImpl := Doc.DomImplementation;
      Stream := TFileStream.Create(Path, fmCreate);
      try
        DomToXMLParser.WriteToStream(Doc, Encoding, Stream);
      finally
        Stream.Free;
      end;
    finally
      DomToXMLParser.Free;
    end;
  end;
  </literallayout>

  <para><emphasis>Published properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property BufferSize: Integer;
    <literallayout>
      The buffer size for the internal TXmlOutputSource
      object for serializing the document tree using a
      single byte encoding scheme (for example Latin1 or
      Windows-1252).  When the encoding scheme is UTF-8 
      or UTF-16 the value of BufferSize is irrelevant.

      The value of BufferSize should be a multiplicity of 
      1024.  The default value is 4096.  

      For small files changing the buffer size has almost 
      no measurable effect.  Whereas when parsing large 
      XML files the performance can be increased by using 
      a larger buffer, which of course consumes more memory.
      However, the effect that results from changing the 
      buffer size depends also on the configuration of 
      the computer system used.  The following table shows 
      how long it took to execute the WriteToString(Doc,
      'Latin1', S) function where Doc contains the document
      model of an 798 KB XML version of the XDOM manual (i.e.
      the manual you are just reading) on a Pentium II 233
      with 64 MB RAM on Win98 compiled with Delphi 7
      (average of 5 runs each):

                  Buffer Size  |  Time in ms
               -------------------------------
                      1024     |     2928
                      2048     |     2907
                      4096     |     2865
                     16384     |     2864
                     65536     |     2854
                    524288     |     2872

      Exceptions on setting:
      - ENot_Supported_Err
         Raised if the specified buffer size is less
         than 1024.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation (Inherited from TXmlCustomParser.)
    <literallayout>
      The TDomImplementation object to which the XDOM tree
      to be serialized belongs.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IgnoreUnspecified: Boolean
    <literallayout>
      If set to 'True', unspecified attributes, i.e. 
      fixed and default attributes which have been added 
      to the node tree during validation, are skipped.
      If set to 'False', unspecified attributes also
      generate an XML Signal.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IncludeXmlDecl: Boolean
    <literallayout>
      Determines whether to include an XML, or text 
      declaration respectively, if a complete XML 
      document or external entity is to be serialied.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StrictErrorChecking: Boolean
    <literallayout>
      Determines whether to perform wellformedness tests
      while serializing an XDOM tree.  If set to 'False'
      only fundamental wellformedness tests are made. If
      set to 'True' all wellformedness errors are being
      detected which do not required the DTD to be read;
      especially the internal subset of a
      TDomDocumentTypeDecl node, if any, is not checked
      for wellformedness, but serialized out as it is.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property UseActiveCodePage: Boolean (Delphi only)
    <literallayout>
      If set to 'True' the WriteToStream and 
      WriteToString functions use Window's current
      active code page as encoding scheme no matter what
      encoding was specified in the 'encoding' parameter
      of this functions.  The default value is 'False'.

      Setting 'UseActiveCodePage' to 'True' is especially
      useful when serializing a DOM tree into a string to
      be displayed on screen.  WriteToString chooses
      automatically the correct encoding.  Of course it
      still cannot serialize DOM trees where a character
      which has no equivalent in the target encoding
      occures in a place where a character reference
      cannot be substituted for it.  In this case the
      return value of the WriteToString function will
      be 'False'.

      This property is only available in Delphi, because
      Kylix strings are based on Unicode encoding.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property UseByteOrderMark: TXmlBOMOpt
    <literallayout>
      A set of constants which determines whether the 
      output is prefixed by a byte order mark when 
      serializing a TDomDocument node.  A byte order mark 
      is used if the output encoding is UTF-8, UTF-16BE, 
      UTF-16LE, or ISO-10646-UCS-2 and a corresponding 
      constant (bomUTF8 for UTF-8, bomUTF16 for UTF-16BE 
      or UTF-16LE, bomUCS2 for ISO-10646-UCS-2) is contained
      in the set.  When using other encodings or when 
      serializing a node which is not of type TDomDocument, 
      a byte order mark is never used.
      
      The default value is [bomUTF16, bomUCS2], i.e. a byte
      order mark is used when the encoding is UTF-16BE, 
      UTF-16LE or ISO-10646-UCS-2.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property WriteLFOption: TCodecWriteLFOption
    <literallayout>
      Specifies the end-of-line sequence of characters to
      be used in the XML being written out to substitute
      a line-feed character.  Valid values are:

      - lwCRLF: The carriage-return and line-feed
                characters (#$D#$A) are to be used.
      - lwCR:   The carriage-return character (#$D)
                is to be used.
      - lwLF:   The line-feed character (#$A) is to
                be used.

      The default value is lwCRLF.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnAfterWrite: TDomSerializationEvent
    <literallayout>
      TDomSerializationEvent = 
          procedure(Sender: TXmlStreamBuilder;
                    PieceType: TDomPieceType;
                    const Locator: IDomLocator) 
                   of object;

      This event is triggered after the parser has 
      serialized a structure element of an XML 
      document.

      Parameters:
      - Sender
         A reference to the internal TXmlStreamBuilder
         object that called the event.
      - PieceType
         Indicates what type of structure element
         has been serialized.
      - Locator
         A IDomLocator interface providing location 
         information about the serialized structure 
         element.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OnBeforeWrite: TDomSerializationEvent
    <literallayout>
      TDomSerializationEvent = 
          procedure(Sender: TXmlStreamBuilder;
                    PieceType: TDomPieceType;
                    const Locator: IDomLocator) 
                   of object;

      This event is triggered before the parser
      serializes a structure element of an XML
      document.

      Parameters:
      - Sender
         A reference to the internal TXmlStreamBuilder
         object that called the event.
      - PieceType
         Indicates what type of structure element
         is to be serialized.
      - Locator
         A IDomLocator interface providing location 
         information about the structure element
         to be serialized.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

  <listitem>
  <para>
    constructor Create(AOwner: TComponent); override;
    <literallayout>
      Creates a new TDomToXmlParser object. Note that
      TDomToXmlParser objects are being created automatically
      when adding them from the component's palette onto a
      form.

      Parameters:
      - AOwner
         The component that holds the new TDomToXmlParser
         object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function WriteToStream(const wnode: TDomNode;
                           const encoding: WideString;
                           const destination: TStream): Boolean; virtual;
    <literallayout>
      Writes out the specified node into the specified
      destination stream.  Note that the destination
      stream is not automatically cleared, so you can
      append different serialized node trees to the
      same stream.

      Writing a TDomDocument node serializes a complete
      XML document including its XML declaration. Whether
      the output is prefixed by a byte order mark is
      determined by the value of the UseByteOrderMark
      property.  When serializing a node which is not of
      type TDomDocument, byte order marks are never
      used.

      Parameters:
      - wnode
         The node to be serialized.
      - encoding
         The character encoding in which the output will
         be written.  The encoding to use when writing is
         determined as follows:	 If the 'UseActiveCodePage'
         property of this TDomToXmlParser object is set to
         'True' Window's current active code page is used
         (Delphi only).  Otherwise, if the encoding has
         been specified, that value will be used.  If the
         encoding is an empty WideString, but the item to
         be written is a TDomDocument node which specifies
         an encoding, that value will be used.  If neither
         of the above provides an encoding name, a default
         encoding of "UTF-8" will be used.
         Supported are all single byte encodings included
         in the SINGLE_BYTE_ENCODINGS set constant of the
         cUnicodeCodecs.pas it is linked to as well as the
         multi byte encodings 'UTF-8', 'UTF-16BE',
         'UTF-16LE' and 'ISO-10646-UCS-2'.
      - destination
         The destination stream for the data to be written.

      Return Value:
         Returns 'True' if the node was successfully
         serialized and 'False' in case a failure occured.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified encoding is not supported.
      - EAccessViolation
         Raised if no TDomImplementation component, no source
         node or no destination stream was specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function WriteToString(const wnode: TDomNode;
                           const encoding: WideString;
                             out S: string): Boolean; virtual;
    <literallayout>
      Writes out the specified node into the specified
      string.

      Writing a TDomDocument node serializes a complete
      XML document including its XML declaration. Whether
      the output is prefixed by a byte order mark if the
      specified encoding is UTF-8, is determined by the 
      value of the UseByteOrderMark property.

      Writing other node types produces a fragment of
      text.  Byte order marks are never used.

      Parameters:
      - wnode
         The node to be serialized.
      - encoding
         The character encoding in which the output will
         be written.  The encoding to use when writing is
         determined as follows:	 If the 'UseActiveCodePage'
         property of this TDomToXmlParser object is set to
         'True' Window's current active code page is used
         (Delphi only).  Otherwise, if the encoding has
         been specified, that value will be used.  If the
         encoding is an empty WideString, but the item to
         be written is a TDomDocument node which specifies
         an encoding, that value will be used.  If neither
         of the above provides an encoding name, a default
         encoding of "UTF-8" will be used.
      - S
         The destination string for the data to be written.

      Return Value:
         Returns 'True' if the node was successfully
         serialized and 'False' in case a failure occured.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified encoding is not supported.
      - EAccessViolation
         Raised if no TDomImplementation component, no source
         node or no destination stream was specified.
    </literallayout>
    </para>
    </listitem>


    <listitem>
    <para>
    function WriteToWideString(const wnode: TDomNode;
                                 out S: WideString): Boolean; virtual;
    <literallayout>
      Writes out the specified node into the specified
      WideString in UTF-16LE.

      Writing a TDomDocument node serializes a complete
      XML document including its XML declaration. Whether
      the output is prefixed by a byte order mark, is 
      determined by the value of the UseByteOrderMark 
      property.  

      Writing other node types produces a fragment of
      text.  Byte order marks are never used.

      Parameters:
      - wnode
         The node to be serialized.
      - S
         The destination WideString for the data to be
         written.

      Return Value:
         Returns 'True' if the node was successfully
         serialized and 'False' in case a failure occured.

      Exceptions:
      - EAccessViolation
         Raised if no TDomImplementation component, no source
         node or no destination stream was specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
</sect2>

</sect1>


<sect1>
<title>Resource Resolver Classes</title>
  
  <para>Resource resolvers provide a way for TDomImplementation components to access external resources.  The resource resolver to be used with a particular TDomImplementation component must be specified in the component's resourceResolver parameter.  It is then used whenever the TDomImplementation.ResolveResource function is called, either directly by the application, or during document parsing and validation.</para>

  <sect2>
  <title>TCustomResourceResolver = class(TDomBaseComponent)</title>

  <para>This is the abstract base class for all resource resolvers. It defines an abstract ResolveResource function which all derived classes must implement. Do not use instances of TCustomResourceResolver directly in your application. Instead use one of the classes derived from TCustomResourceResolver.</para>

  </sect2>


  <sect2>
  <title>TStandardResourceResolver = class(TCustomResourceResolver)</title>

  <para>TStandardResourceResolver is a resolver for file scheme URLs (such as "file:///C:/Documents/manual.xml"). It also implements an OnResolveResource event which can be used by an application to resolve other types of URLs or to redirect a file scheme URL.</para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnResolveResource: TDomResolveResourceEvent
    <literallayout>
  TDomResolveResourceEvent =
    procedure(      Sender: TObject;
              const ResourceType,
                    NamespaceURI: WideString;
                var PublicId,
                    SystemId: WideString;
                var Stream: TStream;
                var CertifiedText: Boolean) 
            of object;

      This event provides a way for applications to 
      redirect references to external resources.

      Parameters:
      - Sender
         The parser object that called the event.
      - ResourceType
         The type of the resource being resolved. For XML 
         [XML 1.0] resources (i.e. entities), this is
         "http://www.w3.org/TR/REC-xml", for XML Schema 
         [XML Schema Part 1] this is 
         "http://www.w3.org/2001/XMLSchema". [Remark: XML
         Schema is currently not supported by this XDOM 
         implementation.  However, third party parsers
         may do so.]
      - NamespaceUri
         The namespace of the resource being resolved, i.e. 
         the namespace of the XML Schema [XML Schema Part 1]
         when resolving XML Schema resources. [Remark: XML
         Schema is currently not supported by this XDOM 
         implementation.  However, third party parsers
         may do so.]

      Var Parameters:
      - PublicId
         When the event is called this parameter holds the
         public identifier of the external entity to be
         resolved, or an empty WideString, if the public
         identifier is unknown.  An event handler may modify 
         this value, e.g. to normalize public identifiers or 
         to retrieve a public identifier from a system 
         identifier.  The public identifier, if specified, 
         may also be reported as part of the location 
         information when errors are reported.
      - SystemId
         When the event is called this parameter holds the
         system identifier, an absolute URI reference, of 
         the external entity to be resolved, or an empty 
         WideString, if the system identifier is unknown.
         An event method may modify it, e.g. to normalize 
         system identifiers or to retrieve a system 
         identifier if only a public identifier was 
         specified.  
         If the event handler returns 'nil' in the 'stream'
         parameter, the resource resolver tries to open a 
         regular URI connection to the system identifier.  
         In this case, if the system identifier is an empty 
         WideString, the parser aborts resolving the external 
         entity and returns nil.  This is especially useful
         in server applications to prevent parsers from 
         accessing files outside the application's working 
         directory or to implement additional security 
         levels.
         The system identifier is optional if there is a 
         TStream object specified in the 'stream' parameter,
         but it is still useful to provide one, since the
         parser will use it to resolve any relative URIs 
         and can include it in error messages and warnings.
      - Stream
         When the event is called the value of this 
         parameter is nil.  An event handler may return a 
         newly created TStream object which contains the 
         data of the external entity.
      - CertifiedText
         If set to true, assume that the input is certified
         (cf. [XML 1.1], sec. 2.13) when parsing XML 1.1.
         [Remark: This parameter is a place holder, because
         currently XDOM does not support XML 1.1.]
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function resolveResource(const aBaseURI: WideString;
                               var publicId,
                                   systemId: WideString): TStream; override;
    <literallayout>
      Resolves a resource specified by an URI or a public 
      identifier and returns its content in a newly created
      stream object.  When this function is called first
      an OnResolveResource event is triggered.  If this 
      event does not return a stream object and the 
      resulting URI when combining the specified base URI
      and the specified system identifier is a file scheme
      URL, then the resource resolver tries to retrieve this
      resource from the local file system.

      Parameters:
      - aBaseURI
         The base URI of the resource to retrieve.

      Var Parameters:
      - publicId
         When the function is called this parameter holds 
         the public identifier of the external entity to be
         resolved, or an empty WideString, if the public
         identifier is unknown.  A handler for the
         OnResolveResource event may modify this value, 
         e.g. to normalize public identifiers or to 
         retrieve a public identifier from a system 
         identifier.  The public identifier, if specified, 
         may also be reported as part of the location 
         information when errors are reported.
      - systemId
         When the function is called this parameter holds 
         the system identifier of the external entity to be 
         resolved, or an empty WideString, if the system 
         identifier is unknown. The function modifies the
         specified system identifier by combining it with
         the specified base URI to calculate an absolute 
         URI.  This absolute URI is next used as the 
         systemId parameter when the OnResolveResource 
         event is triggered.  An event handler may modify
         this value, e.g. to normalize system identifiers 
         or to retrieve a system identifier if only a 
         public identifier was specified.  Then the 
         resulting system identifier is used to locate
         the resource to be retrieved.
          
      Return Value:
         A newly created stream containing the contents of
         resource with the specified URI, or nil if the 
         resource could not be retrieved.

      Exceptions:
      - ENot_Found_Err
         Raised if no resource resolver assigned was 
         assigned to this TDomImplementation component.
      </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

</sect1>


<sect1>
<title>Classes for Error and Location Reporting</title>

  <sect2>
  <title>Error Types and Constants</title>

  <para>The order and number of the listed error types may be changed in future XDOM implementations.  So you are strongly adviced to refer to error types by using the constants below, but avoid using their numerical equivalents</para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    <literallayout>
  TXmlErrorType = (
    ET_NONE, 

    ET_DOCTYPE_NOT_FOUND,
    ET_DOUBLE_ATTLISTDECL,
    ET_DOUBLE_ATTDEF,
    ET_DOUBLE_ENTITY_DECL,
    ET_DOUBLE_PARAMETER_ENTITY_DECL,

    ET_ATTRIBUTE_DEFAULT_TYPE_MISMATCH,
    ET_ATTRIBUTE_TYPE_MISMATCH,
    ET_DUPLICATE_ELEMENT_TYPE_DECL,
    ET_DUPLICATE_ENUMERATION_TOKEN,
    ET_DUPLICATE_ID_ON_ELEMENT_TYPE,
    ET_DUPLICATE_ID_VALUE,
    ET_DUPLICATE_NAME_IN_MIXED_CONTENT,
    ET_DUPLICATE_NOTATION_DECL,
    ET_DUPLICATE_NOTATION_ON_ELEMENT_TYPE,
    ET_DUPLICATE_NOTATION_TOKEN,
    ET_DUPLICATE_TOKENS,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_CDATA_SECTION_WHERE_ELEMENT_ONLY,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_CHILD_ELEMENT_TYPE,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_ELEMENT_WHERE_PCDATA_ONLY,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_PCDATA_WHERE_ELEMENT_ONLY,
    ET_ELEMENT_DECLARED_EMPTY_HAS_CONTENT,
    ET_ENTITY_REFERENCED_BEFORE_DECLARED_VC,
    ET_FIXED_ATTRIBUTE_MISMATCH,
    ET_ID_NEITHER_IMPLIED_NOR_REQUIRED,
    ET_NONDETERMINISTIC_ELEMENT_CONTENT_MODEL,
    ET_NOTATION_ON_EMPTY_ELEMENT,
    ET_PE_NOT_PROPERLY_NESTED_WITH_CONDITIONAL_SECTION,
    ET_PE_NOT_PROPERLY_NESTED_WITH_DECL,
    ET_PE_NOT_PROPERLY_NESTED_WITH_PARENTHESIZED_GROUP,
    ET_PREDEFINED_ENTITY_INCORRECTLY_REDECLARED,
    ET_REQUIRED_ATTRIBUTE_NOT_SPECIFIED,
    ET_TARGET_ID_VALUE_NOT_FOUND,
    ET_UNDEFINED_ATTRIBUTE,
    ET_UNDEFINED_ELEMENT_TYPE,
    ET_UNDEFINED_ENTITY_VC,
    ET_UNDEFINED_NOTATION,
    ET_UNDEFINED_PARAMETER_ENTITY,
    ET_UNDEFINED_TARGET_UNPARSED_ENTITY,
    ET_UNNORMALIZED_EXT_ATTR_IN_STANDALONE_DOC,
    ET_UNRESOLVABLE_EXTERNAL_SUBSET,
    ET_UNSPECIFIED_EXT_ATTR_IN_STANDALONE_DOC,
    ET_WHITESPACE_IN_EXT_ELEMENT_CONTENT_IN_STANDALONE_DOC,
    ET_WRONG_ROOT_ELEMENT_TYPE,

    ET_ATTRIBUTE_VALUE_REFERS_TO_EXTERNAL_ENTITY,
    ET_BYTE_ORDER_MARK_ENCODING_MISMATCH,
    ET_CDATA_START_EXPECTED,
    ET_COMMENT_START_EXPECTED,
    ET_DOCTYPE_START_EXPECTED,
    ET_DOUBLE_ATTRIBUTE_NAME,
    ET_DOUBLE_EQUALITY_SIGN,
    ET_DOUBLE_HYPHEN_IN_COMMENT,
    ET_DOUBLE_ROOT_ELEMENT,
    ET_ENTITY_REFERENCED_BEFORE_DECLARED_WFC,
    ET_EXT_DECL_ENTITY_REFERENCED_IN_STANDALONE_DOC,
    ET_HYPHEN_AT_COMMENT_END,
    ET_INVALID_ATTRIBUTE_NAME,
    ET_INVALID_ATTRIBUTE_VALUE,
    ET_INVALID_CDATA_SECTION,
    ET_INVALID_CHARACTER,
    ET_INVALID_CHARREF,
    ET_INVALID_COMMENT,
    ET_INVALID_ELEMENT_NAME,
    ET_INVALID_ENCODING_NAME,
    ET_INVALID_ENTITY_NAME,
    ET_INVALID_PARAMETER_ENTITY_NAME,
    ET_INVALID_PROCESSING_INSTRUCTION,
    ET_INVALID_PUBID_LITERAL,
    ET_INVALID_SYSTEM_LITERAL,
    ET_INVALID_TEXT_DECL,
    ET_INVALID_VERSION_NUMBER,
    ET_INVALID_XML_DECL,
    ET_LEFT_SQUARE_BRACKET_EXPECTED,
    ET_LT_IN_ATTRIBUTE_VALUE,
    ET_MISSING_ELEMENT_NAME,
    ET_MISSING_END_TAG,
    ET_MISSING_ENTITY_NAME,
    ET_MISSING_EQUALITY_SIGN,
    ET_MISSING_QUOTATION_MARK,
    ET_MISSING_START_TAG,
    ET_MISSING_WHITE_SPACE,
    ET_NOT_IN_ROOT_ELEMENT,
    ET_NO_PROPER_MARKUP_REFERENCED,
    ET_PE_BETWEEN_DECLARATIONS,
    ET_PUBLIC_KEYWORD_EXPECTED,
    ET_QUOTATION_MARK_EXPECTED,
    ET_RECURSIVE_REFERENCE,
    ET_REFERS_TO_UNPARSED_ENTITY,
    ET_RIGHT_SQUARE_BRACKET_EXPECTED,
    ET_ROOT_ELEMENT_NOT_FOUND,
    ET_SYSTEM_KEYWORD_EXPECTED,
    ET_UNCLOSED_CDATA_SECTION,
    ET_UNCLOSED_CHARREF,
    ET_UNCLOSED_COMMENT,
    ET_UNCLOSED_DOCTYPE,
    ET_UNCLOSED_ELEMENT,
    ET_UNCLOSED_ENTITY_REF,
    ET_UNCLOSED_PROCESSING_INSTRUCTION,
    ET_UNDEFINED_ENTITY_WFC,
    ET_WRONG_ORDER,

    ET_ATTLIST_DECL_START_EXPECTED,
    ET_CONDITIONAL_SECTION_NOT_ALLOWED,
    ET_DOUBLE_DOCTYPE,
    ET_ELEMENT_DECL_START_EXPECTED,
    ET_ENTITY_DECL_START_EXPECTED,
    ET_INVALID_ATTLIST_DECL_NAME,
    ET_INVALID_ATTRIBUTE_DECL,
    ET_INVALID_ATTRIBUTE_NAME_IN_ATTRIBUTE_DECL,
    ET_INVALID_CONDITIONAL_SECTION,
    ET_INVALID_CONTENT_MODEL_TOKEN_IN_ELEMENT_DECL,
    ET_INVALID_ELEMENT_DECL,
    ET_INVALID_ELEMENT_NAME_IN_ATTRIBUTE_DECL,
    ET_INVALID_ELEMENT_NAME_IN_ELEMENT_DECL,
    ET_INVALID_ENTITY_DECL,
    ET_INVALID_ENTITY_NAME_IN_ENTITY_DECL,
    ET_INVALID_ENTITY_NAME_IN_PARAMETER_ENTITY_DECL,
    ET_INVALID_ENTITY_VALUE_IN_ENTITY_DECL,
    ET_INVALID_ENTITY_VALUE_IN_PARAMETER_ENTITY_DECL,
    ET_INVALID_ENUMERATION_TOKEN_IN_ATTRIBUTE_DECL,
    ET_INVALID_MARKUP_DECL,
    ET_INVALID_NOTATION_DECL,
    ET_INVALID_NOTATION_NAME_IN_ENTITY_DECL,
    ET_INVALID_NOTATION_NAME_IN_NOTATION_DECL,
    ET_INVALID_NOTATION_TOKEN_IN_ATTRIBUTE_DECL,
    ET_INVALID_PARAMETER_ENTITY_DECL,
    ET_INVALID_ROOT_ELEMENT_NAME_IN_DOCTYPE_DECL,
    ET_KEYWORD_ANY_NOT_ALLOWED,
    ET_KEYWORD_EMPTY_NOT_ALLOWED,
    ET_KEYWORD_PCDATA_NOT_ALLOWED,
    ET_MALFORMED_CONTENT_MODEL_IN_ELEMENT_DECL,
    ET_MISSING_ENTITY_VALUE_IN_ENTITY_DECL,
    ET_MISSING_ENTITY_VALUE_IN_PARAMETER_ENTITY_DECL,
    ET_NOTATION_DECL_START_EXPECTED,
    ET_PARAMETER_ENTITY_REF_NOT_ALLOWED,
    ET_UNCLOSED_ATTLIST_DECL,
    ET_UNCLOSED_CONDITIONAL_SECTION,
    ET_UNCLOSED_ELEMENT_DECL,
    ET_UNCLOSED_ENTITY_DECL,
    ET_UNCLOSED_NOTATION_DECL,
    ET_UNCLOSED_PARAMETER_ENTITY_REF,
    ET_UNKNOWN_DECL_TYPE,
    ET_WHITESPACE_EXPECTED,

    ET_INVALID_NAMESPACE_URI,
    ET_INVALID_PREFIX,
    ET_INVALID_QUALIFIED_NAME,
    ET_NAMESPACE_URI_NOT_FOUND,
    ET_WRONG_PREFIX_MAPPING_NESTING,

    ET_ENCODING_NOT_SUPPORTED,
    ET_EXT_ENTITY_RESOURCE_NOT_FOUND,
    ET_EXT_PARAMETER_ENTITY_RESOURCE_NOT_FOUND,
    ET_INVALID_CHARACTER_IN_EXT_ENTITY,
    ET_XML_VERSION_NOT_SUPPORTED
  );
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    <literallayout>
  TXmlErrorTypes = set of TXmlErrorType;
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    <literallayout>
  ET_WARNINGS: TXmlErrorTypes = [
    ET_NONE, 
    ET_DOCTYPE_NOT_FOUND,
    ET_DOUBLE_ATTLISTDECL,
    ET_DOUBLE_ATTDEF,
    ET_DOUBLE_ENTITY_DECL,
    ET_DOUBLE_PARAMETER_ENTITY_DECL
  ];
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    <literallayout>
  ET_ERRORS: TXmlErrorTypes = [
    ET_ATTRIBUTE_DEFAULT_TYPE_MISMATCH,
    ET_ATTRIBUTE_TYPE_MISMATCH,
    ET_DUPLICATE_ELEMENT_TYPE_DECL,
    ET_DUPLICATE_ENUMERATION_TOKEN,
    ET_DUPLICATE_ID_ON_ELEMENT_TYPE,
    ET_DUPLICATE_ID_VALUE,
    ET_DUPLICATE_NAME_IN_MIXED_CONTENT,
    ET_DUPLICATE_NOTATION_DECL,
    ET_DUPLICATE_NOTATION_ON_ELEMENT_TYPE,
    ET_DUPLICATE_NOTATION_TOKEN,
    ET_DUPLICATE_TOKENS,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_CDATA_SECTION_WHERE_ELEMENT_ONLY,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_CHILD_ELEMENT_TYPE,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_ELEMENT_WHERE_PCDATA_ONLY,
    ET_ELEMENT_CONTENT_MODEL_MISMATCH_WITH_PCDATA_WHERE_ELEMENT_ONLY,
    ET_ELEMENT_DECLARED_EMPTY_HAS_CONTENT,
    ET_ENTITY_REFERENCED_BEFORE_DECLARED_VC,
    ET_FIXED_ATTRIBUTE_MISMATCH,
    ET_ID_NEITHER_IMPLIED_NOR_REQUIRED,
    ET_NONDETERMINISTIC_ELEMENT_CONTENT_MODEL,
    ET_NOTATION_ON_EMPTY_ELEMENT,
    ET_PE_NOT_PROPERLY_NESTED_WITH_CONDITIONAL_SECTION,
    ET_PE_NOT_PROPERLY_NESTED_WITH_DECL,
    ET_PE_NOT_PROPERLY_NESTED_WITH_PARENTHESIZED_GROUP,
    ET_PREDEFINED_ENTITY_INCORRECTLY_REDECLARED,
    ET_REQUIRED_ATTRIBUTE_NOT_SPECIFIED,
    ET_TARGET_ID_VALUE_NOT_FOUND,
    ET_UNDEFINED_ATTRIBUTE,
    ET_UNDEFINED_ELEMENT_TYPE,
    ET_UNDEFINED_ENTITY_VC,
    ET_UNDEFINED_NOTATION,
    ET_UNDEFINED_PARAMETER_ENTITY,
    ET_UNDEFINED_TARGET_UNPARSED_ENTITY,
    ET_UNNORMALIZED_EXT_ATTR_IN_STANDALONE_DOC,
    ET_UNRESOLVABLE_EXTERNAL_SUBSET,
    ET_UNSPECIFIED_EXT_ATTR_IN_STANDALONE_DOC,
    ET_WHITESPACE_IN_EXT_ELEMENT_CONTENT_IN_STANDALONE_DOC,
    ET_WRONG_ROOT_ELEMENT_TYPE
  ];
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    <literallayout>
  ET_FATAL_ERRORS: TXmlErrorTypes = [
    ET_ATTRIBUTE_VALUE_REFERS_TO_EXTERNAL_ENTITY,
    ET_BYTE_ORDER_MARK_ENCODING_MISMATCH,
    ET_CDATA_START_EXPECTED,
    ET_COMMENT_START_EXPECTED,
    ET_DOCTYPE_START_EXPECTED,
    ET_DOUBLE_ATTRIBUTE_NAME,
    ET_DOUBLE_EQUALITY_SIGN,
    ET_DOUBLE_HYPHEN_IN_COMMENT,
    ET_DOUBLE_ROOT_ELEMENT,
    ET_ENTITY_REFERENCED_BEFORE_DECLARED_WFC,
    ET_EXT_DECL_ENTITY_REFERENCED_IN_STANDALONE_DOC,
    ET_HYPHEN_AT_COMMENT_END,
    ET_INVALID_ATTRIBUTE_NAME,
    ET_INVALID_ATTRIBUTE_VALUE,
    ET_INVALID_CDATA_SECTION,
    ET_INVALID_CHARACTER,
    ET_INVALID_CHARREF,
    ET_INVALID_COMMENT,
    ET_INVALID_ELEMENT_NAME,
    ET_INVALID_ENCODING_NAME,
    ET_INVALID_ENTITY_NAME,
    ET_INVALID_PARAMETER_ENTITY_NAME,
    ET_INVALID_PROCESSING_INSTRUCTION,
    ET_INVALID_PUBID_LITERAL,
    ET_INVALID_SYSTEM_LITERAL,
    ET_INVALID_TEXT_DECL,
    ET_INVALID_VERSION_NUMBER,
    ET_INVALID_XML_DECL,
    ET_LEFT_SQUARE_BRACKET_EXPECTED,
    ET_LT_IN_ATTRIBUTE_VALUE,
    ET_MISSING_ELEMENT_NAME,
    ET_MISSING_END_TAG,
    ET_MISSING_ENTITY_NAME,
    ET_MISSING_EQUALITY_SIGN,
    ET_MISSING_QUOTATION_MARK,
    ET_MISSING_START_TAG,
    ET_MISSING_WHITE_SPACE,
    ET_NOT_IN_ROOT_ELEMENT,
    ET_NO_PROPER_MARKUP_REFERENCED,
    ET_PE_BETWEEN_DECLARATIONS,
    ET_PUBLIC_KEYWORD_EXPECTED,
    ET_QUOTATION_MARK_EXPECTED,
    ET_RECURSIVE_REFERENCE,
    ET_REFERS_TO_UNPARSED_ENTITY,
    ET_ROOT_ELEMENT_NOT_FOUND,
    ET_SYSTEM_KEYWORD_EXPECTED,
    ET_UNCLOSED_CDATA_SECTION,
    ET_UNCLOSED_CHARREF,
    ET_UNCLOSED_COMMENT,
    ET_UNCLOSED_DOCTYPE,
    ET_UNCLOSED_ELEMENT,
    ET_UNCLOSED_ENTITY_REF,
    ET_UNCLOSED_PROCESSING_INSTRUCTION,
    ET_UNDEFINED_ENTITY_WFC,
    ET_WRONG_ORDER,

    ET_ATTLIST_DECL_START_EXPECTED,
    ET_CONDITIONAL_SECTION_NOT_ALLOWED,
    ET_DOUBLE_DOCTYPE,
    ET_ELEMENT_DECL_START_EXPECTED,
    ET_ENTITY_DECL_START_EXPECTED,
    ET_INVALID_ATTLIST_DECL_NAME,
    ET_INVALID_ATTRIBUTE_DECL,
    ET_INVALID_ATTRIBUTE_NAME_IN_ATTRIBUTE_DECL,
    ET_INVALID_CONDITIONAL_SECTION,
    ET_INVALID_CONTENT_MODEL_TOKEN_IN_ELEMENT_DECL,
    ET_INVALID_ELEMENT_DECL,
    ET_INVALID_ELEMENT_NAME_IN_ATTRIBUTE_DECL,
    ET_INVALID_ELEMENT_NAME_IN_ELEMENT_DECL,
    ET_INVALID_ENTITY_DECL,
    ET_INVALID_ENTITY_NAME_IN_ENTITY_DECL,
    ET_INVALID_ENTITY_NAME_IN_PARAMETER_ENTITY_DECL,
    ET_INVALID_ENTITY_VALUE_IN_ENTITY_DECL,
    ET_INVALID_ENTITY_VALUE_IN_PARAMETER_ENTITY_DECL,
    ET_INVALID_ENUMERATION_TOKEN_IN_ATTRIBUTE_DECL,
    ET_INVALID_MARKUP_DECL,
    ET_INVALID_NOTATION_DECL,
    ET_INVALID_NOTATION_NAME_IN_ENTITY_DECL
    ET_INVALID_NOTATION_NAME_IN_NOTATION_DECL,
    ET_INVALID_NOTATION_TOKEN_IN_ATTRIBUTE_DECL,
    ET_INVALID_PARAMETER_ENTITY_DECL,
    ET_INVALID_ROOT_ELEMENT_NAME_IN_DOCTYPE_DECL,
    ET_KEYWORD_ANY_NOT_ALLOWED,
    ET_KEYWORD_EMPTY_NOT_ALLOWED,
    ET_KEYWORD_PCDATA_NOT_ALLOWED,
    ET_MALFORMED_CONTENT_MODEL_IN_ELEMENT_DECL,
    ET_MISSING_ENTITY_VALUE_IN_ENTITY_DECL,
    ET_MISSING_ENTITY_VALUE_IN_PARAMETER_ENTITY_DECL,
    ET_NOTATION_DECL_START_EXPECTED,
    ET_PARAMETER_ENTITY_REF_NOT_ALLOWED,
    ET_UNCLOSED_ATTLIST_DECL,
    ET_UNCLOSED_CONDITIONAL_SECTION,
    ET_UNCLOSED_ELEMENT_DECL,
    ET_UNCLOSED_ENTITY_DECL,
    ET_UNCLOSED_NOTATION_DECL,
    ET_UNCLOSED_PARAMETER_ENTITY_REF,
    ET_UNKNOWN_DECL_TYPE,
    ET_WHITESPACE_EXPECTED,

    ET_INVALID_NAMESPACE_URI,
    ET_INVALID_PREFIX,
    ET_INVALID_QUALIFIED_NAME,
    ET_NAMESPACE_URI_NOT_FOUND,
    ET_WRONG_PREFIX_MAPPING_NESTING,

    ET_ENCODING_NOT_SUPPORTED,
    ET_EXT_ENTITY_RESOURCE_NOT_FOUND,
    ET_EXT_PARAMETER_ENTITY_RESOURCE_NOT_FOUND,
    ET_INVALID_CHARACTER_IN_EXT_ENTITY,
    ET_XML_VERSION_NOT_SUPPORTED
  ];
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    <literallayout>
  ET_NAMESPACE_FATAL_ERRORS: TXmlErrorTypes = [
    ET_INVALID_NAMESPACE_URI,
    ET_INVALID_PREFIX,
    ET_INVALID_QUALIFIED_NAME,
    ET_NAMESPACE_URI_NOT_FOUND,
    ET_WRONG_PREFIX_MAPPING_NESTING
  ];
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

  <sect2>
  <title>TDomSeverity</title>
    <para>
    <literallayout>
  TDomSeverity = (DOM_SEVERITY_WARNING,
                  DOM_SEVERITY_ERROR,
                  DOM_SEVERITY_FATAL_ERROR);
    </literallayout>
    </para>

    <para>Used to specify the severity of an error.</para>
  </sect2>

  <sect2>
  <title>TDomError = class(TUtilsNoRefCount, IDomLocator)</title>
  <para>A TDomError object is used for recording errors, fatal errors, or warnings in the parsed document. A TDomError object represents exactly one parsing error. The location information provided is an approximation which can be used for displaying error messages to a user.  It is not sufficiently accurate to be used for automatic error corrections. To indicate a location between two characters, the StartCharNumber is greater than the EndCharNumber by one (StartByteNumber and EndByteNumber are exchanged as well).</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Clue: WideString (readonly) 
    <literallayout>
      A character or character sequence expected by the 
      parser at the place where the error occurred. This
      hint matches not necessarily the intention of the 
      author of an XML document.  Nevertheless it might
      help to find a fix for the error.  Sometimes no 
      clue is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Code: WideString (readonly)
    <literallayout>
      The code that caused the parsing error, or an empty
      WideString if the code is unknown.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndByteNumber: Int64 (readonly)
    <literallayout>
      The last byte of the last character of the 
      range where the error occurred, or '-1' if 
      this information is not available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndCharNumber: Int64 (readonly)
    <literallayout>
      The index of the last character of the 
      range where the error occurred, or '-1' if 
      this information is not available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndColumnNumber: Int64 (readonly)
    <literallayout>
      The column of the last character of the 
      range where the error occurred, or '-1' if 
      this information is not available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndLineNumber: Int64 (readonly)
    <literallayout>
      The line of the last character of the 
      range where the error occurred, or '-1' if this 
      information is not available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndTabsInLine: Int64 (readonly)
    <literallayout>
      The number of TAB characters (#$09) in the line 
      of the last character of the range  where the 
      error occured (including the character itself),
      or '-1' if this information is not available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RelatedDtdObject: TDtdObject (readonly)
    <literallayout>
      The TDtdObject object corresponding to this 
      location, or 'nil' if there is no TDtdObject 
      object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RelatedException: TXmlErrorType (readonly)
    <literallayout>
      The type of the error.  (Annotation: The term
      'relatedException' was pre-defined by [DOM 3].
      Its value here is a constant and not a Delphi
      exception.)
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RelatedNode: TDomNode (readonly)
    <literallayout>
      The TDomNode object corresponding to this location,
      or 'nil' if there is no TDomNode object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Severity: TDomSeverity (readonly)
    <literallayout>
      The severity of the error, either 'DOM_SEVERITY_WARNING',
      'DOM_SEVERITY_ERROR', or 'DOM_SEVERITY_FATAL_ERROR'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartByteNumber: Int64 (readonly)
    <literallayout>
      The byte offset of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not
      available.  For Example, if the first byte of 
      the range is the 42nd byte of the stream, 
      then StartByteNumber is 41.
      
      Remark: StartByteNumber and EndByteNumber 
      have identical values, if the location range 
      has a size of 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartCharNumber: Int64 (readonly)
    <literallayout>
      The index of the first character of the 
      range where the error occurred, or '-1' if 
      this information is not available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartColumnNumber: Int64 (readonly)
    <literallayout>
      The column of the first character of the 
      range where the error occurred, or '-1' if 
      this information is not available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartLineNumber: Int64 (readonly)
    <literallayout>
      The line of the first character of the 
      range where the error occurred, or '-1' if 
      this information is not available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartTabsInLine: Int64 (readonly)
    <literallayout>
      The number of TAB characters (#$09) in the line 
      of the first character of the range where the 
      error occurred (including the character itself),
      or '-1' if this information is not available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Uri: WideString (readonly)
    <literallayout>
      The URI of the document entity or of the external
      parsed entity corresponding to this location, or
      an empty WideString if none is available.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const ARelatedException: TXmlErrorType;
                       const AStartByteNumber,
                             AStartCharNumber,
                             AStartColumnNumber,
                             AStartLineNumber,
                             AStartTabsInLine,
                             AEndByteNumber,
                             AEndCharNumber,
                             AEndColumnNumber,
                             AEndLineNumber,
                             AEndTabsInLine: Int64;
                       const AUri: WideString;
                       const ARelatedDtdObject: TDtdObject;
                       const ARelatedNode: TDomNode;
                       const ACode,
                             AClue: WideString); 
    <literallayout>
      Creates a new TDomError object.

      Parameters:
      - ARelatedException
         A constant describing the cause of the error,
         fatal error or warning.
      - AStartByteNumber
         The byte offset of the first byte of the code that
         caused the parsing error, or '-1' if it is unknown.
      - AStartCharNumber
         The character index of the first character of the 
         code that caused the parsing error, or '-1' if it 
         is unknown.
      - AStartColumnNumber
         The position of the first character (in the first
         line of the code) that caused the parsing error,
         or '-1' if it is unknown.
      - AStartLineNumber
         The number of the first line of the code that
         caused the parsing error, or '-1' if it is unknown.
      - AStartTabsInLine
         The number of TAB characters (#$09) in the line 
         before the first character that caused the parsing 
         error, or '-1' if this information is not available.
      - AEndByteNumber
         The byte index of the last byte of the code that
         caused the parsing error, or '-1' if it is unknown.
      - AEndCharNumber
         The character index of the last byte of the code that
         caused the parsing error, or '-1' if it is unknown.
      - AEndColumnNumber
         The position of the last character (in the last
         line of the code) that caused the parsing error,
         or '-1' if it is unknown.
      - AEndLineNumber
         The number of the last line of the code that caused
         the parsing error (this might be identical with
         startLine), or '-1' if it is unknown.
      - AEndTabsInLine
         The number of TAB characters (#$09) in the line 
         before the last character that caused the parsing 
         error, or '-1' if this information is not available.
      - AUri
         The uri of the document entity or of the external
         parsed entity corresponding to this location, or
         an empty WideString if none is available.
      - ARelatedDtdObject
         The TDtdObject object corresponding to this error,
         or 'nil' if there is no TDtdObject object available.
      - ARelatedNode
         The TDomNode object corresponding to this error,
         or 'nil' if there is no TDomNode object available.
      - ACode
         The code that caused the parsing error or an empty
         WideString if the code is unknown.
      - AClue
         The code expected by the parser at the place where 
         the error occurred or an empty WideString if no clue 
         is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor CreateFromLocator(const ARelatedException: TXmlErrorType;
                                  const ALocation: IDomLocator;
                                  const ACode,
                                        AClue: WideString); 
    <literallayout>
      Creates a new TDomError object.

      Parameters:
      - ARelatedException
         A constant describing the cause of the error,
         fatal error or warning.
      - ALocation
         Specifies the location where the error occured or
         'nil' if the location is unknown.
      - ACode
         The code that caused the parsing error or an empty
         WideString if the code is unknown.
      - AClue
         The code expected by the parser at the place where 
         the error occurred or an empty WideString if no clue 
         is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CloneError: TDomError; virtual; abstract;
    <literallayout>
      This function returns a duplicate of this TDomError 
      object, i.e., serves as a generic copy constructor 
      for TDomError objects.  
      
      Note that after calling CloneError, an application
      is responsible to maintaine the returned TDomError
      object.

      Return Value:
         The duplicate TDomError object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>

  </para>
  </sect2>


  <sect2>
  <title>TDomErrorEvent</title>
    <para>
    <literallayout>
      TDomErrorEvent =
          procedure(    sender: TObject;
                        error: TDomError;
                    var go: Boolean)
                   of object;
    </literallayout>
    </para>

    <para>Defines the event class which is used for OnError events in TDomImplementation objects.</para>
  </sect2>


  <sect2>
  <title>TDomErrorNotifyEvent</title>
    <para>
    <literallayout>
  TDomErrorNotifyEvent = procedure(sender: TObject;
                                   error: TDomError) of object;
    </literallayout>
    </para>

    <para>Defines the event class which is used for OnError events in TXmlCustomReader (and derived class) objects.</para>
  </sect2>


  <sect2>
  <title>IDomLocator = interface</title>

  <para>A IDomLocator interface describes a location range (e.g. where an error occured) in a stream of characters.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property EndByteNumber: Int64 (readonly)
    <literallayout>
      The last byte of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not
      available.  
      
      Remark: EndByteNumber and StartByteNumber 
      have identical values, if the location range 
      has a size of 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndCharNumber: Int64 (readonly)
    <literallayout>
      The index of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndColumnNumber: Int64 (readonly)
    <literallayout>
      The column of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndLineNumber: Int64 (readonly)
    <literallayout>
      The line of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndTabsInLine: Int64 (readonly)
    <literallayout>
      The number of TAB characters (#$09) (including 
      the character itself) in the line of the last 
      character of the location range before the 
      character in the context of the character stream,
      or '-1' if this information is not available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RelatedDtdObject: TDtdObject (readonly)
    <literallayout>
      The TDtdObject object corresponding to this 
      location, or 'nil' if there is no TDtdObject 
      object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RelatedNode: TDomNode (readonly)
    <literallayout>
      The TDomNode object corresponding to this location,
      or 'nil' if there is no TDomNode object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartByteNumber: Int64 (readonly)
    <literallayout>
      The byte offset of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not
      available.  For Example, if the first byte of 
      the range is the 42nd byte of the stream, 
      then StartByteNumber is 41.
      
      Remark: StartByteNumber and EndByteNumber 
      have identical values, if the location range 
      has a size of 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartCharNumber: Int64 (readonly)
    <literallayout>
      The index of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartColumnNumber: Int64 (readonly)
    <literallayout>
      The column of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartLineNumber: Int64 (readonly)
    <literallayout>
      The line of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartTabsInLine: Int64 (readonly)
    <literallayout>
      The number of TAB characters (#$09) (including 
      the character itself) in the line of the first 
      character of the location range before the 
      character in the context of the character stream,
      or '-1' if this information is not available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Uri: WideString (readonly)
    <literallayout>
      The URI of the document entity or of the external
      parsed entity corresponding to this location, or
      an empty WideString if none is available.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>

  </para>


  <para><emphasis>Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function GetEndByteNumber: Int64; 
    <literallayout>
      Returns the last byte of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not
      available.  
      
      Remark: GetEndByteNumber and GetStartByteNumber 
      return identical values, if the location range 
      has a size of 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetEndCharNumber: Int64; 
    <literallayout>
      Returns the index of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetEndColumnNumber: Int64; 
    <literallayout>
      Returns the column of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetEndLineNumber: Int64; 
    <literallayout>
      Returns the line of the last character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetEndTabsInLine: Int64; 
    <literallayout>
      Returns number of TAB characters (#$09) (including 
      the character itself) in the line of the last 
      character of the location range before the 
      character in the context of the character stream,
      or '-1' if this information is not available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetRelatedDtdObject: TDtdObject; 
    <literallayout>
      Returns the TDtdObject object corresponding 
      to this location, or 'nil' if there is no 
      TDtdObject object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetRelatedNode: TDomNode; 
    <literallayout>
      Returns the TDomNode object corresponding to this 
      location, or 'nil' if there is no TDomNode object 
      available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetStartByteNumber: Int64; 
    <literallayout>
      Returns the byte offset of the first character 
      of the location range in the context of the 
      character stream, or '-1' if this information 
      is not available.  For Example, if the first
      byte of the range is the 42nd byte of the
      stream, then GetStartByteNumber returns 41.
      
      Remark: GetStartByteNumber and GetEndByteNumber 
      return identical values, if the location range 
      has a size of 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetStartCharNumber: Int64; 
    <literallayout>
      Returns the index of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetStartColumnNumber: Int64; 
    <literallayout>
      Returns the column of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetStartLineNumber: Int64; 
    <literallayout>
      Returns the line of the first character of the 
      location range in the context of the character
      stream, or '-1' if this information is not 
      available.

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetStartTabsInLine: Int64; 
    <literallayout>
      Returns the number of TAB characters (#$09) 
      (including the character itself) in the line of 
      the first character of the location range before 
      the character in the context of the character 
      stream, or '-1' if this information is not 
      available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetUri: WideString;     
    <literallayout>
      Returns the URI of the document entity or of the 
      external parsed entity corresponding to this location,
      or an empty WideString if none is available.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>

  </para>

  </sect2>

</sect1>


<sect1>
<title>Basic XML Input and Output Classes</title>

<para></para>

  <sect2>
  <title>Parameter Entitiy Repository Classes</title>
  
  <para>Parameter entitiy repositories are used by Tokenizers during DTD processing to store information about parameter entities.</para>
  
  <sect3>
  <title>TDomPERepository = class</title>
  <para> TDomPERepository is a collection class to store information about parameter entities during DTD processing.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OwnerReader: TXmlCustomReader (readonly)
    <literallayout>
      The TXmlCustomReader component which owns this
      TDomPERepository object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function ResolveResource(const BaseURI: WideString;
                               var PubId,
                                   SysId: WideString): TStream;
    <literallayout>
      Resolves a resource specified by an URI or a public 
      identifier via the associated OwnerReader object.
      The content of the resource is returned in a newly 
      created stream object.  

      Parameters:
      - BaseURI
         The base URI of the resource to retrieve.

      Var Parameters:
      - PubId
         When the function is called this parameter holds 
         the public identifier of the external entity to be
         resolved, or an empty WideString, if the public
         identifier is unknown.  The resource resolver
         may modify this value, e.g. to normalize public 
         identifiers or to retrieve a public identifier 
         from a system identifier.  The returned public 
         identifier, if any, may also be reported as part 
         of the location information when errors are reported.
      - SysId
         When the function is called this parameter holds 
         the system identifier of the external entity to be 
         resolved, or an empty WideString, if the system 
         identifier is unknown. The resource resolver 
         may modify this value, e.g. to normalize system 
         identifiers or to retrieve a system identifier if 
         only a public identifier was specified.
          
      Return Value:
         A newly created stream containing the contents of
         resource with the specified URI, or nil if the 
         resource could not be retrieved.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TXmlCustomReader);
    <literallayout>
      Creates a new TDomPERepository object.

      Parameters:
      - AOwner
         The TXmlCustomReader component which owns this
         TDomPERepository object.
      
      Exceptions:
      - EAccessViolation
         Raised if no owner TXmlCustomReader component
         was specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    destructor Destroy; override;
    <literallayout>
      Destroys a TDomPERepository object and all of its 
      internal TDomPEInfoObject objects.  
      Do not call 'destroy' directly, but use 'free', 
      inherited from TObject, instead.  Free tests whether 
      the TDomPERepository object has not already been 
      freed, and only then calls 'destroy'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Add(const Name,
                       Value: WideString): true; overload; 
    <literallayout>
      Adds a new internal parameter entity to the repository.
      Duplicates are being ignored.

      Parameters:
      - Name
         The name of the parameter entity to add.
      - Value
         The value of the parameter entity to add.
         
      Return Value:
         'False' if the parameter entity was not added to
         the repository, because a parameter entity with
         the same name is already contained in the
         repository.  'True' if the parameter entity was
         added to the repository.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified Name or Value contains an 
         illegal character.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Add(const Name,
                       BaseUri,
                       PubId,
                       SysId: WideString): Boolean; overload; 
    <literallayout>
      Adds a new external parameter entity to the repository.
      Duplicates are being ignored.

      Parameters:
      - Name
         The name of the parameter entity to add.
      - BaseUri
         The base URI of the parameter entity to add.
      - PubId
         The public identifier of the parameter entity to add.
      - SysId
         The system identifier of the parameter entity to add.

      Return Value:
         'False' if the parameter entity was not added to
         the repository, because a parameter entity with
         the same name is already contained in the
         repository.  'True' if the parameter entity was
         added to the repository.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified name, public identifier or
         system identifier contains an illegal character.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Clear; virtual;
    <literallayout>
      Empties the repository.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function ResolvePE(const Name: WideString;
                       const AcceptExtEntity: Boolean;
                         out Value,
                             PubId,
                             SysId: WideString): TXmlErrorType; virtual;
    <literallayout>
      Resolves the value, public identifier and the system
      identifier of a specified parameter entity from the 
      repository.

      Parameters:
      - Name
         The name of the parameter entity to retrieve.
      - AcceptExtEntity
         Indicates whether an external parameter entity
         is acceptable.

      Out Parameters:
      - Value
         The value of the specified parameter entity or
         an empty WideString if no such parameter entity 
         was found.
      - PubId
         The public identifier, if any, of the specified 
         parameter entity or an empty WideString if no 
         such parameter entity was found.
      - SysId
         The system identifier, if any, of the specified
         parameter entity or an empty WideString if no 
         such parameter entity was found.

      Return Value:
         ET_NONE, if the parameter entity had been
         successfully resolved or an error code if not. 
         If the AcceptExtEntity parameter is False and an
         attempt is made to resolve an external parameter 
         entity, ET_EXT_ENTITY_RESOURCE_NOT_FOUND is 
         returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  <sect3>
  <title>TDomPEInfoObject = class( TDomCustomNode)</title>

  <para> TDomPEInfoObject is internally used in TDomPERepository objects to store information about a single parameter entity.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property BaseUri: WideString (readonly)
    <literallayout>
      The base URI, if any, of the parameter entity if 
      it is external, or an empty WideString otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EntityType: TDomEntityType (readonly)
    <literallayout>
      'etExternal_Entity' if the parameter entity is
      external, 'etInternal_Entity' if it is internal.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property LiteralValue: WideString (readonly)
    <literallayout>
      The literal value of the parameter entity. For an
      external parameter entity an application must first 
      (successfully) call the Update procedure to resolve 
      the literal value.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerRepository: TDomPERepository (readonly)
    <literallayout>
      The TDomPERepository object which owns this
      TDomPEInfoObject object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The publid identifier, if any, of the parameter 
      entity if it is external, or an empty WideString 
      otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly)
    <literallayout>
      The system identifier, if any, of the parameter 
      entity if it is external, or an empty WideString 
      otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para> 
    property UpdateAttempted: Boolean (readonly)
    <literallayout>
      For an external parsed entity, returns True, if
      the Update function had been called at least once
      before (successfully or not), otherwise False is
      returned.  For an internal parsed entity 
      UpdateAttempted always returns True.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para> 
    property UpdateError: TXmlErrorType (readonly)
    <literallayout>
      For an external parsed entity, returns the type 
      of error, if any, that occurred during the last 
      call of the Update procedure.  If no error 
      occurred or if the Update function had never 
      been used, the UpdateError property returns
      ET_NONE.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TDomPERepository;
                       const EntityName,
                             LitValue: WideString);
    <literallayout>
      Creates a new TDomPEInfoObject object
      representing an internal parameter entity.

      Parameters:
      - AOwner
         The TDomPERepository object which owns this
         TDomPEInfoObject object.
      - EntityName
         The name of the parameter entity to represent.
      - LitValue
         The literal value of the parameter entity to 
         represent.
         
      Exceptions:
      - EAccessViolation
         Raised if the specified AOwner is nil.
      - EInvalid_Character_Err
         Raised if the specified EntityName or LitValue
         contains an illegal character.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor CreateExtParsed(const AOwner: TDomPERepository;
                                const EntityName,
                                      ABaseUri,
                                      PubId,
                                      SysId: WideString);
    <literallayout>
      Creates a new TDomPEInfoObject object
      representing an external parameter entity.

      Parameters:
      - aOwner
         The TDomPERepository object which owns this
         TDomPEInfoObject object.
      - entityName
         The name of the parameter entity to represent.
      - baseUri
         The base URI of the parameter entity to represent.
      - pubId
         The public identifier of the parameter entity to arepresentd.
      - sysId
         The system identifier of the parameter entity to represent.

      Exceptions:
      - EAccessViolation
         Raised if the specified 'aOwner' is nil.
      - EInvalid_Character_Err
         Raised if the specified name, public identifier or
         system identifier contains an illegal character.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function EntityURI: WideString;
    <literallayout>
      Calculates the absolute system identifier by combining
      the base URI and the system identifier.

      Return Value:
         The absolute system identifier of the represented
         external parameter entity, or an empty WideString
         if this information is not available or the 
         represented parameter entity is internal.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Update; 
    <literallayout>
      Call Update to update the literal value of an external 
      parameter entity.  Calling Update on a TDomPEInfoObject 
      object representing an internal parameter entity has no
      effect, because the literal value already was specified
      in its constructor.

      If an error occurred while updating the literal value 
      of an external parameter entity, the UpdateError 
      property contains the respective error code.

      Exceptions:
      - EParserException
         Raised if no TDomImplementation component is
         associated with this TDomPEInfoObject 
         object's repository, or if an external parameter 
         entity is unresolvable, has a malformed text 
         declaration or uses an encoding which is not 
         supported by this XDOM implementation.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  </sect2>


  <sect2>
  <title>Input and Output Source Classes</title>

  <para>The classes described in this section are intended for buffered input and output of XML data. Buffering is required for performance reasons: The Tokenizers are analyzing an XML source character by character. Without buffering single bytes would be read from or written to a stream, which tends to be slow, especially on file streams. Buffered reading means that an intermediate object reads ahead larger sequences of bytes from a stream into memory, which is comparatively fast in contrast to reading each byte individually. Likewise, buffered writing means that an intermediate objects caches bytes to be written into a stream in memory until the sequence is large enough to be efficiently written to a stream.</para>


  <sect3>
  <title>TXmlSimpleInputSource = class(TUtilsUCS4Reader)</title>

  <para>This class encapsulates information about an entity's input source in a single object.  The entity must not start with an XML or text declaration.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Bof: Boolean (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      True if the input source is at its start position, 
      i.e. the value of the CurrentCodePoint 
      property is $98 (START OF STRING); False
      otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property BufSize: Integer (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      The size of the buffer as specified in the
      constructor.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ByteOrderMarkSize: Cardinal (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      The number of bytes used to encode a byte order
      mark. If no byte order mark was used, 0 is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ByteOrderMarkType: TUnicodeCodecClass (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns the codec class corresponding to the byte
      order mark of the stream, or nil of the stream 
      has no byte order mark. The following list shows
      the mapping between byte order marks and codec
      classes. (The notation ## is used to denote any 
      byte value except that two consecutive ##s cannot
      be both 00.):

      nil
        The input stream has no byte order mark.
      TUCS4BECodec
        The input stream has a UCS-4BE byte order mark 
        ($00 $00 $FE $FF). The octet order is 1234.
      TUCS4LECodec
        The input stream has a UCS-4LE byte order mark 
        ($FE $FF $00 $00). The octet order is 4321.
      TUCS4_2143Codec
        The input stream has a UCS-4 byte order mark 
        with an unusal octet order ($00 $00 $FF $FE). 
        The octet order is 2143.
      TUCS4_3412Codec
        The input stream has a UCS-4 byte order mark 
        with an unusal octet order ($FF $FE $00 $00). 
        The octet order is 3412.
      TUTF16BECodec
        The input stream has a UTF-16BE byte order mark 
        ($FE $FF ## ##).
      TUTF16LECodec
        The input stream has a UTF-16LE byte order mark 
        ($FF $FE ## ##).
      TUTF8Codec
        The input stream has a UTF-8 byte order mark 
        ($EF $BB $BF).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CodecClass: TUnicodeCodecClass (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns the codec class corresponding to the
      character encoding scheme of the input stream. 
      The codec class was specified in the contructor 
      or autodetected with the help of the input 
      stream's byte order mark, if any, or the
      encoding value of an XML or text declaration,if
      any, or set to the default TUTF8Codec class, if 
      non of the former applied.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CurrentCharInfo: TUtilsUCS4CharData (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns a record structure that contains the 
      Unicode codepoint and location information of 
      the current character.
      
      TUtilsUCS4CharData is a record structure
      introduced in the ParserUtils unit.  It 
      contains the following fields:
      
      - ByteCount: Int64
         The byte index of the last byte of the 
         character in the context of the stream.
      - CharCount: Int64
         The character index of the character in 
         the context of the stream.
      - CharsInLine: Int64
         The number of characters in the line 
         before the character (including the
         character itself) in the context of the
         stream.
      - CodePoint: UCS4Char
         The code point of the character.  
         Immediately after creating a 
         TXmlSimpleInputSource object the value $98 
         (START OF STRING) is returned. When the 
         end of the input source is reached the 
         value $9C (STRING TERMINATOR) is 
         returned.
      - Line: Int64
         The line number of the character in the
         context of the stream.
      - Size: Cardinal
         The number of bytes used to encode the
         character.
      - TabsInLine: Int64
         The number of TAB characters (#$09) in the
         line before the character (including the 
         character itself) in the context of the 
         stream.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Eof: Boolean (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      'True' if the end of the input stream was
      reached, i.e. the value of the CurrentCodePoint 
      property is $9C (STRING TERMINATOR); 'False'
      otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property InputEncoding: WideString (readonly) 
    <literallayout>
      The name of the input encoding (corresponding
      to the input source's codec class).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextCharInfo: TUtilsUCS4CharData (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns a record structure that contains the 
      Unicode codepoint and location information of 
      the next character.
      
      TUtilsUCS4CharData is a record structure
      introduced in the ParserUtils unit.  It 
      contains the following fields:
      
      - ByteCount: Int64
         The byte index of the last byte of the 
         character in the context of the stream.
      - CharCount: Int64
         The character index of the character in 
         the context of the stream.
      - CharsInLine: Int64
         The number of characters in the line 
         before the character (including the
         character itself) in the context of the
         stream.
      - CodePoint: UCS4Char
         The code point of the character.  
         If the current character is of code point
         $9C (STRING TERMINATOR) or if it is the 
         last character of the input stream, the 
         value $9C (STRING TERMINATOR) is returned.
      - Line: Int64
         The line number of the character in the
         context of the stream.
      - Size: Cardinal
         The number of bytes used to encode the
         character.
      - TabsInLine: Int64
         The number of TAB characters (#$09) in the
         line before the character (including the 
         character itself) in the context of the 
         stream.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PreviousCharInfo: TUtilsUCS4CharData (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns a record structure that contains the 
      Unicode codepoint and location information of 
      the previous character.
      
      TUtilsUCS4CharData is a record structure
      introduced in the ParserUtils unit.  It 
      contains the following fields:
      
      - ByteCount: Int64
         The byte index of the last byte of the 
         character in the context of the stream.
      - CharCount: Int64
         The character index of the character in 
         the context of the stream.
      - CharsInLine: Int64
         The number of characters in the line 
         before the character (including the
         character itself) in the context of the
         stream.
      - CodePoint: UCS4Char
         The code point of the character.  
         Immediately after creating a 
         TXmlSimpleInputSource object or if the current 
         character is positioned at the first 
         character of the input source or if the 
         input source is empty the value $98 
         (START OF STRING) is returned
      - Line: Int64
         The line number of the character in the
         context of the stream.
      - Size: Cardinal
         The number of bytes used to encode the
         character.
      - TabsInLine: Int64
         The number of TAB characters (#$09) in the
         line before the character (including the 
         character itself) in the context of the 
         stream.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier of the input source, or an
      empty WideString if none is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly)
    <literallayout>
      The system identifier of the input source, or an
      empty WideString if none is available.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const Stream: TStream;
                       const APublicId,
                             ASystemId: WideString;
                       const ABufSize: Integer;
                       const ACodecClass: TUnicodeCodecClass;
                       const InitialByteCount,
                             InitialCharCount,
                             InitialCharsInLine,
                             InitialTabsInLine,
                             InitialLine: Int64); overload;
    <literallayout>
      Creates a new TXmlSimpleInputSource object from a 
      stream.  If a byte order mark (BOM) is found the 
      position of the stream is set immediately behind the 
      BOM.  If no BOM is found the postition is set to the 
      first byte of the stream.

      Parameters:
      - Stream
         A stream that contains the text of the input
         source.
      - APublicId
         The public identifier of the input source.
      - ASystemId
         The system identifier of the input source.
      - ABufSize
         The size of the buffer.  The value should be
         a multiplicity of 1024.
      - ACodecClass
         The codec class for the input stream if known, or 
         nil if unkown. If nil, the effective codec class 
         is determined with the help of the input stream's 
         byte order mark or set to the default TUTF8Codec 
         class, if no byte order mark was found.
      - InitialByteCount
         The byte offset of the first character of the
         stream in an embeding XML document, or '0' if 
         the stream is not embedded.
      - InitialCharCount
         The character index offset for the first character 
         of the stream in an embeding XML document (i.e. 
         the index of the first character minus 1), or '0' 
         if the stream is not embedded.
      - InitialCharsInLine
         The number of characters in the line before the first 
         character of the stream in an embeding XML document,
         or '0' if the stream is not embedded.
      - InitialTabsInLine
         The number of TAB characters (#0009) in the line 
         before the first character of the stream in an 
         embeding XML document, or '0' if the stream is not 
         embedded.
      - InitialLine
         The line of the first character of the stream in 
         an embeding XML document, or '1' if the stream is 
         not embedded.

      Exceptions:
      - EConvertError
         Raised if a codec class was specified which does 
         not match the byte order mark (if any) of the input
         stream, or raised if the source stream's first
         character (if any) cannot be converted from the 
         specified encoding to a UCS-4 code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor Create(const S: string;
                       const APublicId,
                             ASystemId: WideString;
                       const ABufSize: Integer;
                       const ACodecClass: TUnicodeCodecClass;
                       const InitialByteCount,
                             InitialCharCount,
                             InitialCharsInLine,
                             InitialTabsInLine,
                             InitialLine: Int64); overload;
    <literallayout>
      Creates a new TXmlSimpleInputSource object from a string.

      Parameters:
      - S
         A string that contains the text of the input
         source.
      - APublicId
         The public identifier of the input source.
      - ASystemId
         The system identifier of the input source.
      - ABufSize
         The size of the buffer.  The value should be
         a multiplicity of 1024.
      - ACodecClass
         The codec class for the input string if known, or 
         nil if unkown. If nil, the effective codec class 
         is determined with the help of the input string's 
         byte order mark or set to the default TUTF8Codec 
         class, if no byte order mark was found.
      - InitialByteCount
         The byte offset of the first character of the
         string in an embeding XML document, or '0' if 
         the string is not embedded.
      - InitialCharCount
         The character index offset for the first character 
         of the string in an embeding XML document (i.e. 
         the index of the first character minus 1), or '0' 
         if the string is not embedded.
      - InitialCharsInLine
         The number of characters in the line before the first 
         character of the string in an embeding XML document,
         or '0' if the string is not embedded.
      - InitialTabsInLine
         The number of TAB characters (#0009) in the line 
         before the first character of the string in an 
         embeding XML document, or '0' if the string is not 
         embedded.
      - InitialLine
         The line of the first character of the string in 
         an embeding XML document, or '1' if the string is 
         not embedded.

      Exceptions:
      - EConvertError
         Raised if a codec class was specified which does 
         not match the byte order mark (if any) of the input
         string, or raised if the input string's first
         character (if any) cannot be converted from the 
         specified encoding to a UCS-4 code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor Create(const S: WideString;
                       const APublicId,
                             ASystemId: WideString;
                       const ABufSize: Integer;
                       const InitialByteCount,
                             InitialCharCount,
                             InitialCharsInLine,
                             InitialTabsInLine,
                             InitialLine: Int64); overload;
    <literallayout>
      Creates a new TXmlSimpleInputSource object from a 
      UTF-16LE encoded WideString.

      Parameters:
      - S
         A WideString that contains the text of the input
         source.
      - APublicId
         The public identifier of the input source.
      - ASystemId
         The system identifier of the input source.
      - ABufSize
         The size of the buffer.  The value should be
         a multiplicity of 1024.
      - InitialByteCount
         The byte offset of the first character of the
         WideString in an embeding XML document, or '0' if 
         the WideString is not embedded.
      - InitialCharCount
         The character index offset for the first character 
         of the WideString in an embeding XML document (i.e. 
         the index of the first character minus 1), or '0' 
         if the WideString is not embedded.
      - InitialCharsInLine
         The number of characters in the line before the first 
         character of the WideString in an embeding XML document,
         or '0' if the WideString is not embedded.
      - InitialTabsInLine
         The number of TAB characters (#0009) in the line 
         before the first character of the WideString in an 
         embeding XML document, or '0' if the WideString is not 
         embedded.
      - InitialLine
         The line of the first character of the WideString in 
         an embeding XML document, or '1' if the WideString is 
         not embedded.

      Exceptions:
      - EConvertError
         Raised if S starts with a UTF-16BE byte order mark 
         or if its first character (if any) is not correctly
         encoded in UTF-16LE.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Match(Ucs2Str: WideString): Boolean; virtual; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Advances the current code point as far as the 
      following content of the input stream matches 
      the specified WideString. After calling Match,
      if the specified WideString completely matched
      the following content of the input stream, the
      position of the current code point is that of
      the last matched character. If the following 
      content of the input stream did not completely
      match the specified WideString, the position of
      the current code point after calling Match is 
      that of the first mismatched character.

      Hint: If the input stream contains a character 
      of code point $9C (STRING TERMINATOR) the 
      TXmlSimpleInputSource object cannot advance the current 
      character beyond this character. The Match 
      function may nevertheless test for STRING 
      TERMINATOR which must appear at the end of the
      specified WideString in order to get a chance 
      for a positive result.

      Parameters:
      - Ucs2Str
         A UCS-2 encoded WideString to be matched.

      Return Value:
         'True' if the specified WideString completely
         matched the following content of the input 
         stream, 'False' otherwise.

      Exceptions:
      - EConvertError
         Raised if the next character(s) of the source 
         stream cannot be converted (according to the 
         current character encoding scheme) to a UCS-4 
         code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Advances the current character to the next character
      (if any) of the input stream. If the code point of
      the current character is $9C (STRING TERMINATOR)
      calling Next has no effect. If the end of the input
      stream is reached the code point of the current 
      character is set to $9C (STRING TERMINATOR).

      Hint: If the input stream contains a character of 
      code point $9C (STRING TERMINATOR) the 
      TXmlSimpleInputSource object cannot advance the current 
      character beyond this character. Note also that
      if the value of the current character is $9C the
      code point returned by the NextChar property is 
      always $9C no matter whether the end of the input 
      stream was reached or not.

      Exceptions:
      - EConvertError
         Raised if the next character of the source 
         stream cannot be converted (according to the 
         current character encoding scheme) to a UCS-4 
         code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Reset; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Resets the TXmlSimpleInputSource object to its initial 
      position.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure SkipNext(Ucs2Str: WideString); virtual; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Advances the current character to the next
      character (if any) of the input stream while 
      skipping any UCS-2 character contained in 
      ucs2Str. If the code point of the current 
      character is $9C (STRING TERMINATOR) calling 
      SkipNext has no effect. If the end of the 
      input stream is reached the code point of 
      the current character is set to $9C (STRING
      TERMINATOR).

      Hint: If the input stream contains a character
      of code point $9C (STRING TERMINATOR) the 
      TXmlSimpleInputSource object cannot advance the 
      current character beyond this character. 
      Including $9C in the ucs2Str parameter has no 
      effect. Note also that if the value of the 
      current character is $9C the code point 
      returned by the NextChar property is always 
      $9C no matter whether the end of the input 
      stream was reached or not.

      Parameters:
      - Ucs2Str
         A UCS-2 encoded WideString containing all 
         the characters to be skipped. Repeating a 
         character should be avoided if performance 
         is important. Including STRING TERMINATOR 
         ($9C) in the list of characters to be 
         skipped has no effect, i.e. STRING 
         TERMINATOR appearing in the input stream
         will always terminates SkipNext.

      Exceptions:
      - EConvertError
         Raised if the next character of the source
         stream cannot be converted (according to 
         the current character encoding scheme) to 
         a UCS-4 code point.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect3>


  <sect3>
  <title>TXmlInputSource = class(TXmlSimpleInputSource)</title>

  <para>This class encapsulates information about an entity's input source in a single object.  The entity may start with an XML or text declaration.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Bof: Boolean (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      True if the input source is at its start
      position, i.e. the value of the CurrentCodePoint 
      property is $98 (START OF STRING); False
      otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property BufSize: Integer (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      The size of the buffer as specified in the
      constructor.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ByteOrderMarkSize: Cardinal (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      The number of bytes used to encode a byte order
      mark. If no byte order mark was used, 0 is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ByteOrderMarkType: TUnicodeCodecClass (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns the codec class corresponding to the byte
      order mark of the stream, or nil of the stream 
      has no byte order mark. The following list shows
      the mapping between byte order marks and codec
      classes. (The notation ## is used to denote any 
      byte value except that two consecutive ##s cannot
      be both 00.):

      nil
        The input stream has no byte order mark.
      TUCS4BECodec
        The input stream has a UCS-4BE byte order mark 
        ($00 $00 $FE $FF). The octet order is 1234.
      TUCS4LECodec
        The input stream has a UCS-4LE byte order mark 
        ($FE $FF $00 $00). The octet order is 4321.
      TUCS4_2143Codec
        The input stream has a UCS-4 byte order mark 
        with an unusal octet order ($00 $00 $FF $FE). 
        The octet order is 2143.
      TUCS4_3412Codec
        The input stream has a UCS-4 byte order mark 
        with an unusal octet order ($FF $FE $00 $00). 
        The octet order is 3412.
      TUTF16BECodec
        The input stream has a UTF-16BE byte order mark 
        ($FE $FF ## ##).
      TUTF16LECodec
        The input stream has a UTF-16LE byte order mark 
        ($FF $FE ## ##).
      TUTF8Codec
        The input stream has a UTF-8 byte order mark 
        ($EF $BB $BF).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CodecClass: TUnicodeCodecClass (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns the codec class corresponding to the
      character encoding scheme of the input stream. 
      The codec class was specified in the contructor 
      or autodetected with the help of the input 
      stream's byte order mark or the encoding value 
      of an XML or text declaration or set to the 
      default TUTF8Codec class, if none of the former 
      applied.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CurrentCharInfo: TUtilsUCS4CharData (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns a record structure that contains the 
      Unicode codepoint and location information of 
      the current character.
      
      TUtilsUCS4CharData is a record structure
      introduced in the ParserUtils unit.  It 
      contains the following fields:
      
      - ByteCount: Int64
         The byte index of the last byte of the 
         character in the context of the stream.
      - CharCount: Int64
         The character index of the character in 
         the context of the stream.
      - CharsInLine: Int64
         The number of characters in the line 
         before the character (including the
         character itself) in the context of the
         stream.
      - CodePoint: UCS4Char
         The code point of the character.  
         Immediately after creating a 
         TXmlInputSource object the value $98 
         (START OF STRING) is returned. When the 
         end of the input source is reached the 
         value $9C (STRING TERMINATOR) is 
         returned.
      - Line: Int64
         The line number of the character in the
         context of the stream.
      - Size: Cardinal
         The number of bytes used to encode the
         character.
      - TabsInLine: Int64
         The number of TAB characters (#$09) in the
         line before the character (including the 
         character itself) in the context of the 
         stream.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DeclType: TDomXMLDeclType (readonly)
    <literallayout>
      The declaration type of the input source.  This
      is one of the following values:

      DT_XML_DECLARATION
        The input source starts with an XML declaration.
      DT_TEXT_DECLARATION
        The input source starts with a text declaration.
      DT_XML_OR_TEXT_DECLARATION
        The declaration at the beginning of the input
        source is likewise a valid XML declarations
        and a valid text declarations.
      DT_UNSPECIFIED
        There is neither an XML declaration nor a text
        declaration at the beginning of the input source.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Eof: Boolean (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      'True' if the end of the input stream was
      reached, i.e. the value of the CurrentCodePoint 
      property is $9C (STRING TERMINATOR); 'False'
      otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property HasMalformedDecl: Boolean (readonly)
    <literallayout>
      Returns 'True' if an error occured while trying
      to evaluate an XML declaration or text declaration.
      This is caused either by a malformed declaration or
      a malformed byte order mark preceding any possible
      declaration.  Returns 'False' if no error occured
      while analyzing a possible XML declaration or text
      declaration.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property InputEncoding: WideString (readonly) (inherited from TXmlSimpleInputSource) 
    <literallayout>
      The name of the input encoding (corresponding
      to the input source's codec class).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextCharInfo: TUtilsUCS4CharData (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns a record structure that contains the 
      Unicode codepoint and location information of 
      the next character.
      
      TUtilsUCS4CharData is a record structure
      introduced in the ParserUtils unit.  It 
      contains the following fields:
      
      - ByteCount: Int64
         The byte index of the last byte of the 
         character in the context of the stream.
      - CharCount: Int64
         The character index of the character in 
         the context of the stream.
      - CharsInLine: Int64
         The number of characters in the line 
         before the character (including the
         character itself) in the context of the
         stream.
      - CodePoint: UCS4Char
         The code point of the character.  
         If the current character is of code point
         $9C (STRING TERMINATOR) or if it is the 
         last character of the input source, the 
         value $9C (STRING TERMINATOR) is returned.
      - Line: Int64
         The line number of the character in the
         context of the stream.
      - Size: Cardinal
         The number of bytes used to encode the
         character.
      - TabsInLine: Int64
         The number of TAB characters (#$09) in the
         line before the character (including the 
         character itself) in the context of the 
         stream.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PreviousCharInfo: TUtilsUCS4CharData (readonly) (inherited from TUtilsUCS4Reader)
    <literallayout>
      Returns a record structure that contains the 
      Unicode codepoint and location information of 
      the previous character.
      
      TUtilsUCS4CharData is a record structure
      introduced in the ParserUtils unit.  It 
      contains the following fields:
      
      - ByteCount: Int64
         The byte index of the last byte of the 
         character in the context of the stream.
      - CharCount: Int64
         The character index of the character in 
         the context of the stream.
      - CharsInLine: Int64
         The number of characters in the line 
         before the character (including the
         character itself) in the context of the
         stream.
      - CodePoint: UCS4Char
         The code point of the character.  
         Immediately after creating a 
         TXmlInputSource object or if the current 
         character is positioned at the first 
         character of the input source or if the 
         input source is empty the value $98 
         (START OF STRING) is returned
      - Line: Int64
         The line number of the character in the
         context of the stream.
      - Size: Cardinal
         The number of bytes used to encode the
         character.
      - TabsInLine: Int64
         The number of TAB characters (#$09) in the
         line before the character (including the 
         character itself) in the context of the 
         stream.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly) (inherited from TXmlSimpleInputSource)
    <literallayout>
      The public identifier of the input source, or an
      empty WideString if none is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly) (inherited from TXmlSimpleInputSource)
    <literallayout>
      The system identifier of the input source, or an
      empty WideString if none is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property XmlEncoding: WideString (readonly)
    <literallayout>
      The value of the encoding declaration, if the 
      associated input source starts with an XML or
      text declaration.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property XmlStandalone: TDomStandalone (readonly)
    <literallayout>
      The value of the standalone document declaration,
      if the associated input source starts with an XML 
      declaration.  This is one of the following values:

      STANDALONE_YES
        The input source starts with an XML declaration
        containing a standalone document declaration of
        value 'yes'.
      STANDALONE_NO
        The input source starts with an XML declaration
        containing a standalone document declaration of
        value 'no'.
      STANDALONE_UNSPECIFIED
        The input source starts with an XML declaration
        containing no standalone document declaration, or
        the input source starts with a text declaration
        or there was no declaration found at the
        beginning of the input source.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property XmlVersion: WideString (readonly)
    <literallayout>
      The value of the version number, if the 
      associated input source starts with an XML or
      text declaration.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const Stream: TStream;
                       const APublicId,
                             ASystemId: WideString;
                       const ABufSize: Integer;
                       const ACodecClass: TUnicodeCodecClass;
                       const InclDecl: Boolean;
                       const InitialByteCount,
                             InitialCharCount,
                             InitialCharsInLine,
                             InitialTabsInLine,
                             InitialLine: Int64); overload;
    <literallayout>
      Creates a new TXmlInputSource object from a stream.  The 
      position of the Stream is set immediately behind an XML
      declaration or text declaration.  If no such declaration
      but a byte order mark (BOM) is found the position is set
      immediately behind the BOM.  If also no BOM is found
      the postition is set to the first byte of the stream.

      Parameters:
      - Stream
         A stream that contains the text of the input
         source.
      - APublicId
         The public identifier of the input source.
      - ASystemId
         The system identifier of the input source.
      - ABufSize
         The size of the buffer.  The value should be
         a multiplicity of 1024.
      - ACodecClass
         The codec class for the input stream if known, or
         nil if unkown. If nil, the effective codec class is 
         determined with the help of the input stream's 
         byte order mark or the encoding value of an XML or 
         text declaration or set to the default TUTF8Codec 
         class, if none of the former applied.
      - InclDecl
         If True, location information includes any XML
         or text declaration at the beginning of the 
         associated stream.  If False, the location 
         information is calculated as if no XML or text
         declaration had been found.
      - InitialByteCount
         The byte offset of the first character of the
         stream in an embeding XML document, or '0' if 
         the stream is not embedded.
      - InitialCharCount
         The character index offset for the first character 
         of the stream in an embeding XML document (i.e. 
         the index of the first character minus 1), or '0' 
         if the stream is not embedded.
      - InitialCharsInLine
         The number of characters in the line before the first 
         character of the stream in an embeding XML document,
         or '0' if the stream is not embedded.
      - InitialTabsInLine
         The number of TAB characters (#0009) in the line 
         before the first character of the stream in an 
         embeding XML document, or '0' if the stream is not 
         embedded.
      - InitialLine
         The line of the first character of the stream in 
         an embeding XML document, or '1' if the stream is 
         not embedded.

      Exceptions:
      - ENot_Supported_Err
         Raised if the input stream contains an XML 
         declaration or text declaration which specifies
         an encoding which is not supported.
      - EConvertError
         Raised if an encoding was specified (as value of 
         the ACodecClass parameter or in the XML declaration 
         or text declaration) which does not match the byte 
         order mark (if any) of the input stream, or raised 
         if the source stream's first character (if any) 
         cannot be converted from the specified encoding to 
         a UCS-4 code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor Create(const S: string;
                       const APublicId,
                             ASystemId: WideString;
                       const ABufSize: Integer;
                       const ACodecClass: TUnicodeCodecClass;
                       const InclDecl: Boolean;
                       const InitialByteCount,
                             InitialCharCount,
                             InitialCharsInLine,
                             InitialTabsInLine,
                             InitialLine: Int64); overload;
    <literallayout>
      Creates a new TXmlInputSource object from a string.

      Parameters:
      - S
         A string that contains the text of the input
         source.
      - APublicId
         The public identifier of the input source.
      - ASystemId
         The system identifier of the input source.
      - ABufSize
         The size of the buffer.  The value should be
         a multiplicity of 1024.
      - ACodecClass
         The codec class for the input string if known, or
         nil if unkown. If nil, the effective codec class is 
         determined with the help of the input string's 
         byte order mark or the encoding value of an XML or 
         text declaration or set to the default TUTF8Codec 
         class, if none of the former applied.
      - InclDecl
         If True, location information includes any XML
         or text declaration at the beginning of the 
         string.  If False, the location information is 
         calculated as if no XML or text declaration had 
         been found.
      - InitialByteCount
         The byte offset of the first character of the
         string in an embeding XML document, or '0' if 
         the string is not embedded.
      - InitialCharCount
         The character index offset for the first character 
         of the string in an embeding XML document (i.e. 
         the index of the first character minus 1), or '0' 
         if the string is not embedded.
      - InitialCharsInLine
         The number of characters in the line before the first 
         character of the string in an embeding XML document,
         or '0' if the string is not embedded.
      - InitialTabsInLine
         The number of TAB characters (#0009) in the line 
         before the first character of the string in an 
         embeding XML document, or '0' if the string is not 
         embedded.
      - InitialLine
         The line of the first character of the string in 
         an embeding XML document, or '1' if the string is 
         not embedded.

      Exceptions:
      - ENot_Supported_Err
         Raised if the input string contains an XML 
         declaration or text declaration which specifies
         an encoding which is not supported.
      - EConvertError
         Raised if an encoding was specified (as value of 
         the ACodecClass parameter or in the XML declaration 
         or text declaration) which does not match the byte 
         order mark (if any) of the input string, or raised 
         if the input string's first character (if any) 
         cannot be converted from the specified encoding to 
         a UCS-4 code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor Create(const S: WideString;
                       const APublicId,
                             ASystemId: WideString;
                       const ABufSize: Integer;
                       const InclDecl: Boolean;
                       const InitialByteCount,
                             InitialCharCount,
                             InitialCharsInLine,
                             InitialTabsInLine,
                             InitialLine: Int64); overload;
    <literallayout>
      Creates a new TXmlInputSource object from a UTF-16LE 
      encoded WideString.

      Parameters:
      - S
         A WideString that contains the text of the input
         source.
      - APublicId
         The public identifier of the input source.
      - ASystemId
         The system identifier of the input source.
      - ABufSize
         The size of the buffer.  The value should be
         a multiplicity of 1024.
      - InclDecl
         If True, location information includes any XML
         or text declaration at the beginning of the 
         associated stream.  If False, the location 
         information is calculated as if no XML or text
         declaration had been found.
      - InitialByteCount
         The byte offset of the first character of the
         WideString in an embeding XML document, or '0' if 
         the WideString is not embedded.
      - InitialCharCount
         The character index offset for the first character 
         of the WideString in an embeding XML document (i.e. 
         the index of the first character minus 1), or '0' 
         if the WideString is not embedded.
      - InitialCharsInLine
         The number of characters in the line before the first 
         character of the WideString in an embeding XML document,
         or '0' if the WideString is not embedded.
      - InitialTabsInLine
         The number of TAB characters (#0009) in the line 
         before the first character of the WideString in an 
         embeding XML document, or '0' if the WideString is not 
         embedded.
      - InitialLine
         The line of the first character of the WideString in 
         an embeding XML document, or '1' if the WideString is 
         not embedded.

      Exceptions:
      - EConvertError
         Raised if S starts with a UTF-16BE byte order mark 
         or if its first character (if any) is not correctly
         encoded in UTF-16LE.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Match(Ucs2Str: WideString): Boolean; virtual; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Advances the current code point as far as the 
      following content of the input stream matches 
      the specified WideString. After calling Match,
      if the specified WideString completely matched
      the following content of the input stream, the
      position of the current code point is that of
      the last matched character. If the following 
      content of the input stream did not completely
      match the specified WideString, the position of
      the current code point after calling Match is 
      that of the first mismatched character.

      Hint: If the input stream contains a character 
      of code point $9C (STRING TERMINATOR) the 
      TXmlInputSource object cannot advance the 
      current character beyond this character. The
      Match function may nevertheless test for 
      STRING TERMINATOR which must appear at the end 
      of the specified WideString in order to get a 
      chance for a positive result.

      Parameters:
      - Ucs2Str
         A UCS-2 encoded WideString to be matched.

      Return Value:
         'True' if the specified WideString completely
         matched the following content of the input 
         stream, 'False' otherwise.

      Exceptions:
      - EConvertError
         Raised if the next character(s) of the source 
         stream cannot be converted (according to the 
         current character encoding scheme) to a UCS-4 
         code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Advances the current character to the next character
      (if any) of the input stream. If the code point of
      the current character is $9C (STRING TERMINATOR)
      calling Next has no effect. If the end of the input
      stream is reached the code point of the current 
      character is set to $9C (STRING TERMINATOR).

      Hint: If the input stream contains a character of 
      code point $9C (STRING TERMINATOR) the 
      TXmlInputSource object cannot advance the current 
      character beyond this character. Note also that
      if the value of the current character is $9C the
      code point returned by the NextChar property is 
      always $9C no matter whether the end of the input 
      stream was reached or not.

      Exceptions:
      - EConvertError
         Raised if the next character of the source 
         stream cannot be converted (according to the 
         current character encoding scheme) to a UCS-4 
         code point.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Reset; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Resets the TXmlInputSource object to its initial 
      position.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure SkipNext(Ucs2Str: WideString); virtual; (inherited from TUtilsUCS4Reader)
    <literallayout>
      Advances the current character to the next
      character (if any) of the input stream while 
      skipping any UCS-2 character contained in 
      ucs2Str. If the code point of the current 
      character is $9C (STRING TERMINATOR) calling 
      SkipNext has no effect. If the end of the 
      input stream is reached the code point of 
      the current character is set to $9C (STRING
      TERMINATOR).

      Hint: If the input stream contains a character
      of code point $9C (STRING TERMINATOR) the 
      TXmlInputSource object cannot advance the 
      current character beyond this character. 
      Including $9C in the ucs2Str parameter has no 
      effect. Note also that if the value of the 
      current character is $9C the code point 
      returned by the NextChar property is always 
      $9C no matter whether the end of the input 
      stream was reached or not.

      Parameters:
      - Ucs2Str
         A UCS-2 encoded WideString containing all 
         the characters to be skipped. Repeating a 
         character should be avoided if performance 
         is important. Including STRING TERMINATOR 
         ($9C) in the list of characters to be 
         skipped has no effect, i.e. STRING 
         TERMINATOR appearing in the input stream
         will always terminates SkipNext.

      Exceptions:
      - EConvertError
         Raised if the next character of the source
         stream cannot be converted (according to 
         the current character encoding scheme) to 
         a UCS-4 code point.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect3>


  <sect3>
  <title>TXmlOutputSource = class(TUtilsCustomOutputStream)</title>

  <para>This class represents an output stream for XML data with a specified encoding.</para>

  <para>TXmlStreamBuilder uses a TXmlOutputSource object to determine where to serialize the output to.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property BufSize: Integer (readonly) (inherited from TUtilsCustomOutputStream)
    <literallayout>
      The size of the buffer as specified in the
      constructor.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CodecClass: TUnicodeCodecClass
    <literallayout>
      Specifies the output encoding.
      
      The default value is TUTF8Codec.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property WriteLFOption: TCodecWriteLFOption
    <literallayout>
      Specifies the transformation of Line Feed characters
      (#$A) when serializing a stream.

      - lwCRLF: Each Line Feed character is transcoded
                in a sequence of Carriage Return followed
                by Line Feed (#$D#$A).
      - lwCR:   Each Line Feed character is transcoded
                in a Carriage Return (#$D) character.
      - lwLF:   No transcoding is performed.

      The default value is lwCRLF.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const Stream: TStream;
                       const BufSize: Integer);
    <literallayout>
      Creates a new TXmlOutputSource object.  Create
      allocates memory for a TXmlOutputSource object,
      and associates it with the stream passed in the
      'stream' parameter, with a buffer of size
      'bufSize'.

      Parameters:
      - Stream
         The associated stream.
      - BufSize
         The size of the buffer.  The value should be
         a multiplicity of 1024.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure WriteUCS4Char(const C: UCS4Char;
                              out ByteCount: Integer); virtual;
    <literallayout>
      Transforms an ISO-10646-UCS-4 character into the 
      specified output encoding and writes the result
      to the stream associated with this TXmlOutputSource
      object.

      Parameters:
      - C
         The ISO-10646-UCS-4 character to be written.

      Out Parameters:
      - ByteCount
         Returns the number of bytes written to the
         output stream.

      Exceptions:
      - EWriteError
         Raised if the associated stream fails to
         completely write the specified character or
         if the output was cancled because the character 
         could not be transformed.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect3>

  </sect2>


  <sect2>
  <title>Tokenizer Classes</title>

  <para>Tokenizers are used to sequentially access an XML source, provided by a TXmlInputSource object, in small syntactical units, so-called tokens.</para>

  <sect3>
  <title>TXmlCustomTokenizer = class(TUtilsNoRefCount, IDomLocator)</title>

  <para>TXmlCustomTokenizer is the base class that is the ancestor for most other tokenizer classes.</para>

  <para>[Details not documented]</para>

  </sect3>

  <sect3>
  <title>TXmlDocTokenizer = class(TXmlCustomTokenizer)</title>

  <para>A TXmlDocTokenizer object is used to sequentially access the XML constructs as provided by a UCS4Reader object.</para>

  <para><emphasis>Interfaces</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>IDomLocator</para>
    <para>This interface returns location information about the current token.</para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Clue: WideString (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current XML construct,
      this property contains the character or 
      character sequence expected by the 
      tokenizer.  For some error types no clue
      is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current XML construct,
      this property contains the type of this error.
      If no wellformedness error was detected, this
      property returns 'ET_NONE'.

      Note that the TXmlDocTokenizer does only perform
      basic wellformedness tests.  So a value of
      'ET_NONE', does not indicate that the XML
      construct as returned by the TokenValue 
      property is wellformed.  It indicates only that 
      no violation of an wellformedness constraint was
      detected while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlDocTokenType (readonly)
    <literallayout>
      Indicates the type of the current XML 
      construct. This is one of the following
      constants:
      XML_CDATA_TOKEN, XML_CHAR_REF_DEC_TOKEN,
      XML_CHAR_REF_HEX_TOKEN, XML_COMMENT_TOKEN,
      XML_DOCTYPE_TOKEN, XML_EMPTY_ELEMENT_TAG_TOKEN,
      XML_END_OF_SOURCE_TOKEN, XML_END_TAG_TOKEN,
      XML_ENTITY_REF_TOKEN, XML_PCDATA_TOKEN,
      XML_PI_TOKEN, XML_START_OF_SOURCE_TOKEN, or
      XML_START_TAG_TOKEN.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenValue: WideString (readonly)
    <literallayout>
      This WideString contains the significant 
      characters of the current XML construct. 
      What is considered to be significant depents 
      on the TokenType as described in the 
      following list:
      
      XML_CDATA_TOKEN:
        The contents of a CDATA Section, 
        excluding the leading '&lt;![CDATA[' and
        the trailing ']]&gt;'.

      XML_CHAR_REF_DEC_TOKEN:
        The decimal representation of a Character
        Reference, excluding the leading '&amp;#' and
        the trailing ';'.

      XML_CHAR_REF_HEX_TOKEN:
        The hexadecimal representation of a Character
        Reference, excluding the leading '&amp;#x' and
        the trailing ';'.

      XML_COMMENT_TOKEN:
        The contents of a Comment, excluding the 
        leading '&lt;--' and the trailing '--&gt;'.

      XML_DOCTYPE_TOKEN:
        The contents of a Document Type Declaration,
        excluding the leading '&lt;!DOCTYPE' and the
        trailing '&gt;'.

      XML_EMPTY_ELEMENT_TAG_TOKEN:
        The name and (optional) attributes of an Empty
        Element Tag, excluding the leading '&lt;' and
        the trailing '/&gt;'.

      XML_END_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      XML_END_TAG_TOKEN:
        The name of an End Tag, excluding the leading 
        '&lt;/' and the trailing '&gt;'.

      XML_ENTITY_REF_TOKEN:
        The name of an Entity Reference, excluding the
        leading '&amp;' and the trailing ';'.

      XML_PCDATA_TOKEN:
        A sequence of character data.

      XML_PI_TOKEN:
        The contents of a Processing Instruction,
        excluding the leading '&lt;?' and the trailing 
        '?&gt;'.

      XML_START_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      XML_START_TAG_TOKEN:
        The name and (optional) attributes of a Start
        Tag, excluding the leading '&lt;' and the 
        trailing '&gt;'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const InputSource: TXmlSimpleInputSource);
    <literallayout>
      Creates a new TXmlDocTokenizer object and 
      initializes it with a TXmlSimpleInputSource object.

      Parameters:
      - InputSource
         A TXmlSimpleInputSource object holding the 
         document to be analyzed.  (Note that the 
         TXmlInputSource class is a descendant of 
         TXmlSimpleInputSource. Thus, an application may
         also specify a TXmlInputSource object 
         here.)
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; virtual;
    <literallayout>
      Retrieves the next XML construct from the
      associated TXmlInputSource object.  If no
      such XML construct is available, TokenType
      will return 'XML_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>


  <sect3>
  <title>TXmlAttrValueTokenizer = class</title>

  <para>A TXmlAttrValueTokenizer object is used to sequentially access the constructs of an attribute value as provided by a WideString.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current attribute value
      construct, this property contains the type of 
      this error.  If no wellformedness error was 
      detected, this property returns 'ET_NONE'.

      Note that the TXmlAttrValueTokenizer does 
      only perform basic wellformedness tests.  So a
      value of 'ET_NONE', does not indicate that the 
      XML construct as returned by the TokenValue 
      property is wellformed.  It indicates only that 
      no violation of an wellformedness constraint 
      was detected while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlAttrValueTokenType (readonly)
    <literallayout>
      Indicates the type of the current attribute value
      construct. This is one of the following constants:
      ATTR_CHAR_REF, ATTR_END_OF_SOURCE_TOKEN,
      ATTR_ENTITY_REF, ATTR_START_OF_SOURCE_TOKEN,
      ATTR_TEXT.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenValue: WideString (readonly)
    <literallayout>
      This WideString contains the significant characters 
      of the current Document Type Declaration construct.
      What is considered to be significant depents on the 
      TokenType as described in the following list:
      
      ATTR_CHAR_REF
        The value of the character reference excluding the
        leading '&amp;#' sequence and the trailing semicolon
        (';'), but including an optional hexadecimal 
        indicator ('x').

      ATTR_END_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      ATTR_ENTITY_REF:
        The value of the entity reference excluding the
        leading  ampersand ('&amp;') the trailing semicolon
        (';').

      ATTR_START_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      ATTR_TEXT:
        The literal value of the text.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const S: WideString);
    <literallayout>
      Creates a new TXmlAttrValueTokenizer object and 
      initializes it with a WideString.

      Parameters:
      - S
         An UTF-16LE encoded WideString (with or without
         a byte order mark) holding the attribute value
         to be analyzed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; virtual;
    <literallayout>
      Retrieves the next attribute value construct.  If
      no such construct is available, TokenType will
      return ATTR_END_OF_SOURCE_TOKEN.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>


  <sect3>
  <title>TXmlDoctypeDeclTokenizer = class(TUtilsNoRefCount, IDomLocator)</title>

  <para>A TXmlDoctypeDeclTokenizer object is used to sequentially access the Document Type Declaration constructs as provided by a WideString. Note that the internal subset construct provided by a TXmlDoctypeDeclTokenizer object is not checked for wellformedness and is typically further evaluated by a TXmlDtdDetailTokenizer object.</para>

  <para><emphasis>Interfaces</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>IDomLocator</para>
    <para>This interface returns location information about the current token.</para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Clue: WideString (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current Document Type 
      Declaration construct, this property contains 
      the character or character sequence expected 
      by the tokenizer.  For some error types no 
      clue is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current Document Type 
      Declaration construct, this property contains 
      the type of this error.  If no wellformedness 
      error was detected, this property returns 
      'ET_NONE'.

      Note that the TXmlDoctypeDeclTokenizer does 
      only perform basic wellformedness tests.  So a
      value of 'ET_NONE', does not indicate that the 
      XML construct as returned by the TokenValue 
      property is wellformed.  It indicates only that 
      no violation of an wellformedness constraint 
      was detected while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlDoctypeDeclTokenType (readonly)
    <literallayout>
      Indicates the type of the current Document Type 
      Declaration construct. This is one of the following
      constants:
      DOCTYPE_END_OF_SOURCE_TOKEN, DOCTYPE_INTSUBSET_TOKEN,
      DOCTYPE_NAME_TOKEN, DOCTYPE_PUBID_TOKEN,
      DOCTYPE_START_OF_SOURCE_TOKEN, DOCTYPE_SYSID_TOKEN.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenValue: WideString (readonly)
    <literallayout>
      This WideString contains the significant characters 
      of the current Document Type Declaration construct.
      What is considered to be significant depents on the 
      TokenType as described in the following list:
      
      DOCTYPE_END_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DOCTYPE_INTSUBSET_TOKEN:
        The internal subset as specified in the Document 
        Type Declaration, i.e. all characters between the
        '[' and ']' brackets (excluding the brackets 
        themselves).

      DOCTYPE_NAME_TOKEN:
        The name of the Document Type Declaration.

      DOCTYPE_PUBID_TOKEN:
        The public identifier of the external subset.

      DOCTYPE_START_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DOCTYPE_SYSID_TOKEN:
        The system identifier of the external subset.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const S,
                             DocumentUri: WideString;
                             InitialByteCount,
                             InitialCharCount,
                             InitialCharsInLine,
                             InitialTabsInLine,
                             InitialLine: Int64);
    <literallayout>
      Creates a new TXmlDoctypeDeclTokenizer object and 
      initializes it with a WideString.

      Parameters:
      - S
         An UTF-16LE encoded WideString (with or 
         without a byte order mark) holding the 
         document type declaration to be analyzed.
      - DocumentUri
         The location of the XML document that embeds 
         the document type declaration or an empty 
         WideString if undefined or if the Document 
         was created by the user.
      - InitialByteCount
         The byte offset of the first character of 
         the document type declaration in an embeding
         XML document, or '0' if the document type 
         declaration is not embedded.
      - InitialCharCount
         The character index offset for the first 
         character of the document type declaration 
         in an embeding XML document (i.e. the index 
         of the first character minus 1), or '0' if 
         the document type declaration is not embedded.
      - InitialCharsInLine
         The number of characters in the line before the 
         first character of the  document type declaration
         in an embeding XML document, or '0' if the 
         document type declaration is not embedded.
      - InitialTabsInLine
         The number of TAB characters (#0009) in the 
         line before the first character of the 
         document type declaration in an embeding XML 
         document, or '0' if the document type 
         declaration is not embedded.
      - InitialLine
         The line of the first character of the 
         document type declaration in an embeding XML 
         document, or '1' if the document type 
         declaration is not embedded.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; virtual;
    <literallayout>
      Retrieves the next DTD construct from the
      associated TXmlInputSource object.  If no
      such DTD construct is available, TokenType
      will return 'DOCTYPE_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  <sect3>
  <title>TXmlDtdDetailTokenizer = class(TXmlCustomTokenizer)</title>

  <para>A TXmlDtdDetailTokenizer object is used to sequentially access the DTD constructs as provided by an associated TXmlInputSource object. Note that the constructs provided by a TXmlDtdDetailTokenizer object are very basic and are usually further evaluated by a TXmlDtdDetailPETokenizer object.</para>

  <para><emphasis>Interfaces</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>IDomLocator</para>
    <para>This interface returns location information about the current token.</para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Clue: WideString (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the character or 
      character sequence expected by the 
      tokenizer.  For some error types no clue
      is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the type of this error.
      If no wellformedness error was detected, this
      property returns 'ET_NONE'.

      Note that the TXmlDtdDetailTokenizer only performs
      basic wellformedness tests.  So a value of
      'ET_NONE', does not indicate that the XML
      construct as returned by the TokenValue 
      property is wellformed.  It indicates only that 
      no violation of an wellformedness constraint was
      detected while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsPERefInDeclSep: Boolean (readonly)
    <literallayout>
      Returns True if the input source represents 
      the replacement text of a parameter entity 
      reference in a declaration separator (i.e. 
      in between declarations).  Otherwise False
      is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlDtdDetailTokenType (readonly)
    <literallayout>
      Indicates the type of the current DTD 
      construct. This is one of the following
      constants:
      DTD_DETAIL_ATTLIST_DECL_START_TOKEN,
      DTD_DETAIL_COMMENT_TOKEN,
      DTD_DETAIL_COND_SECT_END_TOKEN,
      DTD_DETAIL_COND_SECT_OPENER_TOKEN,
      DTD_DETAIL_COND_SECT_START_TOKEN,
      DTD_DETAIL_DECL_END_TOKEN,
      DTD_DETAIL_ELEMENT_DECL_START_TOKEN,
      DTD_DETAIL_END_OF_SOURCE_TOKEN,
      DTD_DETAIL_ENTITY_DECL_START_TOKEN,
      DTD_DETAIL_INVALID_MARKUP_TOKEN,
      DTD_DETAIL_KEYWORD_TOKEN,
      DTD_DETAIL_NOTATION_DECL_START_TOKEN,
      DTD_DETAIL_OPERATOR_TOKEN,
      DTD_DETAIL_PARAMETER_ENTITY_REF_TOKEN,
      DTD_DETAIL_PI_CONTENT_TOKEN,
      DTD_DETAIL_PI_TARGET_TOKEN,
      DTD_DETAIL_QUOTED_STRING_TOKEN,
      DTD_DETAIL_START_OF_SOURCE_TOKEN,
      DTD_DETAIL_UNQUOTED_STRING_TOKEN,
      DTD_DETAIL_WHITESPACE_TOKEN.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenValue: WideString (readonly)
    <literallayout>
      This WideString contains the significant 
      characters of the current DTD construct. 
      What is considered to be significant depents 
      on the TokenType as described in the 
      following list:
      
      DTD_DETAIL_ATTLIST_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_COMMENT_TOKEN:
        The contents of a Comment, excluding the 
        leading '&lt;--' and the trailing '--&gt;'.

      DTD_DETAIL_COND_SECT_END_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_COND_SECT_OPENER_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_COND_SECT_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_DECL_END_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_ELEMENT_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_END_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_ENTITY_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_INVALID_MARKUP_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_KEYWORD_TOKEN:
        The contents of the keyword string.  A keyword
        string always starts with a '#' character.

      DTD_DETAIL_NOTATION_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_OPERATOR_TOKEN:
        The operator encountered.  This is one of the
        following character sequences: '(', '|', ',',
        ')', ')*', ')+', ')?'.

      DTD_DETAIL_PARAMETER_ENTITY_REF_TOKEN:
        The complete parameter entity reference, 
        including the leading '#' and the trailing ';'.

      DTD_DETAIL_PI_CONTENT_TOKEN,
        The contents part of a Processing Instruction.
        Note that this includes any trailing white 
        space.

      DTD_DETAIL_PI_TARGET_TOKEN:
        The target part of a Processing Instruction.

      DTD_DETAIL_QUOTED_STRING_TOKEN:
        The contents of the quoted string including
        the leading and trailing quotation mark.

      DTD_DETAIL_START_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_UNQUOTED_STRING_TOKEN:
        The contents of the unquoted string.

      DTD_DETAIL_WHITESPACE_TOKEN:
        A sequence of whitespace characters.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const InputSource: TXmlSimpleInputSource;
                       const IsPERefInDeclSep: Boolean);
    <literallayout>
      Creates a new TXmlDtdDetailTokenizer object and 
      initializes it with a TXmlInputSource object.

      Parameters:
      - InputSource
         A TXmlSimpleInputSource object holding the DTD to
         be analyzed.
      - AIsPERefInDeclSep
         Indicates whether the input source 
         represents the replacement text of a
         parameter entity reference in a declaration
         separator (i.e. in between declarations).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; virtual;
    <literallayout>
      Retrieves the next DTD construct from the
      associated TXmlInputSource object.  If no
      such DTD construct is available, TokenType
      will return 'DTD_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure NextEndOfIgnoredCondSect; virtual;
    <literallayout>
      Retrieves the end token of an ignorded 
      conditional section from the associated 
      TXmlInputSource object.  Pairs of conditional 
      section starts "&lt;![" and ends "]]&gt;" are
      ignored until the matching end is found.  If 
      no matching end was found, TokenType will
      return 'DTD_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  <sect3>
  <title>TXmlDtdDetailPETokenizer = class(TUtilsNoRefCount, IDomLocator)</title>

  <para>A TXmlDtdDetailPETokenizer object is used to sequentially access the DTD constructs as provided by an associated TXmlInputSource object and resolve the parameter entity references it encounters outside of entity values in entity declarations. Internally, it uses TXmlDtdDetailPETokenizer objects to do this. Note that the constructs provided by a TXmlDtdDetailPETokenizer object are very basic and are usually further evaluated by specialized TXmlExtSubsetTokenizer and TXmlIntSubsetTokenizer objects.</para>

  <para><emphasis>Interfaces</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>IDomLocator</para>
    <para>This interface returns location information about the current token.</para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AllowPEsInMarkup: Boolean (readonly)
    <literallayout>
      A flag that indicates whether parameter 
      entity references are allowed within markup.
      If set to 'False' and a parameter entity
      reference is encountered when calling the 
      Next procedure, ErrorType reports an
      ET_INVALID_MARKUP_DECL fatal error.  This
      is the standard behavior when parsing the
      internal subset of a DTD.

      Since a TXmlDtdDetailPETokenizer object
      does not recognize whether a quoted string
      represents an entity value of an entity
      declaration, parameter entity references
      in entity values do not result in an
      ET_INVALID_MARKUP_DECL fatal error.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Clue: WideString (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the character or 
      character sequence expected by the 
      tokenizer.  For some error types no clue
      is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CurrentPEName: WideString (readonly)
    <literallayout>
      If the TXmlDtdDetailPETokenizer object is 
      currently processing a parameter entity 
      reference, this property returns the name of 
      the parameter entity.  Otherwise an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the type of this error.
      If no wellformedness error was detected, this
      property returns 'ET_NONE'.

      Note that the TXmlDtdDetailTokenizer only performs
      basic wellformedness tests.  So a value of
      'ET_NONE', does not indicate that the XML
      construct as returned by the TokenValue 
      property is wellformed.  It indicates only that 
      no violation of an wellformedness constraint was
      detected while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsInMarkup: Boolean (readonly)
    <literallayout>
      Returns 'True' if the TXmlDtdDetailPETokenizer
      object is currently processing code inside a
      declaration.  Otherwise 'False' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsPERefInDeclSep: Boolean (readonly)
    <literallayout>
      Returns True if the input source represents 
      the replacement text of a parameter entity 
      reference in a declaration separator (i.e. 
      in between declarations).  Otherwise False
      is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsProcessingPE: Boolean (readonly)
    <literallayout>
      Returns 'True' if the TXmlDtdDetailPETokenizer
      object is currently processing a parameter
      entity reference.  Otherwise 'False' is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PERefTreatment: TXmlPERefTreatment
    <literallayout>
      Indicates how parameter entity references should be 
      treated.  A value of 'petResolve' indicates that
      all parameter entity references should be resolved;
      a value of 'petResolveInDeclSep' indicates that only
      parameter entity references in declaration separators
      are accepted and should be resolved; a value of 
      'petResolveInDeclSepSkipExt' indicates that only
      parameter entity references in declaration separators
      are accepted of which only internal ones are resolved
      while external ones are returned by the tokenizer
      as DTD_DETAIL_PARAMETER_ENTITY_REF_TOKEN tokens.

      The default value is petResolve.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlDtdDetailTokenType (readonly)
    <literallayout>
      Indicates the type of the current DTD 
      construct. This is one of the following
      constants:
      DTD_DETAIL_ATTLIST_DECL_START_TOKEN,
      DTD_DETAIL_COMMENT_TOKEN,
      DTD_DETAIL_COND_SECT_END_TOKEN,
      DTD_DETAIL_COND_SECT_OPENER_TOKEN,
      DTD_DETAIL_COND_SECT_START_TOKEN,
      DTD_DETAIL_DECL_END_TOKEN,
      DTD_DETAIL_ELEMENT_DECL_START_TOKEN,
      DTD_DETAIL_END_OF_SOURCE_TOKEN,
      DTD_DETAIL_ENTITY_DECL_START_TOKEN,
      DTD_DETAIL_INVALID_MARKUP_TOKEN,
      DTD_DETAIL_KEYWORD_TOKEN,
      DTD_DETAIL_NOTATION_DECL_START_TOKEN,
      DTD_DETAIL_OPERATOR_TOKEN,
      DTD_DETAIL_PARAMETER_ENTITY_REF_TOKEN,
      DTD_DETAIL_PI_CONTENT_TOKEN,
      DTD_DETAIL_PI_TARGET_TOKEN,
      DTD_DETAIL_QUOTED_STRING_TOKEN,
      DTD_DETAIL_START_OF_SOURCE_TOKEN,
      DTD_DETAIL_UNQUOTED_STRING_TOKEN,
      DTD_DETAIL_WHITESPACE_TOKEN.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenValue: WideString (readonly)
    <literallayout>
      This WideString contains the significant 
      characters of the current DTD construct. 
      What is considered to be significant depents 
      on the TokenType as described in the 
      following list:
      
      DTD_DETAIL_ATTLIST_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_COMMENT_TOKEN:
        The contents of a Comment, excluding the 
        leading '&lt;--' and the trailing '--&gt;'.

      DTD_DETAIL_COND_SECT_END_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_COND_SECT_OPENER_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_COND_SECT_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_DECL_END_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_ELEMENT_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_END_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_ENTITY_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_INVALID_MARKUP_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_KEYWORD_TOKEN:
        The contents of the keyword string.  A keyword
        string always starts with a '#' character.

      DTD_DETAIL_NOTATION_DECL_START_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_OPERATOR_TOKEN:
        The operator encountered.  This is one of the
        following character sequences: '(', '|', ',',
        ')', ')*', ')+', ')?'.

      DTD_DETAIL_PARAMETER_ENTITY_REF_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_PI_CONTENT_TOKEN,
        The contents part of a Processing Instruction.
        Note that this includes any trailing white 
        space.

      DTD_DETAIL_PI_TARGET_TOKEN:
        The target part of a Processing Instruction.

      DTD_DETAIL_QUOTED_STRING_TOKEN:
        The contents of the quoted string including
        the leading and trailing quotation mark.

      DTD_DETAIL_START_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_DETAIL_UNQUOTED_STRING_TOKEN:
        The contents of the unquoted string.

      DTD_DETAIL_WHITESPACE_TOKEN:
        A sequence of whitespace characters.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnResolveParameterEntity: TDomResolveEntityEvent
    <literallayout>
  TDomResolveEntityEvent =
    procedure(Sender: TObject;
              const EntityName: WideString;
                var EntityValue,
                    PubId,
                    SysId: WideString;
                var Error: TXmlErrorType)
            of object;

      This event is triggered when a parameter entity 
      reference has been encountered and needs to be
      resolved.

      Parameters:
      - Sender
         This TXmlDtdDetailPETokenizer object.
      - EntityName
         The name of the parameter entity to be
         resolved.

      Var Parameters:
      - EntityValue
         The value of the parameter entity.
      - PubId
         The public identifier, if any, of the 
         parameter entity.
      - SysId
         The system identifier, if any, of the 
         parameter entity.
      - Error
         ET_NONE, if the parameter entity had been
         successfully resolved or an error code if not. 
         If the AcceptExtEntity parameter is False and an
         attempt is made to resolve an external parameter 
         entity, the event handler must return
         ET_EXT_ENTITY_RESOURCE_NOT_FOUND.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AInputSource: TXmlSimpleInputSource;
                       const AIsPERefInDeclSep: Boolean);
    <literallayout>
      Creates a new TXmlDocTokenizer object and 
      associates it with a TXmlSimpleInputSource object.

      Parameters:
      - AInputSource
         The associated TXmlSimpleInputSource object.
      - AIsPERefInDeclSep
         Indicates whether the input source 
         represents the replacement text of a
         parameter entity reference in a declaration
         separator (i.e. in between declarations).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; virtual;
    <literallayout>
      Retrieves the next DTD construct from the
      associated TXmlInputSource object.  If no
      such DTD construct is available, TokenType
      will return 'DTD_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure NextEndOfIgnoredCondSect; virtual;
    <literallayout>
      Retrieves the end token of an ignorded 
      conditional section from the associated 
      TXmlInputSource object.  Pairs of conditional 
      section starts "&lt;![" and ends "]]&gt;" are
      ignored until the matching end is found.  If 
      no matching end was found, TokenType will
      return 'DTD_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  <sect3>
  <title>TXmlCustomSubsetTokenizer = class(TUtilsNoRefCount, IDomLocator)</title>

  <para>TXmlCustomSubsetTokenizer is the common abstract base class for the specialized TXmlExtSubsetTokenizer and TXmlIntSubsetTokenizer classes.</para>

  <para>[Details not documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlExtSubsetTokenizer = class(TXmlCustomSubsetTokenizer)</title>

  <para>A TXmlExtSubsetTokenizer object is used to sequentially access the constructs of the external subset or external parsed parameter entities of a DTD.  The constructs are provided by an internal TXmlDtdDetailTokenizer object from an associated TXmlInputSource object. Note that the constructs provided by a TXmlExtSubsetTokenizer object are more sophisticated than those provided by a TXmlDtdDetailTokenizer object.</para>

  <para><emphasis>Interfaces</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>IDomLocator</para>
    <para>This interface returns location information about the current token.</para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AllowPEsInMarkup: Boolean (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      A flag that indicates whether parameter 
      entity references are allowed within markup.

      For TXmlExtSubsetTokenizer objects this
      property always returns 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Clue: WideString (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the character or 
      character sequence expected by the 
      tokenizer.  For some error types no clue
      is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CurrentSignal: TXmlSignal (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      Represents the current DTD construct as a 
      TXmlSignal object. If the ErrorType property
      indicates a fatal error (ErrorType in 
      ET_FATAL_ERRORS), then this property might 
      return nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EntityDeclBaseUri: WideString (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      If TokenType is DTD_ABSTRACT_ENTITY_DECL_TOKEN,
      this property contains the base URI of the entity
      declaration, i.e. the URI of the entity containing
      the '&lt;' which starts the declaration, at the point
      when it is parsed as a declaration (cf. [XML 1.0], 
      sec.  4.2.2).  Otherwise an empty WideString is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the type of this error.
      If no wellformedness error was detected, this
      property returns 'ET_NONE'.

      Note that the TXmlExtSubsetTokenizer does only 
      perform basic wellformedness tests.  So a value 
      of 'ET_NONE', does not indicate that the XML
      construct as returned by the TokenValue 
      property is wellformed.  It indicates only that
      no violation of an wellformedness constraint 
      was detected while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsProcessingPE: Boolean (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      Returns 'True' if the tokenizer is currently
      processing the value of a Parameter Entity.
      Otherwise 'False' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PERepository: TDomPERepository (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      The repository specified in the constructor
      which is used during DTD processing to add and
      retrieve information about parameter entities.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlDtdAbstractTokenType (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      Indicates the type of the current DTD 
      construct. This is one of the following
      constants:
      DTD_ABSTRACT_ATTLIST_DECL_TOKEN,
      DTD_ABSTRACT_COMMENT_TOKEN,
      DTD_ABSTRACT_CONDITIONAL_SECTION_TOKEN,
      DTD_ABSTRACT_ELEMENT_DECL_TOKEN,
      DTD_ABSTRACT_END_OF_SOURCE_TOKEN,
      DTD_ABSTRACT_ENTITY_DECL_TOKEN,
      DTD_ABSTRACT_EXT_PARAMETER_ENTITY_REF_TOKEN,
      DTD_ABSTRACT_IGNORABLE_WHITESPACE_TOKEN,
      DTD_ABSTRACT_INVALID_MARKUP_TOKEN,
      DTD_ABSTRACT_NOTATION_DECL_TOKEN,
      DTD_ABSTRACT_PARAMETER_ENTITY_DECL_TOKEN,
      DTD_ABSTRACT_PI_TOKEN,
      DTD_ABSTRACT_START_OF_SOURCE_TOKEN
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnPEReference: TDomLocationEvent (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
  TDomLocationEvent =
    procedure(Sender: TObject;
              const Locator: IDomLocator)
            of object;

      This event is triggered before a parameter 
      entity reference is processed.

      Parameters:
      - Sender
         This TXmlExtSubsetTokenizer object.
      - Locator
         A IDomLocator interface providing location 
         information about the parameter entity
         reference.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OnProcessingAttListDecl: TDomWideStringLocationEvent (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      TDomLocationEvent =
          procedure(Sender: TObject;
                    const S: WideString; 
                    const Locator: IDomLocator) 
                   of object;

      This event is triggered before an attribute 
      list declaration is processed.

      Parameters:
      - Sender
         This TXmlExtSubsetTokenizer object.
      - S
         The name of the element type of the
         attribute list declaration to be processed.
      - Locator
         A IDomLocator interface providing location 
         information about the parameter entity
         reference.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AInputSource: TXmlInputSource;
                       const APERepository: TDomPERepository);
    <literallayout>
      Creates a new TXmlExtSubsetTokenizer object and 
      associates it with a TXmlInputSource object.

      Parameters:
      - AInputSource
         The associated TXmlInputSource object.
      - APERepository
         The repository which is used during DTD 
         processing to add and retrieve information 
         about parameter entities.

      Exceptions:
      - ENot_Supported_Err
         Raised if the AInputSource or the APERepository
         parameter is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure next; override;
    <literallayout>
      Retrieves the next DTD construct from the
      associated TXmlInputSource object.  If no
      such DTD construct is available, the 
      TokenType property will return 
      'DTD_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  <sect3>
  <title>TXmlIntSubsetTokenizer = class(TXmlCustomSubsetTokenizer)</title>

  <para>A TXmlIntSubsetTokenizer object is used to sequentially access the constructs of the internal subset of a DTD.  The constructs are provided by an internal TXmlDtdDetailTokenizer object from an associated TXmlInputSource object. Note that the constructs provided by a TXmlIntSubsetTokenizer object are more sophisticated than those provided by a TXmlDtdDetailTokenizer object.</para>

  <para><emphasis>Interfaces</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>IDomLocator</para>
    <para>This interface returns location information about the current token.</para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AcceptExtPEs: Boolean 
    <literallayout>
      Indicates whether reference to external parameter
      entities are acceptable.

      The default value is True.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property AllowPEsInMarkup: Boolean (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      A flag that indicates whether parameter 
      entity references are allowed within markup.

      For TXmlIntSubsetTokenizer objects this
      property always returns 'False'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Clue: WideString (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the character or 
      character sequence expected by the 
      tokenizer.  For some error types no clue
      is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CurrentSignal: TXmlSignal (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      Represents the current DTD construct as a 
      TXmlSignal object. If the ErrorType property
      indicates a fatal error (ErrorType in 
      ET_FATAL_ERRORS), then this property might 
      return nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EntityDeclBaseUri: WideString (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      If TokenType is DTD_ABSTRACT_ENTITY_DECL_TOKEN,
      this property contains the base URI of the entity
      declaration, i.e. the URI of the entity containing
      the '&lt;' which starts the declaration, at the point
      when it is parsed as a declaration (cf. [XML 1.0], 
      sec.  4.2.2).  Otherwise an empty WideString is
      returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current DTD construct,
      this property contains the type of this error.
      If no wellformedness error was detected, this
      property returns 'ET_NONE'.

      Note that the TXmlIntSubsetTokenizer does only 
      perform basic wellformedness tests.  So a value 
      of 'ET_NONE', does not indicate that the XML
      construct as returned by the TokenValue 
      property is wellformed.  It indicates only that 
      no violation of an wellformedness constraint was
      detected while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IsProcessingPE: Boolean (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      Returns 'True' if the tokenizer is currently
      processing the value of a Parameter Entity.
      Otherwise 'False' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PERepository: TDomPERepository (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      The repository specified in the constructor
      which is used during DTD processing to add and
      retrieve information about parameter entities.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ResolveExtPEs: Boolean 
    <literallayout>
      If True, external parameter entity references in 
      the internal subset of the DTD are automatically
      resolved, i.e. instead of returning a parameter 
      entity reference construct, the tokenizer 
      processes the replacement text of the parameter 
      entity. If False, external parameter entity 
      references are not resolved, but the tokenizer 
      returns a parameter entity reference construct.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlDtdAbstractTokenType (readonly) (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      Indicates the type of the current DTD 
      construct. This is one of the following
      constants:
      DTD_ABSTRACT_ATTLIST_DECL_TOKEN,
      DTD_ABSTRACT_COMMENT_TOKEN,
      DTD_ABSTRACT_CONDITIONAL_SECTION_TOKEN,
      DTD_ABSTRACT_ELEMENT_DECL_TOKEN,
      DTD_ABSTRACT_END_OF_SOURCE_TOKEN,
      DTD_ABSTRACT_ENTITY_DECL_TOKEN,
      DTD_ABSTRACT_EXT_PARAMETER_ENTITY_REF_TOKEN,
      DTD_ABSTRACT_IGNORABLE_WHITESPACE_TOKEN,
      DTD_ABSTRACT_INVALID_MARKUP_TOKEN,
      DTD_ABSTRACT_NOTATION_DECL_TOKEN,
      DTD_ABSTRACT_PARAMETER_ENTITY_DECL_TOKEN,
      DTD_ABSTRACT_PI_TOKEN,
      DTD_ABSTRACT_START_OF_SOURCE_TOKEN
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnPEReference: TDomLocationEvent (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
  TDomLocationEvent =
    procedure(Sender: TObject;
              const Locator: IDomLocator)
            of object;

      This event is triggered before a parameter 
      entity reference is processed.

      Parameters:
      - Sender
         This TXmlIntSubsetTokenizer object.
      - Locator
         A IDomLocator interface providing location 
         information about the parameter entity
         reference.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OnProcessingAttListDecl: TDomWideStringLocationEvent (inherited from TXmlCustomSubsetTokenizer)
    <literallayout>
      TDomLocationEvent =
          procedure(Sender: TObject;
                    const S: WideString; 
                    const Locator: IDomLocator) 
                   of object;

      This event is triggered before an attribute 
      list declaration is processed.

      Parameters:
      - Sender
         This TXmlIntSubsetTokenizer object.
      - S
         The name of the element type of the
         attribute list declaration to be processed.
      - Locator
         A IDomLocator interface providing location 
         information about the parameter entity
         reference.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AInputSource: TXmlSimpleInputSource;
                       const APERepository: TDomPERepository);
    <literallayout>
      Creates a new TXmlIntSubsetTokenizer object and 
      associates it with a TXmlSimpleInputSource object.

      Parameters:
      - AInputSource
         The associated TXmlSimpleInputSource object.
      - APERepository
         The repository which is used during DTD 
         processing to add and retrieve information 
         about parameter entities.

      Exceptions:
      - ENot_Supported_Err
         Raised if the AInputSource or the APERepository
         parameter is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; override;
    <literallayout>
      Retrieves the next DTD construct from the
      associated TXmlInputSource object.  If no
      such DTD construct is available, the 
      TokenType property will return 
      'DTD_END_OF_SOURCE_TOKEN'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  <sect3>
  <title>TXmlElementCMTokenizer = class</title>

  <para>A TXmlElementCMTokenizer object is used to sequentially access the construct of the content model of an element type declaration in a DTD as provided by a WideString.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Clue: WideString (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current construct,
      this property contains the character or 
      character sequence expected by the 
      tokenizer.  For some error types no clue
      is available.  In this case an empty
      WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorType: TXmlErrorType (readonly)
    <literallayout>
      If an wellformedness error was detected
      while retrieving the current XML construct,
      this property contains the type of this error.
      If no wellformedness error was detected, this
      property returns 'ET_NONE'.

      Note that the TXmlElementCMTokenizer does only
      perform wellformedness tests for the individual
      construct.  So a value of ET_NONE, does not 
      indicate that the content model as a whole is
      wellformed.  It only indicates that no violation 
      of an wellformedness constraint was detected 
      while generating the TokenValue.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenType: TXmlDocTokenType (readonly)
    <literallayout>
      Indicates the type of the current XML 
      construct. This is one of the following
      constants:
      DTD_ECM_ANY_KEYWORD_TOKEN, 
      DTD_ECM_CLOSING_BRACKET_TOKEN,
      DTD_ECM_EMPTY_KEYWORD_TOKEN,
      DTD_ECM_END_OF_SOURCE_TOKEN,
      DTD_ECM_FREQUENCY_TOKEN,
      DTD_ECM_INVALID_MARKUP_TOKEN,
      DTD_ECM_NAME_TOKEN,
      DTD_ECM_OPENING_BRACKET_TOKEN,
      DTD_ECM_PCDATA_KEYWORD_TOKEN,
      DTD_ECM_SEPARATOR_TOKEN,
      DTD_ECM_START_OF_SOURCE_TOKEN.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TokenValue: WideString (readonly)
    <literallayout>
      This WideString contains the significant 
      characters of the current construct. 
      What is considered to be significant depents 
      on the TokenType as described in the 
      following list:
      
      DTD_ECM_ANY_KEYWORD_TOKEN:
        The keyword 'ANY'.

      DTD_ECM_CLOSING_BRACKET_TOKEN:
        The closing bracket '('.

      DTD_ECM_EMPTY_KEYWORD_TOKEN:
        The keyword 'EMPTY'.

      DTD_ECM_END_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.

      DTD_ECM_FREQUENCY_TOKEN:
        Either '?', '*' or '+'.

      DTD_ECM_INVALID_MARKUP_TOKEN:
        The TokenValue for this type is unspecified.

      DTD_ECM_NAME_TOKEN:
        The name of an element type.

      DTD_ECM_OPENING_BRACKET_TOKEN:
        The opening bracket ')'.

      DTD_ECM_PCDATA_KEYWORD_TOKEN:
        The keyword '#PCDATA'.

      DTD_ECM_SEPARATOR_TOKEN:
        Either '|', or ','.

      DTD_ECM_START_OF_SOURCE_TOKEN:
        The TokenValue for this type is always an
        empty WideString.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const S: WideString);
    <literallayout>
      Creates a new TXmlDocTokenizer object and 
      initializes it with a WideString.
 
      Parameters:
      - S
         An UTF-16LE encoded WideString (with or 
         without a byte order mark) holding the 
         content model to be analyzed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Next; virtual;
    <literallayout>
      Retrieves the next XML construct.  If no
      such XML construct is available, TokenType
      will return XML_END_OF_SOURCE_TOKEN.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  </sect2>

</sect1>


<sect1>
<title>Fundamental XML Processor Classes</title>

<para>This section describes the medium level classes designed to process an XML source (in contrast to the high level Parser and the low level Tokenizer classes).</para>

<sect2>
<title>Introduction</title>

  <sect3>
  <title>The XML Processor Pipeline</title>
    <para>To implement XML parsing XDOM follows the so-called "processor pipeline" design pattern. The task of parsing an XML document is devided into several subsequent phases, each performed by an individual component. These components are forming a pipeline or queue, through which XML Signal objects are propagated. The components in the pipeline evaluate or manipulate this XML Signals, may stop the whole process by raising exceptions, pass the XML Signals to the next component in the pipeline, or may react on the recieved XML Signals in a special way.</para>

    <para>Each processor pipeline starts with a Reader.  The Reader is usually inizialized with some kind of an XML source, for example an XML character stream represented by a TXmlInputSource object.  The Reader analyzes its associated XML source by executing basic wellformedness tests and subsequently creating XML Signals and passing them to a Signal Handler.  After receiving and processing an XML Signal a Signal Handler passes it to the next Signal Handler in the pipeline, if any:</para>

    <literallayout><emphasis>
 Reader ---signal---> Handler_1 ---signal---> Handler_2 ---signal--> ...
    </emphasis></literallayout>

    <para>The standard way to cope with errors detected while processing an XML document is using a call-back to the Reader: The Signal Handler detecting the error sends an error notification back to the Reader.  The Reader passes this query to its associated TDomImplementation component, if any, by calling the TDomImplementation.handleError method.  Then the TDomImplementation.handleError method queries the application via the TDomImplementation.OnError event, if an event handler is provided.  This makes it easy for an application to record error notifications and to influence the behavior of a parser by modifying the 'go' var-parameter of the OnError event.</para>
  
    <para>If in the above example Handler_2 detects an error, the error notification process according to the standard processing model is as follows:</para>

    <literallayout><emphasis>
 Handler_2 ---notifies--> Reader ---notifies---> Implementation ---triggers---> OnError-Event
    </emphasis></literallayout>

    <para>If the 'go' parameter of the OnError event returns 'False', the Reader raises an EParserException. If no TDomImplementation component is associated with the Reader or if an associated TDomImplementation component does not specify a handler for the HandleError event, the behavior of the Reader depents on the severity of the error: If the error is an XML Fatal Error (DOM_SEVERITY_FATAL_ERROR) an EParserException is raised, otherwise no special operation is performed.</para>   
  
    <para>If an exception is raised this exception travels back through the Signal Handler pipeline:</para>

    <literallayout><emphasis>
  Reader ---exception---> Handler_2 ---exception---> Handler_1 ---exception---> Reader
    </emphasis></literallayout>

    <para>Any of the Signal Handlers may catch the exception and thus prevent it from reaching the Reader again. When nevertheless the exception reaches the Reader, the Reader usually will terminate the XML processing. In that case, the Reader passes an XML Aborted Signal to the first Signal Handler in the pipeline.  This tells the Signal Handler to reset itself and afterwards to pass the XML Aborted Signal to the next Signal Handler in the pipeline. When defining a new Signal Handler class, override the 'processSignal' method, so that the Signal Handler can recover when the processing of an XML source was aborted, and make sure that the Signal Handler passes afterwards the XML Aborted Signal to the next Signal Handler in the pipeline.</para>

    <para>Note that special, non-standard Signal Handlers or Readers may implement a different behavior, such as raising an Exception without notification, silently skipping invalid data or on receiving an exception may nevertheless decide to continue processing or to send modified XML Signals.  Also the standard Signal Handlers and Readers may ignore the signal to continue processing after a fatal error occured if they are unable to recover from an unstable state.</para>
  
    <para>The default behavior of XDOM's standard pipeline components is to continue on warnings and errors (if possible), and to stop on fatal errors.  It is recommended to follow this paradigm when implementing your own Reader and Signal Handler classes, unless a different behavior is mandatory.</para>

    <para>If a Reader passes an XML Signal to a Signal Handler it will be valid only during the scope of each Signal Handler's 'processSignal' method. The application will receive unpredictable results if it attempts to use such an XML Signal (or any of its property objects) at any other time. However, an application may call the CloneSignal function of an XML Signal to create a copy of it which is then maintained by the application.</para>
  
    <para>Reader classes should, but are not required to supply a Locator with an XML Signal.</para>

    <para>XDOM includes a variety of different Reader and Signal Handler components.  They can be combined in alternative ways to construct a special purpose XML processor by placing them on a Delphi form, connecting them with the help of the Object Inspector and writing special event handlers to manipulate XML Signals. Developers may use any of these classes to derive their own special purpose Readers or Signal Handlers.</para>

  </sect3>


  <sect3>
  <title>The Difference Between the XDOM Processor Pipeline and SAX</title>

    <para>Today,the most popular API design for lightweight XML processing is David Megginson's Simple API for XML (SAX, see: "http://www.megginson.com/SAX/").  It was originally developed for Java, but later ported to many other programming languages, including Delphi/Kylix.  SAX is based on handlers for XML parsing events.  Similar to XDOM, a SAX Reader, when processing an XML document, subsequently calls notification methods of a SAX Handler.  But in contrast to XDOM, a SAX Handler must provide an extra handler method with a different set of parameters for each kind of parsing events.  For example, a typical handler method to receive notification of an XML processing instruction in a Delphi/Kylix SAX implementation may look like this:</para>
    
    <literallayout>
    procedure HandleProcessingInstruction(
      const Target, Data: WideString);
    </literallayout>

    <para>and a handler method for XML Text data might look like this:</para>
    
    <literallayout>
    procedure HandleCharacters(S: WideString);
    </literallayout>

    <para>In contrast to SAX, XDOM's design of its parsing pipeline follows more closely an object-oriented paradigm. While a typical SAX handler must implement at least eleven methods with different parameter sets (and perhaps even more, if it is a non-standard implementation), XDOM's Signal Handlers use only one method with one parameter:</para>
    
    <literallayout>
    procedure ProcessSignal(
      const Signal: TXmlSignal);
    </literallayout>

    <para>This clear design of hiding the details of a notification in an XML Signal object makes writing handlers more compact and adding new XML Signal types comparatively easy (see for example the source code of the TXmlStandardHandler class).</para>

  </sect3>
  
</sect2>


<sect2>
<title>List Classes</title>

  <para>XDOM contains the following specialist classes to maintaine a list of Signal Handlers.</para>

  <itemizedlist>

    <listitem>
    <para>TXmlHandlers = class(TCollection)</para>
    <para>Used in TXmlDistributor to maintaine a collection of TXmlCustomHandler. To add a new item to the collection use its Add function which returns a new TXmlHandlerItem object and use the XmlHandler property of this new TXmlHandlerItem object to point to the TXmlCustomHandler object to be associated. Code example:</para>
    <literallayout>
    MyXmlHandlers.add.XmlHandler:= MyXmlCustomHandler;
    </literallayout>
    <para>From a collection single items cannot be removed. It is only possible to remove and free all items as a whole using the 'clear' command. If you need to remove a single reference to a Handler from the collection, then set the 'XmlHandler' property of the respective collection item to 'nil. Code example:</para>
    <literallayout>
    MyXmlHandlers.items[42].XmlHandler:= nil;
    </literallayout>
    </listitem>

    <listitem>
    <para>TXmlHandlerItem = class(TCollectionItem)</para>
    <para>Used in TXmlHandlers to represent one item of the collection. Use its 'XmlHandler' property to point to the associated TXmlCustomHandler.</para>
    </listitem>

  </itemizedlist>
</sect2>


<sect2>
<title>XML Signal Classes</title>

  <para>An XML Signal object represents a piece of XML data suitable for being processed individually.  An XML Signal object is typically created by a Reader and passed through a processor pipeline by recursive calls of the ProcessSignal methods of the Signal Handlers in the pipeline. After the ProcessSignal method called by the Reader completed the Reader destroys the XML Signal object it had created.</para>

  <sect3>
  <title>TXmlSignal = class(TUtilsNoRefCount, IDomLocator)</title>

  <para>TXmlSignal is the abstract base class of all other XML Signal classes.</para>  

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property EndByteNumber: Int64 (readonly)
    <literallayout>
      The last byte of the last character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndCharNumber: Int64 (readonly)
    <literallayout>
      The index of the last character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndColumnNumber: Int64 (readonly)
    <literallayout>
      The column of the last character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndLineNumber: Int64 (readonly)
    <literallayout>
      The line of the last character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property EndTabsInLine: Int64 (readonly)
    <literallayout>
      The number of TAB characters (#$09) (including 
      the character itself) in the line of the last 
      character of the XML source code corresponding 
      to the signal, or '-1' if this information is 
      not available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Reader: TXmlCustomReader (readonly)
    <literallayout>
      The TXmlCustomReader object which created and 
      maintains this TXmlSignal object, or 'nil' if
      it is not maintained by a TXmlCustomReader object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RelatedDtdObject: TDtdObject (readonly)
    <literallayout>
      The TDtdObject object corresponding to the 
      signal, or 'nil' if there is no TDtdObject 
      object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RelatedNode: TDomNode (readonly)
    <literallayout>
      The TDomNode object corresponding to this signal,
      or 'nil' if there is no TDomNode object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartByteNumber: Int64 (readonly)
    <literallayout>
      The byte offset of the first character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  
      For Example, if the first byte of the range is
      the 42nd byte of the stream, then StartByteNumber
      is 41.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartCharNumber: Int64 (readonly)
    <literallayout>
      The index of the first character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartColumnNumber: Int64 (readonly)
    <literallayout>
      The column of the first character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartLineNumber: Int64 (readonly)
    <literallayout>
      The line of the first character of the 
      XML source code corresponding to the signal,
      or '-1' if this information is not available.  

      Remark: A Line Feed character is treated as the 
      starting character of a new line, in column 0.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property StartTabsInLine: Int64 (readonly)
    <literallayout>
      The number of TAB characters (#$09) (including 
      the character itself) in the line of the first
      character of the XML source code corresponding 
      to the signal, or '-1' if this information is 
      not available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Uri: WideString (readonly)
    <literallayout>
      The URI of the document entity or of the external
      parsed entity corresponding to the signal, or an 
      empty WideString if this information is not
      available.  
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AReader: TXmlCustomReader;
                       const AStartByteNumber,
                             AStartCharNumber,
                             AStartColumnNumber,
                             AStartLineNumber,
                             AStartTabsInLine,
                             AEndByteNumber,
                             AEndCharNumber,
                             AEndColumnNumber,
                             AEndLineNumber,
                             AEndTabsInLine: Int64;
                       const AUri: WideString;
                       const ARelatedDtdObject: TDtdObject;
                       const ARelatedNode: TDomNode); virtual;
    <literallayout>
      Creates a new TXmlSignal object.

      Parameters:
      - AReader
         The TXmlCustomReader object which maintains this 
         TXmlSignal instance, or 'nil' if it is not 
         maintained by a TXmlCustomReader object.
      - AStartByteNumber
         The byte offset of the first byte of the signal, 
         or '-1' if it is unknown.
      - AStartCharNumber
         The character index of the first character of the 
         signal, or '-1' if it is unknown.
      - AStartColumnNumber
         The position of the first character (in the first
         line of the code) of the signal, or '-1' if it is 
         unknown.
      - AStartLineNumber
         The number of the first line of the signal, or 
         '-1' if it is unknown.
      - AStartTabsInLine
         The number of TAB characters (#$09) in the line 
         before the first character of the signal, or '-1' 
         if this information is not available.
      - AEndByteNumber
         The byte index of the last byte of the signal, or
         '-1' if it is unknown.
      - AEndCharNumber
         The character index of the last byte of the signal,
         or '-1' if it is unknown.
      - AEndColumnNumber
         The position of the last character (in the last
         line of the code) of the signal, or '-1' if it is 
         unknown.
      - AEndLineNumber
         The number of the last line of the signal (this 
         might be identical with startLine), or '-1' if it
         is unknown.
      - AEndTabsInLine
         The number of TAB characters (#$09) in the line 
         before the last character of the signal, or '-1'
         if this information is not available.
      - AUri
         The uri of the document entity or of the external
         parsed entity corresponding to this signal, or
         an empty WideString if none is available.
      - ARelatedDtdObject
         The TDtdObject object corresponding to this signal,
         or 'nil' if there is no TDtdObject object available.
      - ARelatedNode
         The TDomNode object corresponding to this signal,
         or 'nil' if there is no TDomNode object available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    constructor CreateFromLocator(const AReader: TXmlCustomReader;
                                  const Location: IDomLocator); virtual;
    <literallayout>
      Creates a new TXmlSignal object.

      Parameters:
      - AReader
         The TXmlCustomReader object which maintains this 
         TXmlSignal instance, or 'nil' if it is not 
         maintained by a TXmlCustomReader object.
      - ALocation
         Specifies the location corrseponding to the signal,
         or 'nil' if the location is unknown.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure CheckWellformedness(out XmlErrorType: TXmlErrorType;
                                  out Flaw,
                                      Clue: WideString); virtual;
    <literallayout>
      Tests whether the XML piece represented by the 
      TXmlSignal is wellformed.  

      Out Parameters:
      - XmlErrorType
         A TXmlErrorType constant indicating the type
         of wellformedness error detected.  If the XML
         piece is wellformed 'ET_NONE' is returned.
      - Flaw
         A WideString containing the character or 
         character sequence of the XML piece
         specifically related to the wellformedness
         error detected.  For some error types no flaw
         information is available.  In this case an 
         empty WideString is returned.
      - Clue
         The code expected by the parser at the place 
         where the error occurred or an empty WideString
         if no clue is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CloneSignal(const AReader: TXmlCustomReader): TXmlSignal; virtual; 
    <literallayout>
      This abstract function returns a duplicate of 
      the XML Signal, i.e., serves as a generic copy 
      constructor for XML Signals.
      
      Note that after calling CloneSignal, an application
      is responsible to maintaine the returned XML
      Signal object.

      Parameters:
      - AReader
         The TXmlCustomReader object which is related
         to this TXmlSignal instance, or 'nil' if it is
         not related to a particular TXmlCustomReader 
         object.

      Return Value:
         The duplicate XML Signal.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Scope: TXmlSignalScope; virtual; abstract;
    <literallayout>
      This abstract function indicates whether the 
      XML piece represented by the TXmlSignal 
      object is only valid inside a DTD ([ssDtd]),
      outside a DTD ([ssDoc]) or may appear inside
      as well as outside a DTD ([ssDoc, ssDtd]).  
      Descendant classes must implement this function.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect3>

  <sect3>
  <title>TXmlSignalClass = class of TXmlSignal</title>

  <para>TXmlSignalClass is the class type corresponding to TXmlSignal.</para>  

  </sect3>

  <sect3>
  <title>TXmlCompletedSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlAbortedSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlAttributeSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlCDATASignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlDoctypeSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlEndElementSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlEndPrefixMappingSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlEntityRefSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlPCDATASignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlSkippedEntitySignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlStartDocumentSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlStartDocumentFragmentSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlStartElementSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlStartPrefixMappingSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlCommentSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlProcessingInstructionSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlAttributeDefinitionSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlElementTypeDeclarationSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlEntityDeclarationSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlExternalPEReferenceSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlNotationDeclarationSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlParameterEntityDeclarationSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlPEReferenceFoundSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlStartExtDtdSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

  <sect3>
  <title>TXmlStartIntDtdSignal = class(TXmlSignal)</title>

  <para>[Not yet documented.]</para>

  </sect3>

</sect2>

<sect2>
<title>XML Reader Classes</title>

  <para>This section desribes the XML Reader classes, used to analyzes an XML source by executing basic wellformedness tests and subsequently creating XML Signals and passing them to a Signal Handler.</para>

<sect3>
<title>TXmlCustomReader = class(TDomBaseComponent);</title>

  <para>TXmlCustomReader is the abstract base class of all XML Reader classes.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation
    <literallayout>
      The TDomImplementation object related to the
      processor pipeline, which is primarily used for
      error reporting through its OnError event.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextHandler: TXmlCustomHandler
    <literallayout>
      The TXmlCustomHandler object which further
      processes the XML document.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnError: TDomErrorNotifyEvent
    <literallayout>
      TDomErrorNotifyEvent =
          procedure(sender: TObject;
                    error: TDomError)
                   of object;

      This event is called when the XML Reader
      receives a notification of a parsing error.

      Parameters:
      - sender
         The object that called the event, i.e. this
         TXmlStandardDocReader object.
      - error
         The error object that describes the error, this
         object may be reused by the Sender across
         multiple calls to the handleError method.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlStandardDocReader = class (TXmlCustomReader)</title>

  <para>The TXmlStandardDocReader analyzes an XML document (but not its DTD) provided by a TXmlInputSource object by splitting it into its structure units such as tags, text, comments, etc.  For each of this structure units it calls the 'processSignal' procedure of its associated Signal Handler, if any, passing an appropriate XML Signal object.</para>


  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation (inherited from TXmlCustomReader)
    <literallayout>
      The TDomImplementation object related to the
      processor pipeline, which is primarily used for
      error reporting through its OnError event.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextHandler: TXmlCustomHandler (inherited from TXmlCustomReader)
    <literallayout>
      The TXmlCustomHandler object which further
      processes the XML document.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnError: TDomErrorNotifyEvent (inherited from TXmlCustomReader)
    <literallayout>
      TDomErrorNotifyEvent =
          procedure(sender: TObject;
                    error: TDomError)
                   of object;

      This event is called when this TXmlStandardDocReader
      component receives a notification of a parsing error.

      Parameters:
      - sender
         The object that called the event, i.e. this
         TXmlStandardDocReader object.
      - error
         The error object that describes the error, this
         object may be reused by the Sender across
         multiple calls to the handleError method.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function Parse(const InputSource: TXmlInputSource):Boolean; virtual;
    <literallayout>
      Analyzes an XML document (but not its DTD) provided
      by the specified 'inputSource' by splitting it into
      its structure units such as tags, text, comments,
      etc.  For each of this structure units the 
      'processSignal' function of the specified 'NextHandler',
      if any, is called, passing an appropriate XML Signal 
      object.  
      
      The first signal sent is always an 
      XmlStartDocumentSignal object; the last signal
      sent is a TXmlCompletedSignal object.  If the 
      parsing was aborted, for example due to a fatal 
      error in the XML source code, a TXmlAbortedSignal
      object is sent instead of a TXmlCompletedSignal 
      object.

      Parameters:
      - InputSource
         The TXmlInputSource object containing the
         document entity to process.

      Return Value:
         Returns 'True' if the XML document has been
         succesfully processed, otherwise 'False' is
         returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function  ParseFragment(const InputSource: TXmlSimpleInputSource): Boolean; virtual;
    <literallayout>
      Analyzes a fragment of an XML document (but not
      its DTD) provided by the specified 'inputSource'
      by splitting it into its structure units such as
      tags, text, comments, etc.  For each of this 
      structure units the 'processSignal' function of 
      the specified 'NextHandler', if any, is called, 
      passing an appropriate XML Signal object.  
      
      The first signal sent is always an 
      XmlStartDocumentFragmentSignal object; the last 
      signal sent is a TXmlCompletedSignal object.  If 
      the parsing was aborted, for example due to a fatal 
      error in the XML source code,  a TXmlAbortedSignal
      object is sent instead of a TXmlCompletedSignal 
      object.

      The fragment to be parsed must match the well-
      formedness rules for "Content of Elements" as
      specified in [XML 1.0], sect. 3.1, prod. [43].

      Parameters:
      - InputSource
         The TXmlSimpleInputSource object containing 
         the document entity to process. 

      Return Value:
         Returns 'True' if the XML document has been
         succesfully processed, otherwise 'False' is
         returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>

<sect3>
<title>TXmlStandardDtdReader = class (TXmlCustomReader)</title>

  <para>The TXmlStandardDtdReader analyzes an XML  Document Type Definition (DTD) provided by a TXmlInputSource object by splitting it into its structure units, i.e. mainly declarations.  For each of this structure units it calls the ProcessSignal function of its associated Signal Handler, if any, passing an appropriate XML Signal object.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation (inherited from TXmlCustomReader)
    <literallayout>
      The TDomImplementation object related to the
      processor pipeline, which is primarily used for
      error reporting through its OnError event.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextHandler: TXmlCustomHandler (inherited from TXmlCustomReader)
    <literallayout>
      The TXmlCustomHandler object which further
      processes the DTD.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnError: TDomErrorNotifyEvent (inherited from TXmlCustomReader)
    <literallayout>
      TDomErrorNotifyEvent =
          procedure(Sender: TObject;
                    Error: TDomError)
                   of object;

      This event is called when this TXmlStandardDtdReader
      object receives a notification of a parsing error.

      Parameters:
      - Sender
         The object that called the event, i.e. this
         TXmlStandardDtdReader object.
      - Error
         The error object that describes the error, this
         object may be reused by the Sender across
         multiple calls to the handleError method.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function  ParseExtSubset(const InputSource: TXmlInputSource): Boolean; virtual;
    <literallayout>
      Analyzes an external subset of a DTD provided by
      the specified InputSource by splitting it into
      its structure units, i.e. mainly declarations.  
      For each of this structure units the ProcessSignal
      function of the specified NextHandler, if any,
      is called, passing an appropriate XML Signal 
      object.  

      The first signal to be sent is always an 
      XmlStartExtDtdSignal object; the last signal
      sent is a TXmlCompletedSignal object.  If the 
      parsing was aborted, for example due to a fatal 
      error in the XML source code,  a TXmlAbortedSignal
      object is sent instead of a TXmlCompletedSignal 
      object.

      Note that applications should call Prepare
      before calling a parsing method, unless the 
      parsing operation to be performed is a sequel of 
      the previous parsing operation. (For Details, 
      see the description of the Prepare method.)

      Parameters:
      - InputSource
         The TXmlInputSource object containing the
         DTD to process.

      Return Value:
         Returns True if the XML document has been
         succesfully processed, otherwise False is
         returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function  ParseIntSubset(const InputSource: TXmlSimpleInputSource;
                             const Standalone: TDomStandalone;
                             const ResolveExtPEs: Boolean): Boolean; virtual;
    <literallayout>
      Analyzes an internal subset of a DTD provided by 
      the specified InputSource by splitting it into 
      its structure units, i.e. mainly declarations.  
      For each of this structure units the ProcessSignal
      function of the specified NextHandler, if any,
      is called, passing an appropriate XML Signal 
      object.  

      The first signal to be sent is always an 
      XmlStartIntDtdSignal object; the last signal
      sent is a TXmlCompletedSignal object.  If the 
      parsing was aborted, for example due to a fatal 
      error in the XML source code,  a TXmlAbortedSignal
      object is sent instead of a TXmlCompletedSignal 
      object.

      Note that applications should call Prepare 
      before calling a parsing method, unless the 
      parsing operation to be performed is a sequel of 
      the previous parsing operation. (For Details, 
      see the description of the Prepare method.)

      Parameters:
      - InputSource
         The TXmlInputSource object containing the
         internal subset of a DTD to process.
      - Standalone
         Specifies the standalone status of the XML
         document that contains the internal subset
         to be processed.  This is one of the following 
         values:
         STANDALONE_YES
           The document starts with an XML declaration
           containing a standalone document declaration 
           of value 'yes'.
         STANDALONE_NO
           The document starts with an XML declaration
           containing a standalone document declaration
           of value 'no'.
         STANDALONE_UNSPECIFIED
           The document starts with an XML declaration
           containing no standalone document declaration, 
           or there was no declaration found at the
           beginning of the document, or the standalone
           status of the document is unknown.
      - ResolveExtPEs
         If True, references to external parameter 
         entities are automatically resolved and 
         their replacement text is parsed. If False, 
         references to external parameter entities 
         are not resolved; instead a 
         TXmlExternalPEReferenceSignal is sent.

      Return Value:
         Returns True if the XML document has been
         succesfully processed, otherwise False is
         returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Prepare; virtual;
    <literallayout>
      Advices the Reader to initialize itself to
      prepare one or more contiguous parsing operations.

      When finishing a parsing operation the Reader
      keeps some information, for example a list that
      records the element types of all attribute-list 
      declarations read.  This information is re-used
      in the following parsing operation, for example
      to issue a warning when more than one 
      attribute-list declaration is provided for a 
      given element type.  Calling Prepare
      advises the Reader to discard all information
      gathered during previous parsing operations.
      
      Applications should call Prepare before 
      calling a parsing method, unless the parsing
      operation to be performed is a sequel of the 
      previous parsing operation.  An example of such
      a sequel is the parsing of an external subset
      of a DTD after parsing its internal subset.  In
      this case the Prepare method must only be
      called before parsing the internal subset:

        Prepare;
        ParseIntSubset(MyIntInputSource);
        ParseExtSubset(MyExtInputSource);
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>

<sect3>
<title>TXmlStandardDomReader = class (TXmlCustomReader)</title>

  <para>The TXmlStandardDomReader analyzes a document tree (but not the DTD Model) or a part of a document tree.  For each of its structure units it calls the 'processSignal' function of its associated Signal Handler, if any, passing an appropriate XML Signal object.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ContextNode: TDomNode (readonly)
    <literallayout>
      The document tree node which is currently
      being processed, or nil if the Reader is
      inactive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DOMImpl: TDomImplementation (inherited from TXmlCustomReader)
    <literallayout>
      The TDomImplementation object related to the
      processor pipeline, which is primarily used for
      error reporting through its OnError event.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IgnoreUnspecified: Boolean
    <literallayout>
      If set to 'True', unspecified attributes, i.e. 
      fixed and default attributes which have been added 
      to the node tree during validation, are skipped.
      If set to 'False', unspecified attributes also
      generate an XML Signal.

      The default value of IgnoreUnspecified is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextHandler: TXmlCustomHandler (inherited from TXmlCustomReader)
    <literallayout>
      The TXmlCustomHandler object which further
      processes the XML document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PrefixMapping: Boolean
    <literallayout>
      If set to 'True', TXmlStartPrefixMappingSignal
      and TXmlEndPrefixMappingSignal objects are
      generated on every attributes with the prefix
      or the qualified name of value 'xmlns'.
      If set to 'False', no  TXmlStartPrefixMappingSignal
      or TXmlEndPrefixMappingSignal objects are
      generated.  PrefixMapping should (only) be set 
      to 'True' if there is a namespace-aware Signal
      Handler further down in the processing pipeline.  
      The default value of PrefixMapping is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SignalElementID: Boolean
    <literallayout>
      If set to 'True', then each TXmlStartElementSignal
      object which is passed to the associated Signal
      Handler also contains the Element's ID value, if
      any. This works only for non namespace-aware
      document trees which have been successfully 
      validated.
      
      Sending the ID value is especially useful when 
      parsing a non namespace-aware into a namespace-
      aware document tree, since the latter does not
      provide a method to automatically identify ID
      attributes. Note that in this case the 
      BuildIDList property of an associated 
      TXmlDomBuilder component must be set to 'True'.
      
      It is not recommended to set this property to
      'True' unless you really need to sent the 
      the Elements' ID values, because calculating 
      the ID values is time consuming.
      
      Hint: See the description of the 
      TXmlDomBuilder.BuildIDList property for
      more information about how to process ID value
      information when building a namespace-aware DOM 
      tree.
      
      The default value of SignalElementID is 'False'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SuppressXmlns: Boolean
    <literallayout>
      If set to 'True' no signals about attributes 
      with the prefix or the qualified name 'xmlns' 
      are passed to the next Handler.  The default 
      value of SuppressXmlns is 'False'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnError: TDomErrorNotifyEvent (inherited from TXmlCustomReader)
    <literallayout>
      TDomErrorNotifyEvent =
          procedure(sender: TObject;
                    error: TDomError)
                   of object;

      This event is called when this TXmlStandardDomReader
      object receives a notification of a parsing error.

      Parameters:
      - sender
         The object that called the event, i.e. this
         TXmlStandardDomReader object.
      - error
         The error object that describes the error, this
         object may be reused by the Sender across
         multiple calls to the handleError method.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function Parse(const SourceNode: TDomNode):Boolean; virtual;
    <literallayout>
      Analyzes a DOM tree or subtree (but not its DTD
      model), starting with the specified 'sourceNode' 
      by splitting it into its structure units such as
      tags, text, comments, etc.  The boundaries of 
      most, but not all, of these structure units are 
      identical with the extent of a DOM node.  For 
      each of this structure units the 'processSignal'
      function of the specified 'NextHandler', if any,
      is called, passing an appropriate XML Signal 
      object.  
      
      The first signal sent is always an 
      XmlStartDocumentSignal object; the last signal
      sent is a TXmlCompletedSignal object.  If the 
      parsing was aborted, a TXmlAbortedSignal object 
      is sent instead of a TXmlCompletedSignal object.

      Parameters:
      - sourceNode
         A TDomDocument node or the first node of the
         a DOM subtree to be processed.

      Return Value:
         Returns 'True' if the DOM tree has been
         succesfully processed, otherwise 'False' is
         returned.

      Exceptions:
      - EAccessViolation
         Raised if SourceNode is nil.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>

</sect2>


<sect2>
<title>XML Signal Handler Classes</title>

  <para>This section desribes the Signal Handler classes, used to process XML Signals in a processing pipeline.</para>


<sect3>
<title>TXmlCustomHandler = class(TDomBaseComponent);</title>

  <para>TXmlCustomHandler is the abstract base class of all Signal Handler classes. Signal Handlers are usually used in a procesing pipeline starting with an XML Reader. The XML Reader analyzes an XML source by executing basic wellformedness tests and subsequently creating XML Signals and passing them to a Signal Handler by calling its 'processSignal' procedure.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure processSignal(const signal: TXmlSignal); virtual; abstract;
    <literallayout>
      Processes an XML Signal.  Derived Signal 
      Handlers must override this function to 
      implement signal specific behavior.

      Parameters: 
      - signal
         The TXmlSignal object to be processed.

      Exceptions:
         During signal processing, any type of 
         exception may be raised.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlStandardHandler = class(TXmlCustomHandler)</title>

  <para>A TXmlStandardHandler object propagates the XML Signals it receives via its 'processSignal' procedure to the TXmlCustomHandler object specified in its 'NextHandler' property.  Before a TXmlStandardHandler propagates the XML Signal it triggers an OnSignal event.  An application may provide an event handler for the OnSignal event to evaluate or modify the TXmlSignal instance before it is further propagated or to stop the propagation of the Signal.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property NextHandler: TXmlCustomHandler
    <literallayout>
      The TXmlCustomHandler object which further
      processes the XML Signal object received
      by the 'processSignal' procedure.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnSignal: TXmlProcessingEvent
    <literallayout>
      TXmlProcessingEvent =
          procedure(sender: TObject;
                    signal: TXmlSignal;
                    var accept: Boolean) 
                   of object;

      This event is triggered whenever the 
      TXmlStandardHandler receives an XML Signal
      object to be processed.  The event passes 
      the TXmlSignal object to the application
      before it is passed to the associated
      TXmlCustomHandler object specified in the
      NextHandler property.  An application may
      provide an event handler for the OnSignal 
      event to evaluate or modify the TXmlSignal 
      instance before it is further propagated or
      to stop the propagation of the Signal.

      Parameters:
      - sender
         The object that called the event, i.e. this
         TXmlStreamBuilder object.
      - signal
         The TXmlSignal object to be processed.

      Var Parameters:
      - accept
         This parameter is initially set to 'True'.
         An application may change it to 'False'
         in order to stop the propagation of the
         Signal.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OnSignaled: TXmlProcessingEvent
    <literallayout>
      TXmlProcessingEvent =
          procedure(sender: TObject;
                    signal: TXmlSignal) 
                   of object;

      This event is triggered after the 
      TXmlStandardHandler received and processed
      an XML Signal object, i.e. after it was 
      passed to the associated TXmlCustomHandler 
      object specified in the NextHandler 
      property.  An application may provide an 
      event handler for the OnSignal event to 
      evaluate and react to the TXmlSignal instance.
      An OnSignaled event is triggered even if an 
      event Handler for the corresponding OnSignal 
      event set the Accept parameter to False.
      
      Hint: Note that a Signal might be modified by
      an OnSignal event handler or by any 
      TXmlCustomHandler object in the subordinated 
      processing pipeline.  In this case, the 
      properties of the Signal passed by the 
      OnSignaled event differ from the properties of
      the Signal passed by the OnSignal event, even
      though both Signals are the same object.

      Parameters:
      - sender
         The object that called the event, i.e. this
         TXmlStreamBuilder object.
      - signal
         The TXmlSignal object to be processed.

      Var Parameters:
      - accept
         This parameter is initially set to 'True'.
         An application may change it to 'False'
         in order to stop the propagation of the
         Signal.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure processSignal(const signal: TXmlSignal); override; (inherited from TXmlCustomHandler)
    <literallayout>
      Processes a TXmlSignal object by triggering
      an OnSignal event and afterwards calling 
      the 'processSignal' procedure of the Signal
      Handler specified by 'NextHandler', if any,
      passing the TXmlSignal object as a parameter.

      Parameters: 
      - signal
         The TXmlSignal object to be processed.

      Exceptions:
         During signal processing, any type of 
         exception may be raised.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlDistributor = class(TXmlCustomHandler)</title>

  <para>A Distributor propagates the XML Signals it receives via its 'processSignal' procedure to an ordered series of TXmlCustomHandler objects as specified in the 'NextHandlers' collection.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property NextHandlers: TXmlHandlers
    <literallayout>
      A TXmlHandlers collection which contains an
      ordered list pointing to TXmlCustomHandler
      objects which further processes the XML Signal 
      object received by the 'processSignal' procedure.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure processSignal(const signal: TXmlSignal); override; (inherited from TXmlCustomHandler)
    <literallayout>
      Processes a TXmlSignal object by calling 
      the 'processSignal' procedure of the Signal
      Handlers, if any, specified in the 
      'NextHandlers' collection by passing a copy
      of the TXmlSignal object as a parameter.

      Parameters: 
      - signal
         The TXmlSignal object to be processed.

      Exceptions:
      - EParserException
         Raised if one of the attached Signal 
         Handlers raises an exception (of any
         type) during signal processing.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlWFTestHandler = class(TXmlCustomHandler)</title>

  <para>The purpose of a TXmlWFTestHandler component is to perform a wellformedness test of an XML document or DTD.  It receives informations about the structure units of an XML document in the form of XML Signals and reports errors, fatal errors and warnings to the Reader.  After succesfully evaluating the information, usually if no "fatal error" was detected, the XML Signal is passed to the Signal Handler specified in the 'NextHandler' property, if any.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property NextHandler: TXmlCustomHandler
    <literallayout>
      The TXmlCustomHandler object which further
      processes the XML Signal object received
      by the 'processSignal' procedure.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ActivityStatus: TXmlActivityStatus (Boolean)
    <literallayout>
      Indicates what kind of parsing session is 
      currently active.  The initial activity
      status is 'asInactive', indicating that
      no parsing session is active. The following
      table shows which XML Signals change the 
      activity status:

                                      |        New
                 XML Signal           | Activity Status
      --------------------------------+----------------   
                                      |
      TXmlStartDocumentSignal         | asDocActive
                                      |
      TXmlStartDocumentFragementSignal| asDocFragActive
                                      |
      TXmlStartExtDtdSignal           | asExtDtdActive
                                      |
      TXmlStartIntDtdSignal           | asIntDtdActive
                                      |
      TXmlCompletedSignal             | asInactive
                                      |
      TXmlAbortedSignal               | asInactive
                                      |
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure processSignal(const signal: TXmlSignal); override; (inherited from TXmlCustomHandler)
    <literallayout>
      Tests whether the specified TXmlSignal object
      represents a wellformed unit of XML or DTD 
      code.
      
      By default, if an XML fatal error is detected 
      the component informs the application about
      the fatal error, as described above, and then 
      stops to propagate the XML Signal to the next 
      handler and raises an EParserException.  

      By default, if an XML error or warning is 
      detected the component informs the application 
      about the error or warning, as described above, 
      but continues to propagate the XML Signal to
      the Signal Handler specified by 'NextHandlers', 
      if any, calling its 'processSignal' procedure. 

      If neither a fatal error, nor an error, nor
      a warning is detected, the XML Signal is passed
      to the Signal Handler specified by 
      'NextHandlers', if any, calling its 
      'processSignal' procedure.

      If an error is detected, the application is 
      informed about it, as described above, and may
      alter the default behavior.

      Parameters: 
      - signal
         The TXmlSignal object to be processed.

      Exceptions:
         During signal processing, any type of 
         exception may be raised.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlNamespaceSignalGenerator = class(TXmlCustomHandler)</title>

  <para>The TXmlNamespaceSignalGenerator component is used in a Signal pipeline to filter XML Signals of namespace declaration attributes and generate corresponding TXmlStartPrefixMappingSignal and TXmlEndPrefixMappingSignal objects to be passed to the Signal Handler specified in the 'NextHandler' property, if any.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property NextHandler: TXmlCustomHandler
    <literallayout>
      The TXmlCustomHandler object which further
      processes the XML Signal object received
      by the 'processSignal' procedure.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PrefixMapping: Boolean
    <literallayout>
      If set to 'True', TXmlStartPrefixMappingSignal
      and TXmlEndPrefixMappingSignal objects are
      generated on every attributes with the prefix
      or the qualified name of value 'xmlns'.
      If set to 'False', no  TXmlStartPrefixMappingSignal
      or TXmlEndPrefixMappingSignal objects are
      generated.  PrefixMapping should (only) be set 
      to 'True' if there is a namespace-aware Signal
      Handler further down in the processing pipeline.  

      The default value of PrefixMapping is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SuppressXmlns: Boolean
    <literallayout>
      If set to 'True' no signals about attributes 
      with the prefix or the qualified name 'xmlns' 
      are passed to the next Handler.  
      
      The default value of SuppressXmlns is 'False'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure processSignal(const signal: TXmlSignal); override; (inherited from TXmlCustomHandler)
    <literallayout>
      Modifies the procession of element and attribute
      Signals in an XML Signal pipeline.
      
      Processing TXmlStartElementSignal and accompanying 
      TXmlAttributeSignal objects is delayed until 
      another XML Signal has been received.  Then,
      if the PrefixMapping flag is 'True', for each
      attribute Signal received which contains a 
      namespace declaration its corresponding 
      TXmlStartPrefixMappingSignal objects is sent.  
      Next, a TXmlStartElementSignal object is sent 
      which is equivalent to the TXmlStartElementSignal
      object received before.  
      Finally, TXmlAttributeSignal objects are sent 
      which are equivalent to the TXmlAttributeSignal 
      objects received before.  If the SuppressXmlns 
      flag is 'True' all TXmlAttributeSignal objects 
      are skipped which contain a namespace declaration.
      
      After processing a TXmlEndElementSignal object,
      if the PrefixMapping flag is 'True', a
      TXmlEndPrefixMappingSignal object is sent for
      each prefix mapping of the corresponding start
      element.

      All other Signals are passed unaltered to the 
      Signal Handler specified by 'NextHandlers', if 
      any, calling its 'processSignal' procedure.

      Parameters: 
      - signal
         The TXmlSignal object to be processed.

      Exceptions:
         During signal processing, any type of 
         exception may be raised.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlDomBuilder = class(TXmlCustomHandler)</title>

  <para>A TXmlDomBuilder object is used to construct a DOM tree or a branch of a DOM tree.  It receives informations about the structure units of an XML document in the form of XML Signals.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property BuildIDList: Boolean
    <literallayout>
      Indicates how to process a TXmlStartElementSignal
      object.  
      
      For namespace-aware DOM trees, if a 
      TXmlStartElementSignal object is received with an
      ID value other than an empty WideString and if
      'BuildIDList' is 'True', then the new TDomElement
      node which had been inserted into the DOM tree is
      also added with its ID value to the internal IDs 
      list of its owner document (see also the
      description of TDtdValidationAgent.ValidateDocument).
      Duplicate ID values are being ignored.  The ID 
      values are not tested for wellformedness.
      
      Hint: See the description of the 
      TXmlStandardDomReader.SignalElementID property for
      more information about how to include ID value
      information in TXmlStartElementSignal object when
      processing (reading) a non namespace-aware DOM tree.
      
      For building a non namespace-aware DOM tree the 
      value of the 'BuildIDList' property has no meaning.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem> 

    <listitem>
    <para>
    property DocTypeDeclTreatment: TDomDocTypeDeclTreatment
    <literallayout>
      Indicates how to process a TXmlDoctypeSignal
      object.  The possible values of this property
      have the following meaning:
      - dtIgnore
         The TXmlDoctypeSignal object is ignored.
      - dtCheckWellformedness
         A TDomDocumentTypeDecl node is inserted into the 
         DOM tree, checked for wellformedness and a DTD 
         model is built as if parsed with a 
         non-validating XML processor (i.e. references 
         to external parameter entities are ignored).  
         Note that not every violation of a 
         wellformedness constraint as defined in 
         [XML 1.0] can be detected by parsing a document.
	 Some of them can only be discovered by 
	 validating the document.
      - dtCheckValidity:
         A TDomDocumentTypeDecl node is inserted into the 
         DOM tree, checked for validity and a DTD model 
         is built as if parsed with a validating XML 
         processor.

      The default value is dtCheckWellformedness.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property KeepCDATASections: Boolean
    <literallayout>
      Indicates how to process a TXmlCDATASignal
      object.  If a TXmlCDATASignal object is
      received and 'KeepCDATASections' is 'True',
      a TDomCDATASection node is inserted into the
      DOM tree.  If 'KeepCDATASections' is 'False',
      a TDomText node is inserted into the DOM
      tree or the data is combined with any
      adjacent TDomText node.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property KeepComments: Boolean
    <literallayout>
      Indicates how to process a TXmlCommentSignal
      object.  If a TXmlCommentSignal object is
      received and 'KeepComments' is 'True',
      a TDomComment node is inserted into the
      DOM tree.  If 'KeepComments' is 'False',
      nothing is done.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property KeepEntityRefs: Boolean
    <literallayout>
      Indicates how to process a TXmlEntityRefSignal
      object representing a reference to a predefined 
      entity.  If such an object is received and 
      'KeepEntityRefs' is 'True', a TDomEntityReference 
      node is inserted into the DOM tree.  If 
      'KeepEntityRefs' is 'False', a TDomText node of
      the entity's replacement text is inserted into 
      the DOM tree or the replacement text is combined 
      with any adjacent TDomText node.

      This option has no effect on predefined entity 
      references in attribute values, because they are 
      resolved 'on the fly' when the value of an 
      TDomAttr node is calculated.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ReferenceNode: TDomNode
    <literallayout>
      The node relative to which the next ProcessSignal 
      call attaches new nodes. After invoking a 
      ProcessSignal call the value of ReferenceNode may
      change. If ReferenceNode is 'nil' no new nodes 
      will be attached.

      If the RootDocument document of the 
      ReferenceNode is of type TDomDocumentNS (or of a 
      type derived from TDomDocumentNS), the DOM tree 
      is built using namespace element and attribute 
      nodes.  If the RootDocument document of the 
      ReferenceNode is of type TDomDocument, the DOM tree
      is built using non-namespace element and attribute 
      nodes.

      Information about the prefix to namespace-URI
      mapping reaches the builder through
      TXmlStartPrefixMappingSignal and 
      TXmlEndPrefixMappingSignal objects.
      TXmlDomBuilder performs only basic namespace
      validity tests, so applications are adviced to
      process only valid XML-namespace documents.
      (Complete tests are postponed to a future XDOM
      release.)  In the current XDOM release the only
      component which provides the necessary
      TXmlStartPrefixMappingSignal and 
      TXmlEndPrefixMappingSignal objects
      is the TXmlStandardDomReader component.  So for
      to parse an XML document into a namespace-aware
      DOM tree first parse the XML document into an
      ordinary DOM tree, validate it and resolve its
      entity reference nodes if necessary, and finally
      use a TXmlStandardDomReader with its
      PrefixMappping and SignalElementID properties 
      set to 'True' to call a TXmlDomBuilder with its
      BuildIDList property set to 'True' and with a 
      ReferenceNode of type TDomDocumentNS (or 
      TDomDocumentXPath, if you need a document tree
      according to the XPath data model).
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure ProcessSignal(const Signal: TXmlSignal); override; (inherited from TXmlCustomHandler)
    <literallayout>
      Processes an XML Signal by building a DOM tree.
      
      Signals are not guaranteed to be tested for 
      wellformedness.  The DOM tree built when
      the TXmlDomBuilder component receives 
      non-wellformed Signals, either by passing 
      individual non-wellformed Signals or by 
      passing a sequence of Signals which do
      not represent a wellformed XML document (for
      example if individual tags do not nest 
      properly), is unspecified.
      
      On receiving a TXmlDoctypeSignal, when the  
      AutoPrepare property is set to 
      'AP_INTERNAL_DECLARATIONS' or 'AP_COMPLETE',
      and the ReferenceNode is of type TDomDocument,
      the structure model of the document is 
      automatically being prepared and an 
      EParserException is raised, if the preparation 
      fails.

      Parameters: 
      - Signal
         The TXmlSignal object to be processed.

      Exceptions:
         During signal processing, any type of 
         exception may be raised.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlDtdModelBuilder = class(TXmlCustomHandler)</title>

  <para>A TXmlDtdModelBuilder object is used to construct a DTD Model. It receives informations about the structure units of a DTD in the form of XML Signals.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ActivityStatus: TXmlActivityStatus (Boolean)
    <literallayout>
      Indicates what kind of parsing session is 
      currently active.  The initial activity
      status is 'asInactive', indicating that
      no parsing session is active. The following
      table shows which XML Signals change the 
      activity status:

                                      |        New
                 XML Signal           | Activity Status
      --------------------------------+----------------   
                                      |
      TXmlStartExtDtdSignal           | asExtDtdActive
                                      |
      TXmlStartIntDtdSignal           | asIntDtdActive
                                      |
      TXmlCompletedSignal             | asInactive
                                      |
      TXmlAbortedSignal               | asInactive
                                      |
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DtdModel: TDtdModel
    <literallayout>
      The DTD model to be built.  If DtdModel is 'nil' 
      nothing will happen.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure ProcessSignal(const Signal: TXmlSignal); override; (inherited from TXmlCustomHandler)
    <literallayout>
      Processes an XML Signal by building a DTD model.
      
      Signals are not guaranteed to be tested for 
      wellformedness.  The DTD model built when
      the TXmlDtdModelBuilder component receives 
      non-wellformed Signals, either by passing 
      individual non-wellformed Signals or by 
      passing a sequence of Signals which do
      not represent a wellformed DTD, is 
      unspecified.

      Parameters: 
      - Signal
         The TXmlSignal object to be processed.

      Exceptions:
         During signal processing, any type of 
         exception may be raised, if the signal
         or the sequence of signals are not
         well-formed XML.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>


<sect3>
<title>TXmlStreamBuilder = class(TXmlCustomHandler)</title>

  <para>A TXmlStreamBuilder component is used to serialize (write) out an XML document or a fragment of it into a stream via a TXmlOutputSource object.  It receives informations about the structure elements of a DOM tree and reports serious errors as described above. If another ContentHandler is specified in the 'NextHandler' property, then after succesfully evaluating the information, i.e. if no serious error was detected, the appropriate function of this Handler is called.</para>

  <para>Before a TXmlStreamBuilder component can be used it must be associated with a TXmlOutputSource object at runtime.  Here is an example:</para>

  <programlisting>
  MyStream := TStream.Create;
  try
    MyOutputSrc := TXmlOutputSource.Create(MyStream, 4096);
    try
      MyXmlStreamBuilder.OutputSource := MyOutputSrc;
      ... // Do the parsing here.
      MyOutputSrc.Flushbuffer;
      ... // Do stream operations either here
    finally
      // First, set the OutputSource property to nil !!!
      MyXmlStreamBuilder.OutputSource:= nil;
      MyOutputSrc.Free;
    end;
    ...   // or do stream operations here.
  finally
    MyStream.Free;
  end;
  </programlisting>

  <para>Hints:  (i) The buffer size specified when creating the TXmlOutputSource object should be a multiplicity of 1024.  (ii) To synchronize the buffer of the TXmlOutputSource object with the Stream use the TXmlOutputSource.flushbuffer method.  When you free the TXmlOutputSource object this synchronization is done implicitly.  Therefore you must not free the Stream before the TXmlOutputSource object.  (iii) Before you free the TXmlOutputSource you must set the 'outputSource' property of its associated TXmlStreamBuilder to nil.  (iv) The destination stream is not cleared by any of TXmlStreamBuilder's methods, so you can append different serialized node trees to the same stream.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property UseByteOrderMark: TXmlBOMOpt
    <literallayout>
      A set of constants which determines whether the 
      output is prefixed by a byte order mark when 
      the StartDoc or StartExtDtd function is called.  
      A byte order mark is used if the output encoding is
      UTF-8, UTF-16BE, UTF-16LE, or ISO-10646-UCS-2 and a
      corresponding constant (bomUTF8 for UTF-8, bomUTF16 
      for UTF-16BE or UTF-16LE, bomUCS2 for ISO-10646-UCS-2) 
      is contained in the set.  When using other encodings
      a byte order mark is never used.
      
      The default value is [bomUTF16, bomUCS2], i.e. a byte
      order mark is used when the encoding is UTF-16BE, 
      UTF-16LE or ISO-10646-UCS-2.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IncludeXmlDecl: Boolean
    <literallayout>
      Determines whether to include an XML, or text 
      declaration respectively, when the StartDoc
      or StartExtDtd function is called.

      The default value is 'True'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ByteCount: Integer (readonly) 
    <literallayout>
      The number of bytes of the current document so far
      serialized.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CharacterCount: Integer (readonly) 
    <literallayout>
      The number of Unicode characters of the current 
      document so far serialized.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ColumnCount: Integer (readonly) 
    <literallayout>
      The number of Unicode characters (including Tabs)
      of the current document so far serialized after 
      the last Line Feed character (#$A).  If no Line 
      Feed has been serialized so far 'columnCount'
      returns the number of Unicode characters so far
      serialized.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property CurrentEncoding: WideString (readonly)
    <literallayout>
      The actual character encoding in which the output
      will be written or an empty WideString if this 
      information is not available.  The actual encoding 
      to use when writing is determined as follows:  If 
      the encoding has been specified, that value will be 
      used.  If the encoding is an empty WideString, but 
      the item to be written is a TDomDocument node which
      specifies an encoding, that value will be used.  If
      neither of the above provides an encoding name, a 
      default encoding of "UTF-8" will be used.
      It is recommended to use 'UTF-16LE' whenever
      possible, because it shows by far the best
      performance, since no addional transformation
      routine needs to be called internally.
    </literallayout>
    </para>
    </listitem>

      <listitem>
    <para>
    property CurrentCodecClass: TUnicodeCodecClass (readonly)
    <literallayout>
      The codec class determining the actual character 
      encoding in which the output will be written.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DefaultEncoding: WideString
    <literallayout>
      The default character encoding in which the output
      will be written.  The actual encoding to use when
      writing is determined as follows:  If the encoding
      has been specified, that value will be used.  If
      the encoding is an empty WideString, but the item
      to be written is a TDomDocument node which specifies
      an encoding, that value will be used.  If neither
      of the above provides an encoding name, a default
      encoding of "UTF-8" will be used.
      It is recommended to use 'UTF-16LE' whenever
      possible, because it shows by far the best
      performance, since no addional transformation
      routine needs to be called internally.

      Exceptions on setting:
      - ENot_Supported_Err
         Raised if the specified encoding is not
         supported.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DefaultCodecClass: TUnicodeCodecClass (readonly)
    <literallayout>
      The codec class determining the default character
      encoding in which the output will be written.
      To set the 'defaultCodecClass' set the
      'defaultEncoding' to a corresponding encoding
      name.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property LineFeedCount: Integer (readonly) 
    <literallayout>
      The number of Line Feed characters (#$A) of the 
      current document so far serialized.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OutputSource: TXmlOutputSource
    <literallayout>
      The TXmlOutputSource object which is used to
      write the data to the destination stream.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property TabCount: Integer (readonly) 
    <literallayout>
      The number of Tab characters (#$9) of the
      current document so far serialized after 
      the last Line Feed character (#$A).  If no Line 
      Feed has been serialized so far 'tabCount'
      returns the number of Tab characters so far
      serialized.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnAfterWrite: TDomSerializationEvent
    <literallayout>
      TDomSerializationEvent = 
          procedure(Sender: TXmlStreamBuilder;
                    PieceType: TDomPieceType;
                    const Locator: IDomLocator) 
                   of object;

      This event is triggered after the TXmlStreamBuilder
      object has serialized a structure element of an XML
      document.  Serialization events for individual DTD 
      structure elements are only triggered, if the 
      TXmlStreamBuilder receives the XML Signals 
      individually; if instead it receives a DTD to be
      serialized in the form of a TXmlDoctypeSignal, it
      triggers the OnAfterWrite event only once.

      Parameters:
      - Sender
         The object that called the event, i.e. this
         TXmlStreamBuilder object.
      - PieceType
         Indicates what type of structure element
         has been serialized.
      - Locator
         A IDomLocator interface providing location 
         information about the serialized structure 
         element.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OnBeforeWrite: TDomSerializationEvent
    <literallayout>
      TDomSerializationEvent = 
          procedure(Sender: TXmlStreamBuilder;
                    PieceType: TDomPieceType;
                    const Locator: IDomLocator) 
                   of object;

      This event is triggered before the TXmlStreamBuilder
      object serializes a structure element of an XML
      document.    Serialization events for individual DTD 
      structure elements are only triggered, if the 
      TXmlStreamBuilder receives the XML Signals 
      individually; if instead it receives a DTD to be
      serialized in the form of a TXmlDoctypeSignal, it
      triggers the OnBeforeWrite event only once.

      Parameters:
      - Sender
         The object that called the event, i.e. this
         TXmlStreamBuilder object.
      - PieceType
         Indicates what type of structure element
         is to be serialized.
      - Locator
         A IDomLocator interface providing location 
         information about the structure element
         to be serialized.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure ProcessSignal(const Signal: TXmlSignal); override; (inherited from TXmlCustomHandler)
    <literallayout>
      Serializes the specified XML Signal.

      Parameters: 
      - Signal
         The TXmlSignal object to be processed.

      Exceptions:
         During signal processing, any type of 
         exception may be raised.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

</sect3>

</sect2>

</sect1>

</chapter>


<chapter>
<title>Document Object Model Traversal (#)</title>

<para>For a detailed description of the behavior of Iterators and TreeWalkers see the corresponding part of the DOM 2 specification, namely: <quote>Document Object Model (DOM) Level 2 Traversal and Range Specification</quote>, section 1, available at "http://www.w3.org/TR/DOM-Level-2-Traversal-Range".</para>

<sect1>
<title>Typed Constants</title>

  <para>The following typed constants are used with Iterators and TreeWalkers.</para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    TDomNodeEvent = (neClearing, neRemoving);
    </para>
    <para> TDomNodeEvent is internally used to specify the type of event when an Iterator is notified that a node is about to be cleared or removed.</para>
    </listitem>

    <listitem>
    <para>
    TDomPosition = (posBefore, posAfter);
    </para>
    <para> TDomNodeEvent is internally used to specify the position of an Iterator relative to its reference node.</para>
    </listitem>

  </itemizedlist>
  </para>
  
</sect1>


<sect1>
<title>TDomNodeIterator = class (#)</title>

  <para>A TDomNodeIterator objects allows the members of a list of nodes to be returned sequentially. This list will always consist of the nodes of a subtree, presented in document order. When an iterator is first created, calling its NextNode method returns the first node in the logical view of the subtree; in most cases, this is the root of the subtree. Each successive call advances the NodeIterator through the list, returning the next node available in the logical view. When no more nodes are visible, NextNode returns nil.</para>

  <para> TDomNodeIterator objects are created using the createNodeIterator method found in the document classes. When an iterator is created, a set of flags can be used to determine which node types will be "visible" and which nodes will be "invisible" while traversing the tree. Nodes that are "invisible" are skipped over by the iterator as though they did not exist.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property expandEntityReferences: Boolean (readonly)
    <literallayout>
      The value of this flag determines whether the children
      of entity reference nodes are totally ignored by the
      iterator.  If false, they and their descendents will be
      rejected.  Note that this rejection takes precedence over
      whatToShow and the filter. Also note that this is currently
      the only situation where Iterators may reject a complete
      subtree rather than skipping individual nodes.

      To produce a view of the document that has entity
      references expanded and does not expose the entity
      reference node itself, use the whatToShow flags to hide
      the entity reference node and set expandEntityReferences
      to true when creating the iterator. To produce a view of
      the document that has entity reference nodes but no
      entity expansion, use the whatToShow flags to show the
      entity reference node and set expandEntityReferences to
      false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property filter: TDomNodeFilter (readonly)
    <literallayout>
      The filter used to screen nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property root: TDomNode (readonly)
    <literallayout>
      The root node of the Iterator, as specified when it
      was created.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property whatToShow: TDomWhatToShow (readonly)
    <literallayout>
      This attribute determines which node types are presented
      via the iterator.  The available set of constants is
      defined in the TDomNodeFilter class.  Nodes not
      accepted by whatToShow will be skipped, but their
      children may still be considered. Note that this skip
      takes precedence over the filter, if any.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure detach; virtual;
    <literallayout>
      Detaches the iterator from the set which it iterated
      over, releasing any computational resources and
      placing the iterator in the INVALID state.  After
      detach has been invoked, calls to nextNode or
      previousNode will raise the exception
      INVALID_STATE_ERR.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function NextNode: TDomNode; virtual;
    <literallayout>
      Returns the next node in the set and advances the
      position of the iterator in the set. After a
      NodeIterator is created, the first call to nextNode
      returns the first node in the set.

      Return Value:
         The next Node in the set being iterated over, or
         nil if there are no more members in that set.
      Exceptions:
      - EInvalid_State_Err
          Raised if this method is called after the detach
          method was invoked.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function PreviousNode: TDomNode; virtual;
    <literallayout>
      Returns the previous node in the set and moves the
      position of the iterator backwards in the set.

      Return Value:
         The next Node in the set being iterated over, or
         nil if there are no more members in that set.

      Exceptions:
      - EInvalid_State_Err
          Raised if this method is called after the detach
          method was invoked.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TDomTreeWalker = class (#)</title>

  <para>The TDomTreeWalker class provides many of the same benefits as the TDomNodeIterator class. The main difference between these two classes is that the TreeWalker presents a tree-oriented view of the nodes in a subtree, rather than the Iterator's list-oriented view. In other words, an Iterator allows you to move forward or back, but a TreeWalker allows you to also move to the parent of a node, to one of its children, or to a sibling.</para>

  <para>Using a TreeWalker is quite similar to navigation using the node directly, and the navigation methods for the two classes are analogous. The advantage of using a TreeWalker instead of direct Node navigation is that the TreeWalker allows the user to choose an appropriate view of the tree. Flags may be used to show or hide Comments or ProcessingInstructions; entities may be expanded or shown as EntityReference nodes. In addition, TDomNodeFilter objects may be used to present a custom view of the tree.</para>

  <para>Omitting nodes from the logical view of a subtree can result in a structure that is substantially different from the same subtree in the complete, unfiltered document. Nodes that are siblings in the TreeWalker view may be children of different, widely separated nodes in the original view. For instance, consider a Filter that skips all nodes except for Text nodes and the root node of a document. In the logical view that results, all text nodes will be siblings and appear as direct children of the root node, no matter how deeply nested the structure of the original document.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    property currentNode: TDomNode
    <literallayout>
      The node at which the TreeWalker is currently positioned.
      The value must not be nil. Alterations to the DOM tree
      may cause the current node to no longer be accepted by
      the TreeWalker's associated filter. currentNode may also
      be explicitly set to any node, whether or not it is
      within the subtree specified by the root node or would
      be accepted by the filter and whatToShow flags. Further
      traversal occurs relative to currentNode even if it is
      not part of the current view by applying the filters in
      the requested direction (not changing currentNode where
      no traversal is possible).

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified currentNode is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property expandEntityReferences: Boolean (readonly)
    <literallayout>
      The value of this flag determines whether the children
      of entity reference nodes are visible to the TreeWalker.
      If false, they and their descendents will be rejected.
      Note that this rejection takes precedence over whatToShow
      and the filter, if any.

      To produce a view of the document that has entity
      references expanded and does not expose the entity
      reference node itself, use the whatToShow flags to
      hide the entity reference node and set
      expandEntityReferences to true when creating the
      TreeWalker.

      To produce a view of the document that has entity
      reference nodes but no entity expansion, use the
      whatToShow flags to show the entity reference node
      and set expandEntityReferences to false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property filter: TDomNodeFilter (readonly)
    <literallayout>
      The filter used to screen nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property root: TDomNode (readonly)
    <literallayout>
      The root node of the Iterator, as specified when
      it was created.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property whatToShow: TDomWhatToShow (readonly)
    <literallayout>
      This attribute determines which node types are
      presented via the TreeWalker.  The available set
      of constants is defined in the TDomNodeFilter
      class. Nodes not accepted by whatToShow will
      be skipped, but their children may still be
      considered. Note that this skip takes precedence
      over the filter, if any.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
  <listitem>
  <para>
    function firstChild: TDomNode; virtual;
    <literallayout>
      Moves the TDomTreeWalker to the first visible child
      of the current node, and returns the new node. If the
      current node has no visible children, returns nil, and
      retains the current node.

      Return Value:
         The new node, or nil if the current node has no
         visible children in the TDomTreeWalker's logical
         view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function lastChild: TDomNode; virtual;
    <literallayout>
      Moves the TDomTreeWalker to the last visible
      child of the current node, and returns the new
      node.  If the current node has no visible
      children, returns nil, and retains the current
      node.

      Return Value:
         The new node, or nil if the current node has
         no visible children in the TDomTreeWalker's
         logical view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function nextNode: TDomNode; virtual;
    <literallayout>
      Moves the TDomTreeWalker to the next visible node
      in document order relative to the current node,
      and returns the new node.  If the current node has
      no next node, or if the search for nextNode
      attempts to step upward from the TDomTreeWalker's
      root node, returns nil, and retains the current
      node.

      Return Value:
         The new node, or nil if the current node has no
         next node in the TDomTreeWalker's logical view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function nextSibling: TDomNode; virtual;
    <literallayout>
      Moves the TDomTreeWalker to the next sibling
      of the current node. If the current node has
      no visible next sibling returns nil, and retains
      the current node.

      Return Value:
         The new node, or nil if the current node has
         no next sibling in the TDomTreeWalker's logical
         view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function parentNode: TDomNode; virtual;
    <literallayout>
      Moves to and returns the closest visible ancestor
      node of the current node.  If the search for
      parentNode attempts to step upward from the
      TDomTreeWalker's root node, or if it fails to find
      a visible ancestor node, this method retains the
      current position and returns nil.

      Return Value:
         The new parent node, or nil if the current node
         has no parent in the TDomTreeWalker's logical
         view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function previousNode: TDomNode; virtual;
    <literallayout>
      Moves the TDomTreeWalker to the previous visible
      node in document order relative to the current
      node, and returns the new node. If the current
      node has no previous node, or if the search for
      previousNode attempts to step upward from the
      TDomTreeWalker's root node, returns nil, and
      retains the current node.

      Return Value:
         The new node, or nil if the current node has
         no previous node in the TDomTreeWalker's
         logical view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function previousSibling: TDomNode; virtual;
    <literallayout>
      Moves the TDomTreeWalker to the previous sibling
      of the current node. If the current node has no
      visible previous sibling returns nil, and retains
      the current node.

      Return Value:
         The new node, or nil if the current node has
         no previous sibling in the TDomTreeWalker's
         logical view.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>Filters</title>

  <sect2>
  <title>TDomWhatToShow (#)</title>

  <para> TDomWhatToShow = set of TDomNodeType;</para>
  <para>SHOW_ALL: TDomWhatToShow = [ntElement_Node .. High(TDomNodeType)];</para>

  <para>These are the available values for the whatToShow parameter used in TDomTreeWalkers and TDomIterators. If a node type is not contained in whatToShow, that will be taken as a request to skip over this type of node; the behavior in that case is similar to that of filter_skip.</para>

  </sect2>

  <sect2>
  <title>TDomFilterResult (#)</title>

  <para>The following constants are returned by the acceptNode method of the TDomFilter class.</para>

  <para>Defined Constants:</para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    filter_accept
    <literallayout>
      Accept the node. Navigation methods defined for
      TDomNodeIterator or TDomTreeWalker will return
      this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    filter_reject
    <literallayout>
      Reject the node. Navigation methods defined for
      TDomNodeIterator or TreeWalker will not return
      this node.  For TreeWalker, the children of this
      node will also be rejected.  Iterators treat this
      as a synonym for filter_skip.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    filter_skip
    <literallayout>
      Skip this single node. Navigation methods defined
      for TDomNodeIterator or TDomTreeWalker will not
      return this node.  For both TDomNodeIterator and
      TDomTreewalker, the children of this node will
      still be considered.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  <sect2>
  <title>TDomNodeFilter = class (#)</title>

  <para> TDomNodeFilter allow the user to create objects that "filter out" nodes. Each filter contains a user-written function that looks at a node and determines whether or not it should be presented as part of the traversal's logical view of the document. To use a TDomNodeFilter, you create a TDomNodeIterator or a TDomTreeWalker that uses the filter. The traversal engine applies the filter to each node, and if the filter does not accept the node, traversal skips over the node as though it were not present in the document. NodeFilters need not know how to navigate the structure that contains the nodes on which they operate.</para>

  <para>Filters will be consulted when a traversal operation is performed, or when a TDomNodeIterator's reference node is removed from the subtree being iterated over and it must select a new one. However, the exact timing of these filter calls may vary from one XDOM release to another. For that reason, TDomNodeFilters should not attempt to maintain state based on the history of past invocations; the resulting behavior may not be portable.</para>

  <para>Similarly, TDomTreeWalkers and TDomNodeIterators should behave as if they have no memory of past filter results, and no anticipation of future results. If the conditions a TDomNodeFilter is examining have changed (e.g., an attribute which it tests has been added or removed) since the last time the traversal logic examined this node, this change in visibility will be discovered only when the next traversal operation is performed. For example: if the filtering for the current node changes from filter_accept to filter_skip, a TDomTreeWalker will be able to navigate off that node in any direction, but not back to it unless the filtering conditions change again. TDomNodeFilters which change during a traversal can be written, but their behavior may be confusing and they should be avoided when possible.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function acceptNode(const n: TDomNode): TDomFilterResult; virtual;
    abstract;
    <literallayout>
      Test whether a specified node is visible in the logical
      view of a TreeWalker or NodeIterator. This function will
      be called by the implementation of TreeWalker and
      NodeIterator; it is not intended to be called directly
      from user code. (Though you could do so if you wanted to
      use the same filter to guide your own application logic.)

      Parameters:
      - n
         The node to check to see if it passes the filter or
         not.

      Return Value:
         A constant to determine whether the node is accepted,
         rejected, or skipped.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  </sect1>

</chapter>

<chapter>
<title>The XPath Implementation (+)</title>

<para>The [XPath 1.0] specification defines a language whose main purpose is to address parts of an XML document. XDOM supports the evaluation of XPath expressions on document trees of type TDomDocumentXPath.</para>

  <sect1>
  <title>The XPath Document Model</title>

  <para>The XPath language models an XML document as a tree of nodes represented in XDOM by the TDomDocumentXPath class. This XPath data model is similar to, but not identical with the standard XDOM document model. The main differences are as follows:</para>
  
  <itemizedlist>

  <listitem><para>The XPath model relies on the XML information set as specified in [XML Infoset]. XML documents that do not conform to [XML Namespaces] are not considered to have meaningful information sets (see [XML Infoset], sec. 1.). Therefore, the XPath data model has to be namespace-aware.</para></listitem>
  
  <listitem><para>The XPath model does not include a representation for document type declarations, entity references and CDATA sections. Therefore, a TDomDocumentXPath object does not support the creation of respective node types.  When creating a document tree according to the XPath data model, document type declarations must be omitted, and entity references and CDATA sections must be resolved into Text nodes.</para></listitem>

  <listitem><para>The XPath model represents character information items in a single logical Text node where an XDOM document tree may have multiple fragmented nodes due to CDATA sections, entity references, etc. Therefore, XDOM supports only the evaluation of XPath expressions on normalized document trees, although it does, for performance reasons, not prohibit the application to create documents with adjacent Text nodes and to use XPath expressions on such a non normalized document tree. However, doing so may produce wrong results and thus is strongly discouraged.</para></listitem>

  <listitem><para>The XPath model expects namespace nodes for each in-scope namespace to be attached to each element. XDOM only maintains the declaration of namespaces instead of replicating them on each Element where they are in-scope. The XDOM implementation of XPath returns a new TDomXPathNamespace node to properly preserve identity and ordering. This node type is only visible using the XPath evaluation methods.</para></listitem>

  <listitem><para>In the XPath model there are no attribute nodes corresponding to attributes that declare namespaces. Nevertheless, in the XDOM XPath implementation such attributes must be represented in the document tree as ordinary TDomAttr nodes. When evaluating an XPath expression these nodes are only used for prefix-namespace lookup, but otherwise do not count as attribute nodes. An application should not trigger an XPath evaluation with such an attribute node as its context node.</para></listitem>

  </itemizedlist>

  <para>The document order of nodes in the XDOM Core has been defined to be compatible with the XPath document order. The XPath document model is extending the document order of the DOM Core to include the TDomXPathNamespace nodes. Element nodes occur before their children. The attribute nodes and namespace nodes of an element occur before the children of the element. The namespace nodes are defined to occur before the attribute nodes. The relative order of namespace nodes is implementation-dependent. The relative order of attribute nodes is implementation-dependent.</para>

  <para>The TXPathExpression.ContextNode property excepts only nodes whose root document is of type TDomDocumentXPath. For performance reasons, other XPath methods which include a parameter of type TDomNode do not verify the type of the specified node's root document. Nevertheless, it is strongly discouraged to pass nodes of a non XPath document tree to these methods, because it may produce unpredictable results in this or future XDOM releases.</para>

  </sect1>

  <sect1>
  <title>Performing XPath Evaluations</title>

  <para>Important: XPath evaluations should only be performed on document trees which conform to the XPath Document Model as described in the relevant section of this manual. Also note that the XPath id() function requires that the IDs list of the context node's root document had been initialized.</para>

	<para>To evaluate an XPath expression with a certain context node an application may use the node's e
	EvaluateToBoolean, EvaluateToNumber, EvaluateToNode, or EvaluateToWideString function. For details see the description of the TDomNode class.</para>

	<para>Using this functions is relatively straightforward. For example</para>

<programlisting>ReturnNode := MyNode.EvaluateToNode('child::para[position()=last()]');</programlisting>
	
  <para>returns the last 'para' child element of 'MyNode', or nil if no such element exists.</para>
	
	<para>The evaluate methods from the TDomNode class are easy to apply, but cannot generally be recommended if  performance is an issue.  The reason is that anytime such a method is called the XPath expression must be analyzed again.  What is happening behind the stage is that the expression is parsed into a so-called abstract syntax tree which represents the structure of the expression in a tree of XPath syntax objects. A TXPathExpression object is used to build and maintain this abstract syntax tree. So internally, each of the evaluate methods from the TDomNode class first creates and initializes such a TXPathExpression object, then calls the Evaluate method of this TXPathExpression object which actually performs the XPath evaluation, and finally frees the TXPathExpression object.</para>
	
	<para>If an application repeatedly needs to apply the same XPath expression it is more efficient to use a persistent TXPathExpression component that can be dropped on a form at design-time or created by an application at run-time. Such a TXPathExpression component can reuse its internal abstract syntax tree when applying the same XPath expression on different context nodes. The internal abstract syntax tree is built either the first time the TXPathExpression.Evaluate function is called or at anytime before by calling the TXPathExpression.Prepare function. Here is an example about how to use a run-time constructed TXPathExpression component:</para>
	
<programlisting>
  procedure FindLastPara(const N1, N2: TDomNode;
                           var R1, R2: TDomNode);
  var
    Expr: TXPathExpression;
  begin
    // First, we create the TXPathExpression component
    // (an owner is not required here):
    Expr := TXPathExpression.Create(nil);
    
    try
      // We specify an XPath expression which returns
      // the last 'para' child element of a given
      // context node:
      Expr.Expression := 'child::para[position()=last()]';
      
      // We make N1 the context node:
      Expr.ContextNode := N1;
      
      // We trigger the evaluation of the expression:
      Expr.Evaluate;

      // We pass the first result node to the R1 var
      // parameter. (If there is no result node this 
      // function simply returns 'nil'.)
      R1 := Expr.ResultNode(0);

      // We repeat the same process with the second 
      // context node:
      Expr.ContextNode := N2;
      Expr.Evaluate;
      R2 := Expr.ResultNode(0);

    finally
    
      // Finally, we must free our TXPathExpression
      // component:
      Expr.Free;
      
    end;
  end;
</programlisting>

  </sect1>


  <sect1>
  <title>Using XPath Variables</title>

  <para>An XPath expression may include variable references which consists in a QName preceded by a $-sign. The prefix of the QName must be bound to a namespace URI via the context node of the expression. An unprefixed variable reference has no associated namespace URI.</para>

  <para>When a variable reference needs to be resolved during XPath evaluation, an OnRequestXPathVariable event is triggered on the TDomImplementation component associated with the context node of the XPath expression.  The application must return a valid TDomXPathCustomResult descendant representing the value the variable reference is bound to. This returned object is then maintained by XDOM and no longer in scope of the application.</para>
  
  <para>For more information see the description of the TDomImplementation.OnRequestXPathVariable event.</para>
  
  </sect1>


  <sect1>
  <title>Using User-defined XPath Functions</title>

  <para>An XPath expression may include user-defined functions. The prefix of the function name must be bound to a namespace URI via the context node of the expression. An unprefixed function name has no associated namespace URI.</para>

  <para>When a user-defined function needs to be processed during XPath evaluation, an OnRequestXPathFunctionResult event is triggered on the TDomImplementation component associated with the context node of the XPath expression. The application must return a valid TDomXPathCustomResult descendant representing the result of the user-defined function. This returned object is then maintained by XDOM and no longer in scope of the application.</para>
  
  <para>For more information see the description of the TDomImplementation.OnRequestXPathFunctionResult event.</para>
  
  </sect1>


  <sect1>
  <title>General Methods</title>

  <para></para>

  <sect2>
  <title>function XPathRound(const d: double): double;</title>

  <para>XPathRound returns a Double value that is the value of D rounded to the nearest whole number. If D is exactly halfway between two whole numbers, the result is always the number closest to positive infinity. If D is NaN, then NaN is returned. If D is positive infinity, then positive infinity is returned. If D is negative infinity, then negative infinity is returned.</para>
  
  <para>Note that the rounding algorithm of XPathRound differs from that of the Delphi Round function which uses "Banker's Rounding".</para>

  </sect2>

  <sect2>
  <title>function XPathWideStringToNumber(const s: WideString): double;</title>

  <para>Converts a WideString that consists of optional whitespace followed by an optional minus sign followed by an XPath Number followed by whitespace to the IEEE 754 number that is nearest (according to the IEEE 754 round-to-nearest rule) to the mathematical value represented by the string; any other string is converted to NaN.</para>

  </sect2>

  </sect1>


  <sect1>
  <title>Typed Constants</title>

  <para></para>

  <sect2>
  <title>TDomXPathResultType</title>

  <para> TDomXPathResultType defines all valid result types for XPath evaluations.</para>
  <para><emphasis>Defined constants:</emphasis>
     XPATH_BOOLEAN_TYPE, XPATH_NODE_SET_TYPE, XPATH_NUMBER_TYPE, XPATH_STRING_TYPE.
  </para>
  </sect2>

  <sect2>
  <title>TDomXPathResultTypes</title>

  <para> TDomXPathResultTypes = set of TDomXPathResultType;</para>
  <para> TDomXPathResultTypes defines a set of TDomXPathResultType instances.</para>
  </sect2>

  <sect2>
  <title>TDomXPathResultTypes Constants</title>

  <para>For convinience the following TDomXPathResultTypes constant has been defined:</para>
  <para>XPATH_ANY_TYPE: TDomXPathResultTypes = [ XPATH_BOOLEAN_TYPE .. High( TDomXPathResultType) ];</para>
  </sect2>

  <sect2>
  <title>TDomXPathTokenType</title>

  <para> TDomXPathResultType defines all valid XPath token types.</para>
  <para><emphasis>Defined constants:</emphasis>
                         XPATH_LEFT_PARENTHESIS_TOKEN,
                         XPATH_RIGHT_PARENTHESIS_TOKEN,
                         XPATH_LEFT_SQUARE_BRACKET_TOKEN,
                         XPATH_RIGHT_SQUARE_BRACKET_TOKEN,
                         XPATH_SINGLE_DOT_TOKEN,
                         XPATH_DOUBLE_DOT_TOKEN,
                         XPATH_COMMERCIAL_AT_TOKEN,
                         XPATH_COMMA_TOKEN,
                         XPATH_DOUBLE_COLON_TOKEN,
                         XPATH_NAME_TEST_TOKEN,
                         XPATH_NODE_TYPE_COMMENT_TOKEN,
                         XPATH_NODE_TYPE_TEXT_TOKEN,
                         XPATH_NODE_TYPE_PI_TOKEN,
                         XPATH_NODE_TYPE_NODE_TOKEN,
                         XPATH_AND_OPERATOR_TOKEN,
                         XPATH_OR_OPERATOR_TOKEN,
                         XPATH_MOD_OPERATOR_TOKEN,
                         XPATH_DIV_OPERATOR_TOKEN,
                         XPATH_MULTIPLY_OPERATOR_TOKEN,
                         XPATH_SLASH_OPERATOR_TOKEN,
                         XPATH_SHEFFER_STROKE_OPERATOR_TOKEN,
                         XPATH_PLUS_OPERATOR_TOKEN,
                         XPATH_MINUS_OPERATOR_TOKEN,
                         XPATH_IS_EQUAL_OPERATOR_TOKEN,
                         XPATH_IS_NOT_EQUAL_OPERATOR_TOKEN,
                         XPATH_LESS_THAN_OPERATOR_TOKEN,
                         XPATH_LESS_THAN_OR_EQUAL_OPERATOR_TOKEN,
                         XPATH_GREATER_THAN_OPERATOR_TOKEN,
                         XPATH_GREATER_THAN_OR_EQUAL_OPERATOR_TOKEN,
                         XPATH_FUNCTION_NAME_TOKEN,
                         XPATH_AXIS_NAME_ANCESTOR_TOKEN,
                         XPATH_AXIS_NAME_ANCESTOR_OR_SELF_TOKEN,
                         XPATH_AXIS_NAME_ATTRIBUTE_TOKEN,
                         XPATH_AXIS_NAME_CHILD_TOKEN,
                         XPATH_AXIS_NAME_DESCENDANT_TOKEN,
                         XPATH_AXIS_NAME_DESCENDANT_OR_SELF_TOKEN,
                         XPATH_AXIS_NAME_FOLLOWING_TOKEN,
                         XPATH_AXIS_NAME_FOLLOWING_SIBLING_TOKEN,
                         XPATH_AXIS_NAME_NAMESPACE_TOKEN,
                         XPATH_AXIS_NAME_PARENT_TOKEN,
                         XPATH_AXIS_NAME_PRECEDING_TOKEN,
                         XPATH_AXIS_NAME_PRECEDING_SIBLING_TOKEN,
                         XPATH_AXIS_NAME_SELF_TOKEN,
                         XPATH_LITERAL_TOKEN,
                         XPATH_NUMBER_TOKEN,
                         XPATH_VARIABLE_REFERENCE_TOKEN,
                         XPATH_END_OF_TEXT_TOKEN,
                         XPATH_INVALID_TOKEN.
  </para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisType</title>

  <para> TDomXPathAxisType is used to indicate the axis of an XPath result node-set.</para>
  <para><emphasis>Defined constants:</emphasis>
     XPATH_FORWARD_AXIS, XPATH_REVERSE_AXIS.
  </para>
  </sect2>

  <sect2>
  <title>TDomXPathSlashStatus</title>

  <para> TDomXPathSlashStatus is internally used by the TDomXPathTokenizer class when processing a double slash token.  It is only of interest if one wants to modify the TDomXPathTokenizer to use it for something else than XPath 1.0.</para>
  <para><emphasis>Defined constants:</emphasis>
                                SL_NO_DOUBLE_SLASH,
                                SL_XPATH_AXIS_NAME_DESCENDANT_OR_SELF_TOKEN_FOLLOWS,
                                SL_XPATH_DOUBLE_COLON_TOKEN_FOLLOWS,
                                SL_XPATH_NODE_TYPE_NODE_TOKEN_FOLLOWS,
                                SL_XPATH_LEFT_PARENTHESIS_FOLLOWS,
                                SL_XPATH_RIGHT_PARENTHESIS_FOLLOWS,
                                SL_XPATH_SLASH_OPERATOR_TOKEN_FOLLLOWS.
  </para>
  </sect2>

  </sect1>


  <sect1>
  <title>XPath Event Classes</title>

  <para>The following events are especially designed for XPath:</para>

  <sect2>
  <title>TDomRequestXPathFunctionResultEvent</title>
    <para>
    <literallayout>
      TDomRequestXPathFunctionResultEvent =
          procedure(const NamespaceUri,
                          LocalName: WideString;
                          NamespaceUri: WideString;
                    const ContextNode: TDomNode;
                    const ContextPosition: Integer;
                    const ContextSize: Integer;
                    const Arguments: TList;
                      var Value: TDomXPathCustomResult) 
                   of object;
    </literallayout>
    </para>

  <para>Defines the event class which is used for the OnRequestXPathFunctionResult event of the TDomImplementation class.</para>

  </sect2>

  <sect2>
  <title>TDomRequestXPathVariableEvent</title>
    <para>
    <literallayout>
      TDomRequestXPathVariableEvent =
          procedure(const Sender: TXPathExpression;
                    const NamespaceUri,
                          LocalName: WideString;
                      var Value: TDomXPathCustomResult) 
                   of object;
    </literallayout>
    </para>

  <para>Defines the event class which is used for the OnRequestXPathVariable event of the TDomImplementation class.</para>

  </sect2>

  <sect2>
  <title>TDomXPathLookupNamespaceURIEvent</title>
    <para>
    <literallayout>
      TDomXPathLookupNamespaceURIEvent =
          procedure(const Sender: TXPathExpression;
                    const APrefix: WideString;
                      var ANamespaceURI: WideString) 
                   of object;
    </literallayout>
    </para>

  <para>Defines the event class which is used for the OnLookupNamespaceURI event of the TXPathExpression class.</para>

  </sect2>

  </sect1>


  <sect1>
  <title>XPath Function Library</title>
  
  <para>The XPath 1.0 function library consists of a mapping from function names to functions. The core functions that all XPath 1.0 implementations must support are implemented in XDOM according to the TDomXPathFunction function type. For a description of these functions see [XPath 1.0], sec. 4.</para>

  <sect2>
  <title>TDomXPathFunction Function Type</title>
  <literallayout>
  TDomXPathFunction = function(
      const contextNode: TDomNode;
      const contextPosition: Integer;
      const contextSize: Integer;
      const arguments: TList
    ): TDomXPathCustomResult;
  </literallayout>

  <para>The TDomXPathFunction type represents an XPath function. All XDOM implementations of XPath functions follow this paradigm.</para>

  <para>Parameters:</para>
  <itemizedlist>
    <listitem><para><synopsis>contextNode: TDomNode</synopsis>
    The context node of the evaluation context. Note that this is not always the same as the context node of the expression context. The context node of the expression context is the context node when the XPath expression was evoked; the context node of the evaluation context is the context node of the current evaluation step that triggers the XPath function call.</para>
    </listitem>
    <listitem><para><synopsis>contextPosition: Integer</synopsis>
    The context position of the evaluation context.</para>
    </listitem>
    <listitem><para><synopsis>contextSize: Integer</synopsis>
    The context size of the evaluation context.</para>
    </listitem>
    <listitem><para><synopsis>arguments: TList</synopsis>
    The list of TDomExpr arguments for this XPath function. The number and kind of allowed arguments varies from function to function. For a description of the arguments for the XPath core functions see [XPath 1.0], sec. 4.</para>
    </listitem>
  </itemizedlist>

  <para>Return Value:</para>
  <itemizedlist>
    <listitem><para>A newly created TDomXPathCustomResult object that represents the return value of the XPath function.</para>
    </listitem>
  </itemizedlist>

  <para>Exceptions:</para>
  <itemizedlist>
    <listitem><para>If in an error occurs during evaluation of an XPath function call, the function should raise an EXPath_Invalid_Function_Call_Err exception.</para>
    </listitem>
  </itemizedlist>
  </sect2>

  <sect2>
  <title>Node Set Functions</title>

  <para>The functions listed here correspond to the node set functions of the XPath 1.0 core function library. Their parameter list follows the paradigm of the TDomXPathFunction function type. For a description of these functions see [XPath 1.0], sec. 4.1.</para>

	<itemizedlist>
		<listitem>XPathFunctionLast</listitem>
		<listitem>XPathFunctionPosition</listitem>
		<listitem>XPathFunctionCount</listitem>
		<listitem>XPathFunctionId</listitem>
		<listitem>XPathFunctionLocalName</listitem>
		<listitem>XPathFunctionNamespaceUri</listitem>
		<listitem>XPathFunctionName</listitem>
	</itemizedlist>

  <para>Important: The XPath id() function requires that the IDs list of the context node's root document had been initialized.</para>

  </sect2>


  <sect2>
  <title>String Functions</title>

  <para>The functions listed here correspond to the string functions of the XPath 1.0 core function library. Their parameter list follows the paradigm of the TDomXPathFunction function type. For a description of these functions see [XPath 1.0], sec. 4.2.</para>

	<itemizedlist>
		<listitem>XPathFunctionString</listitem>
		<listitem>XPathFunctionConcat</listitem>
		<listitem>XPathFunctionStartsWith</listitem>
		<listitem>XPathFunctionContains</listitem>
		<listitem>XPathFunctionSubstringBefore</listitem>
		<listitem>XPathFunctionSubstringAfter</listitem>
		<listitem>XPathFunctionSubstring</listitem>
		<listitem>XPathFunctionStringLength</listitem>
		<listitem>XPathFunctionNormalizeSpace</listitem>
		<listitem>XPathFunctionTranslate</listitem>
	</itemizedlist>

  </sect2>


  <sect2>
  <title>Boolean Functions</title>

  <para>The functions listed here correspond to the Boolean functions of the XPath 1.0 core function library. Their parameter list follows the paradigm of the TDomXPathFunction function type. For a description of these functions see [XPath 1.0], sec. 4.3.</para>

	<itemizedlist>
		<listitem>XPathFunctionBoolean</listitem>
		<listitem>XPathFunctionNot</listitem>
		<listitem>XPathFunctionTrue</listitem>
		<listitem>XPathFunctionFalse</listitem>
		<listitem>XPathFunctionLang</listitem>
	</itemizedlist>

  </sect2>


  <sect2>
  <title>Number Functions</title>

  <para>The functions listed here correspond to the number functions of the XPath 1.0 core function library. Their parameter list follows the paradigm of the TDomXPathFunction function type. For a description of these functions see [XPath 1.0], sec. 4.4.</para>

	<itemizedlist>
		<listitem>XPathFunctionNumber</listitem>
		<listitem>XPathFunctionSum</listitem>
		<listitem>XPathFunctionFloor</listitem>
		<listitem>XPathFunctionCeiling</listitem>
		<listitem>XPathFunctionRound</listitem>
	</itemizedlist>

  </sect2>

  </sect1>


  <sect1>
  <title>TXPathExpression = class(TDomBaseComponent)</title>

  <para>The TXPathExpression class represents a parsed XPath expression.</para>

  <para><emphasis>Published Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property expression: WideString; 
    <literallayout>
      The text of the XPath expression to be 
      evaluated. Modifying the XPath expression 
      puts the TXPathExpression object in
      an unprepared state (isValid returns
      'T_UNKNOWN').
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnLookupNamespaceURI: TDomXPathLookupNamespaceURIEvent 
    <literallayout>
  TDomXPathLookupNamespaceURIEvent =
    procedure(const Sender: TXPathExpression;
              const APrefix: WideString;
                var ANamespaceURI: WideString) 
            of object;

      This event is triggered during the evaluation of the XPath 
      expression for each of its prefix to allow the application 
      to modify the mapping from prefixes to namespace URIs.

      Note that modifying such mappings is not conforming to the
      [XPath 1.0] specification.  Applications should only use
      this event if strict [XPath 1.0] compliance is not 
      required.

      Parameters:
      - Sender
         This TXPathExpression component.
      - APrefix
         The prefix whose namespace URI is being looked up.

      Var Parameters:
      - ANamespaceURI
         This parameter is initialized with the namespace URI
         as given in the namespace declaration for the prefix
         in the expression context, or with an empty WideString
         if there is no namespace declaration for the prefix in
         the expression context.  An application may modify 
         this parameter to associated a different namespace URI
         with the prefix.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property contextNode: TDomNode
    <literallayout>
      The context node for the evaluation of this
      XPath expression.  It either must be 'nil', 
      or its root document must be of type
      TDomDocumentXPath.
      
      Exceptions on setting:
      - ENot_Supported_Err
         Raised if the specified new context node
         is not of a type permitted as an XPath
         context node, or if the root document of 
         the context node is not of type 
         TDomDocumentXPath.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isValid: TDomTrinarean; (readonly)
    <literallayout>
      Returns 'T_TRUE' if the TXPathExpression 
      object was previously successfully prepared.
      Returns 'T_FALSE' if the TXPathExpression 
      object was previously unsuccessfully prepared.
      Returns 'T_UNKNOWN' if the TXPathExpression 
      object has not yet been prepared.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  
  
  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(aOwner: TComponent); override;
    <literallayout>
      Creates a new instance of a TXPathExpression.
      Note that TXPathExpression objects are
      automatically being created when adding them
      from the component's palette onto a form.

      Parameters:
      - AOwner
         The component that holds the new
         TXPathExpression object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function acquireXPathResult(const resultType: TDomXPathResultClass): TDomXPathCustomResult; virtual;
    <literallayout>
      Creates a new instance of the specified XPath
      result class and initializes it, relying on 
      XPath conversions for the specified type, with 
      the current XPath result value represented by 
      this XPathExpression object.

      Like for any object instantiated at runtime 
      that does not have an owner the application 
      must take care that a TDomXPathCustomResult 
      object that was created by calling 
      AcquireXPathResult is correctly destroyed
      when it is no longer needed.  However, if 
      you pass the object to XDOM's XPath
      evaluation process as the value of a var 
      parameter of an event handler, such as
      OnRequestXPathFunctionResult or
      OnRequestXPathVariable, the evaluation 
      process becomes the owner of the object,
      and it is automatically freed when it is 
      no longer needed.

      Parameters:
      - resultType
         The type of object to be created. Valid 
         values are: TDomXPathNodeSetResult,
         TDomXPathBooleanResult, TDomXPathNumberResult, 
         and TDomXPathStringResult.

      Return Value:
         An newly created and initialized 
         TDomXPathCustomResult descendant.

      Exceptions:
      - ENot_Supported_Err
         Raised if an invalid resultType was
         specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function evaluate: Boolean; virtual;
    <literallayout>
      Evaluates this XPath expression.  If successful,
      the result of the evaluation is afterwards 
      accessibly via the various result... functions
      of this TXPathExpression object.

      Return Value:
         'True' if the XPath expression was successfully
         evaluated, 'False' otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function hasNodeSetResult: Boolean; virtual;
    <literallayout>
      Tests whether the last evaluation result was a
      node-set.

      Return Value:
         'True' if the last evaluation result was a
         node-set, 'False' otherwise or if the last
         evaluation was invalid.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function prepare: Boolean; virtual;
    <literallayout>
      Befor an XPath expression is evaluated it 
      must internally be parsed into an abstract 
      syntax tree.  This is done automatically 
      the first time the Evaluate function is
      called on a new expression. The Prepare
      function allows an application to build
      the abstract syntax tree at any time 
      before executing the Evaluate function,
      for example when waiting for user input.
      Calling Prepare if the expression was
      already been prepared does nothing.

      Return Value:
         If the internal abstract syntax tree was
         successfully built, 'True' is returned.
         If the expression has a syntax error or
         otherwise is not a legal expression 
         'False' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function resultAxisType: TDomXPathAxisType; virtual;
    <literallayout>
      Returns the axis type of the last evaluation
      result.

      Return Value:
         The axis type (XPATH_FORWARD_AXIS or
         XPATH_REVERSE_AXIS) of the last evaluation
         result.  For invalid or none node-set results 
         XPATH_FORWARD_AXIS is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function resultAsBoolean: Boolean; virtual;
    <literallayout>
      Returns the last evaluation result converted
      to a Boolean according to the XPath boolean() 
      function as specified in [XPath 1.0], sec. 4.3:

      - A number is true if and only if it is neither
        positive nor negative zero nor NaN.
      - A node-set is true if and only if it is 
        non-empty.
      - A string is true if and only if its length is
        non-zero.

      Return Value:
         The last evaluation result converted into
         a Boolean.  For invalid node-set results 
         'False' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function resultAsNumber: double; virtual;
    <literallayout>
      Returns the last evaluation result converted
      to a number according to the XPath number() 
      function as specified in [XPath 1.0], sec. 4.4:

      - A string that consists of optional whitespace
        followed by an optional minus sign followed by
        an XPath Number followed by whitespace is 
        converted to the IEEE 754 number that is 
        nearest (according to the IEEE 754 
        round-to-nearest rule) to the mathematical 
        value represented by the string; any other 
        string is converted to NaN.
      - Boolean true is converted to 1; Boolean false 
        is converted to 0.
      - A node-set is first converted to a string as 
        if by a call to the XPath string() function 
        and then converted in the same way as a 
        string argument.

      Return Value:
         The last evaluation result converted into a 
         number.  For invalid node-set results 'NaN'
         is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function resultAsWideString: WideString; virtual;
    <literallayout>
      Returns the last evaluation result converted
      to a WideString according to the XPath string() 
      function as specified in [XPath 1.0], sec. 4.2:

      - A node-set is converted to a WideString by 
        returning the string-value of the node in the
        node-set that is first in document order. If 
        the node-set is empty, an empty WideString is 
        returned.
      - The Boolean False value is converted to the
        WideString 'False'. The Boolean True value 
        is converted to the string 'True'.
      - A number is converted to a WideString as 
        follows:
        - NaN is converted to the WideString 'NaN'.
        - Positive zero is converted to the 
          WideString '0'.
        - Negative zero is converted to the 
          WideString '0'.
        - Positive infinity is converted to the 
          WideString 'Infinity'.
        - Negative infinity is converted to the 
          WideString '-Infinity'.
        - If the number is an Integer, the number is
          represented in decimal form as a Number 
          with no decimal point and no leading zeros,
          preceded by a minus sign (-) if the number
          is negative.
        - Otherwise the number is represented in 
          decimal form as a Number including a 
          decimal point with at least one digit
          before the decimal point and at least one
          digit after the decimal point, preceded by
          a minus sign (-) if the number is negative;
          there must be no leading zeros before the 
          decimal point apart possibly from the one
          required digit immediately before the
          decimal point; beyond the one required 
          digit after the decimal point there must 
          be as many, but only as many, more digits
          as are needed to uniquely distinguish the 
          number from all other IEEE 754 numeric 
          values.

      Return Value:
         The last evaluation result converted into a 
         WideString.  For invalid node-set results an
         empty WideString is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function resultNode(const index: Integer): TDomNode; virtual;
    <literallayout>
      Returns the indexth item of the last evaluation 
      result if it was a node-set. If index is 
      greater than or equal to the number of nodes
      in the set, or if the XPath result does not 
      represent a node set, or if the last
      evaluation was invalid, this function returns 
      'nil'.

      Parameters:
      - index
         An index into the node set.  Valid values 
         for indices are '0' to 'resultLength - 1' 
         inclusive.

      Return Value:
         The node at the indexth position in the 
         node-set, or 'nil' if that is not a valid
         index or the XPath result does not represent 
         a node-set or the last evaluation was not 
         valid.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function resultLength: Integer; virtual;
    <literallayout>
      Returns the number of nodes of the last 
      evaluation result if it was a node-set. If the
      XPath result does not represent a node set, or
      if the last evaluation was invalid, this 
      function returns '0'.

      Return Value:
         The number of nodes in the result node-set, 
         or '0' if the XPath result does not represent 
         a node-set or the last evaluation was not 
         valid.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect1>


  <sect1>
  <title>XPath Result Classes</title>

  <para>The classes described in this section are internally used during XPath evaluation. They represent (intermediate) results of the evaluation of an XPath expression within the context of a particular node. All XPath result classes inherit from the common abstract base class TDomXPathCustomResult.  The class hierarchy of XPath result classes is as follows:</para>

  <literallayout><emphasis>
TPersistent
  |__ TDomXPathCustomResult
       |__ TDomXPathBooleanResult
       |__ TDomXPathNumberResult
       |__ TDomXPathNodeSetResult
       |__ TDomXPathStringResult
  </emphasis></literallayout>

  <para>There are two typical situations where an application directly needs to create and manipulate such classes: When an applications must handle a TDomImplementation.OnRequestXPathVariable or OnRequestXPathFunctionResult event. In both cases it must return a TDomXPathCustomResult descendant representing the value of an XPath variable or the result of a user-defined XPath function respectively.</para>
  
  <para>Note that applications must not directly use instances of TDomXPathCustomResult.  Instead use one of the classes derived from TDomXPathCustomResult.</para>


  <sect2>
  <title>TDomXPathCustomResult = class(TCustomOwnedObject)</title>

  <para>The TDomXPathCustomResult class is used as the common abstract base class for the specific XPath result classes.  Do not use instances of this class directly in your application. Instead use one of the classes derived from TDomXPathCustomResult.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property axisType: TDomXPathAxisType
    <literallayout>
      Specifies the axis of an XPath result if the
      result is a node-set. Valid values are
      XPATH_FORWARD_AXIS and XPATH_REVERSE_AXIS.
      Switching the value reverses the order of the
      nodes contained in the node-set.
      
      If the result is not a node-set this property 
      has no practical meaning, returning always 
      XPATH_FORWARD_AXIS (trying to set it to 
      XPATH_REVERSE_AXIS has no effect).
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  
  
  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create; 
    <literallayout>
      Creates a new instance of a TDomXPathCustomResult.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function asBoolean: Boolean; virtual; abstract;
    <literallayout>
      Returns the XPath result converted into a
      Boolean.
      
      Return Value:
         The XPath result converted to a Boolean
         according to the XPath boolean() function
         as specified in [XPath 1.0], sec. 4.3:

         - A number is true if and only if it is neither
           positive nor negative zero nor NaN.
         - A node-set is true if and only if it is 
           non-empty.
         - A string is true if and only if its length is
           non-zero.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function asNumber: double; virtual; abstract;
    <literallayout>
      Returns the XPath result converted into a
      number.
      
      Return Value:
         The XPath result converted to a number
         according to the XPath number() function
         as specified in [XPath 1.0], sec. 4.4:

         - A string that consists of optional whitespace
           followed by an optional minus sign followed by
           an XPath Number followed by whitespace is 
           converted to the IEEE 754 number that is 
           nearest (according to the IEEE 754 
           round-to-nearest rule) to the mathematical 
           value represented by the string; any other 
           string is converted to NaN.
         - Boolean true is converted to 1; Boolean false 
           is converted to 0.
         - A node-set is first converted to a string as 
           if by a call to the XPath string() function 
           and then converted in the same way as a 
           string argument.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function asWideString: WideString; virtual; abstract;
    <literallayout>
      Returns the XPath result converted into a
      WideString.
      
      Return Value:
         The XPath result converted to a WideString
         according to the XPath string() function
         as specified in [XPath 1.0], sec. 4.2:

         - A node-set is converted to a WideString by 
           returning the string-value of the node in the
           node-set that is first in document order. If 
           the node-set is empty, an empty WideString is 
           returned.
         - The Boolean False value is converted to the
           WideString 'False'. The Boolean True value 
           is converted to the string 'True'.
         - A number is converted to a WideString as 
           follows:
           - NaN is converted to the WideString 'NaN'.
           - Positive zero is converted to the 
             WideString '0'.
           - Negative zero is converted to the 
             WideString '0'.
           - Positive infinity is converted to the 
             WideString 'Infinity'.
           - Negative infinity is converted to the 
             WideString '-Infinity'.
           - If the number is an Integer, the number is
             represented in decimal form as a Number 
             with no decimal point and no leading zeros,
             preceded by a minus sign (-) if the number
             is negative.
           - Otherwise the number is represented in 
             decimal form as a Number including a 
             decimal point with at least one digit
             before the decimal point and at least one
             digit after the decimal point, preceded by
             a minus sign (-) if the number is negative;
             there must be no leading zeros before the 
             decimal point apart possibly from the one
             required digit immediately before the
             decimal point; beyond the one required 
             digit after the decimal point there must 
             be as many, but only as many, more digits
             as are needed to uniquely distinguish the 
             number from all other IEEE 754 numeric 
             values.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function item(const index: Integer): TDomNode; virtual;
    <literallayout>
      Returns the indexth item in an XPath result
      node set.  If index is greater than or equal 
      to the number of nodes in the set, or if the
      XPath result does not represent a node set,
      this function returns 'nil'.

      Parameters:
      - index
         An index into the node set.  Valid values 
         for indices are '0' to 'length - 1' inclusive.

      Return Value:
         The node at the indexth position in the 
         node set, or 'nil' if that is not a valid 
         index or the XPath result does not represent 
         a node set.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function length: Integer; virtual;
    <literallayout>
      Returns the number of nodes in an XPath result
      node set.

      Return Value:
         The number of nodes in the result node set.
         If there are no nodes in the set, or if the
         XPath result does not represent a node set,
         this function returns '0'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function resultType: TDomXPathResultType; virtual; abstract;
    <literallayout>
      Returns a constant indicating which type of 
      XPath results is represented.

      Return Value:
         One of the following contants indicating
         the type of XPath result represented: 
         XPATH_BOOLEAN_TYPE, XPATH_NODE_SET_TYPE, 
         XPATH_NUMBER_TYPE, XPATH_STRING_TYPE.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

  <sect2>
  <title>TDomXPathResultClass = class of TDomXPathCustomResult</title>

  <para> TDomXPathResultClass is the metaclass for TDomXPathCustomResult. Its value is the class reference for TDomXPathCustomResult or for one of its descendants.</para>

  </sect2>

  <sect2>
  <title>TDomXPathNodeSetResult = class( TDomXPathCustomResult)</title>

  <para>The TDomXPathNodeSetResult is a node set as defined by [XPath 1.0] that will be accessed as a list of nodes that will be in original document order. Document modification does not invalidate the node set but may mean that reevaluation would not yield the same node set and nodes in the node set may have been altered, moved, or removed from the document.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create; virtual;
    <literallayout>
      Creates a new instance of a TDomXPathNodeSetResult.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure add(const node: TDomNode); virtual;
    <literallayout>
      Adds the reference to a node to the list of result
      items.  If the node is a TDomXPathNamespace node,
      a new equivalent TDomXPathNamespace node is
      created which is maintained by this 
      TDomXPathNodeSetResult object.

      Parameters:
      - node
         The node to add.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure addSubtree(const node: TDomNode); virtual;
    <literallayout>
      Adds a reference to the specified node and 
      to all nodes of its subtree, excluding 
      attributes, to the list of result items.  
      If the node is a TDomXPathNamespace node, 
      a new equivalent TDomXPathNamespace node 
      is created which is maintained by this 
      TDomXPathNodeSetResult object.

      Parameters:
      - node
         The root node of the subtree to add.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Assign(Source: TPersistent); override;
    <literallayout>
      Copies the properties, including all items or
      result nodes respectively, of a TXPathExpression 
      or another TDomXPathNodeSetResult object to this
      TDomXPathNodeSetResult object.  

      Parameters:
      - Source
         The object to copy.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure clear; virtual;
    <literallayout>
      Removes all reference from the list of result 
      items.  Any TDomXPathNamespace nodes are freed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Delete(const index: Integer); virtual;
    <literallayout>
      Removes the reference to the node at the position
      given by the index parameter from the list of
      result items.  The index is zero-based, so the 
      first item has an index value of 0, the second 
      item has an index value of 1, and so on.  Calling 
      'Delete' moves up all items in the items array 
      that follow the deleted item, and reduces 
      'count'.  If the node to remove is a 
      TDomXPathNamespace node it is freed.
      
      Parameters:
      - item
         The list index of the item to be deleted.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure merge(const nodeSet: TDomXPathNodeSetResult); virtual;
    <literallayout>
      Merges two sorted TDomXPathNodeSetResult objects.
      
      Parameters:
      - nodeSet
         The TDomXPathNodeSetResult object to merge
         into this TDomXPathNodeSetResult object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure sort; virtual;
    <literallayout>
      Sorts the nodes in the list in document order, 
      if the axisType is XPATH_FORWARD_AXIS, or in 
      reverse document order, if the axisType is 
      XPATH_REVERSE_AXIS.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

  <sect2>
  <title>TDomXPathBooleanResult = class( TDomXPathCustomResult)</title>

  <para>The TDomXPathBooleanResult represents a Boolean result as defined by [XPath 1.0]. Document modification does not invalidate the Boolean, but may mean that reevaluation would not yield the same Boolean.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aBooleanValue: Boolean); virtual;
    <literallayout>
      Creates a new instance of a TDomXPathBooleanResult
      and initializes the Boolean result it represents.

      Parameters:
      - aBooleanValue
         The Boolean XPath result value represented
         by this TDomXPathBooleanResult object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

  <sect2>
  <title>TDomXPathNumberResult = class( TDomXPathCustomResult)</title>

  <para>The TDomXPathNumberResult represents a number result as defined by [XPath 1.0]. Document modification does not invalidate the number, but may mean that reevaluation would not yield the same number.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aNumberValue: double); virtual;
    <literallayout>
      Creates a new instance of a TDomXPathNumberResult
      and initializes the number result it represents.

      Parameters:
      - aNumberValue
         The number XPath result value represented
         by this TDomXPathNumberResult object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

  <sect2>
  <title>TDomXPathStringResult = class( TDomXPathCustomResult)</title>

  <para>The TDomXPathStringResult represents a string result as defined by [XPath 1.0]. Document modification does not invalidate the string, but may mean that reevaluation would not yield the same number.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const aStringValue: WideString); virtual;
    <literallayout>
      Creates a new instance of a TDomXPathStringResult
      and initializes the string result it represents.

      Parameters:
      - aStringValue
         The string XPath result value represented
         by this TDomXPathStringResult object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

  <sect2>
  <title>XPath Result Conversion</title>
  <para>The following functions serve as conversion functions for XPath result objects. They are internally used during XPath evaluation.</para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    function <emphasis>XPathBooleanFunc</emphasis>
      (const oldResult: TDomXPathCustomResult): TDomXPathBooleanResult;
    <literallayout>
      Frees and converts the specified TDomXPathCustomResult 
      object to a TDomXPathBooleanResult object 
      according to the rules specified for the XPath 
      boolean() function in [XPath 1.0], sect. 4.3.

      Var Parameters:
      - oldResult
         The TDomXPathCustomResult to be freed and converted.

      Return Value:
         A new TDomXPathBooleanResult object 
         representing the result of the conversion.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>XPathNumberFunc</emphasis>
      (const oldResult: TDomXPathCustomResult): TDomXPathNumberResult;
    <literallayout>
      Frees and converts the specified TDomXPathCustomResult 
      object to a TDomXPathNumberResult object 
      according to the rules specified for the XPath 
      number() function in [XPath 1.0], sect. 4.4.

      Parameters:
      - oldResult
         The TDomXPathCustomResult to be freed and converted.

      Return Value:
         A new TDomXPathNumberResult object 
         representing the result of the conversion.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function <emphasis>XPathStringFunc</emphasis>
      (const oldResult: TDomXPathCustomResult): TDomXPathStringResult;
    <literallayout>
      Frees and converts the specified TDomXPathCustomResult 
      object to a TDomXPathStringResult object 
      according to the rules specified for the XPath 
      string() function in [XPath 1.0], sect. 4.2.

      Parameters:
      - oldResult
         The TDomXPathCustomResult to be freed and converted.

      Return Value:
         A new TDomXPathStringResult object 
         representing the result of the conversion.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>

  </sect1>


  <sect1>
  <title>TDomXPathSyntaxTree = class(TCustomOwnedObject)</title>

  <para>The TDomXPathSyntaxTree class is internally used in TXPathExpression components to analyze the lexical structure of an XPath expression and to parse it into a tree of XPath syntax nodes. A TXPathExpression component can then query its internal TDomXPathSyntaxTree object with a specific context node in order to trigger an XPath evaluation. Normally, an application does not need to use a TDomXPathSyntaxTree object directly.</para>

  <para><emphasis>Public Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property contextNode: TDomNode (readonly)
    <literallayout>
      The context node for the evaluation of this
      XPath expression as provided by the associated
      owner TXPathExpression component, or nil if 
      none is provided.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isPrepared: Boolean (readonly)
    <literallayout>
      'True' if the TDomXPathSyntaxTree object was 
      prepared with a valid XPath expression.
      'False' if the TDomXPathSyntaxTree object has
      not yet been prepared, was cleared or the last 
      attempt to prepare it has failed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ownerXPathExpression: TXPathExpression (readonly)
    <literallayout>
      Provides access to the TXPathExpression object 
      associated with this TDomXPathSyntaxTree object.
      Normally, this is the object that created and
      maintains this TDomXPathSyntaxTree object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(aOwner: TXPathExpression); 
    <literallayout>
      Creates a new instance of a TDomXPathSyntaxTree.

      Parameters:
      - aOwner
         The TXPathExpression object that ownes the 
         this TDomXPathSyntaxTree object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure clear; override;
    <literallayout>
      Clears the internal abstract syntax tree and
      sets the value of the isPrepared property to
      'False'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function evaluate: TDomXPathCustomResult; virtual;
    <literallayout>
      Evaluates an XPath expression, which was before
      initialized by calling the Prepare function.
      The context node for the evaluation is the
      context node of the associated owner 
      TXPathExpression component.  This context
      node either must be 'nil', or the reference
      document of the context node must be of type
      TDomDocumentXPath.

      Return Value:
         A TDomXPathCustomResult object which contains 
         the result of the evaluation.  As for any other
         object created, the application is responsible
         for correctly freeing the TDomXPathCustomResult
         object when it is no longer used.

      Exceptions:
      - ENot_Supported_Err
         Raised if the associated context node is of a
         type not permitted as an XPath context node.
      - EXPath_Invalid_Expression_Err
         Raised if no XPath expression has been prepared,
         or if the previous preparation had failed.
      - EXPath_Type_Err
         Raised if a type conflict was detected while
         evaluating the expression.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function prepare(const expression: WideString): Boolean; virtual;
    <literallayout>
      Analyzes the lexical structure of the specified
      XPath expression and parses it into an internal
      abstract syntax tree.  A previously constructed
      internal abstract syntax tree is first removed.
      If the expression is not syntactically correct 
      no new abstract syntax tree is built.

      Return Value:
         If the internal abstract syntax tree was
         successfully built, 'True' is returned.
         If the expression has a syntax error or
         otherwise is not a legal expression 'False'
         is returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect1>

  <sect1>
  <title>TDomXPathTokenizer = class</title>

  <para>The TDomXPathTokenizer class is internally used in the TDomXPathSyntaxTree.Prepare function.  It analyzes the lexical structure of an XPath expression and can be queried to return a sequence of lexical tokens (see [XPath 1.0], sec. 3.7).</para>
  </sect1>

  <sect1>
  <title>TDomXPathSyntaxNodeStack = class</title>

  <para>The TDomXPathSyntaxNodeStack class is internally used in the TDomXPathSyntaxTree.Prepare function when building the abstract syntax tree.</para>
  </sect1>

  <sect1>
  <title>XPath Syntax Node Classes</title>

  <para>The following classes are internally used in the TDomXPathSyntaxTree class to model the abstract syntax tree of an XPath expression.  The abstract syntax tree has the form of a binary tree.  When evaluating an expression this is done by recursive calls of the XPath syntax nodes' evaluation functions starting with the root of the abstract syntax tree.</para>

  <sect2>
  <title>TDomXPathSyntaxNode = class(TCustomOwnedObject)</title>
  <para> TDomXPathSyntaxNode is the common base class for all XPath syntax tree nodes.  It is not directly used.</para>
  </sect2>

  <sect2>
  <title>TDomXPathAbsoluteLocationPath = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [2].</para>
  </sect2>

  <sect2>
  <title>TDomXPathStep = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [4].</para>
  </sect2>

  <sect2>
  <title>TDomXPathCustomAxisName = class( TDomXPathSyntaxNode)</title>
  <para>This class is only used as a common ancestor of the axis name classes below.</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameAncestor = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameAncestorOrSelf = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameAttribute = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameChild = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameDescendant = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameDescendantOrSelf = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameFollowing = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameFollowingSibling = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameNamespace = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameParent = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNamePreceding = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNamePrecedingSibling = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAxisNameSelf = class( TDomXPathCustomAxisName)</title>
  <para>Cf. [XPath 1.0], prod. [6].</para>
  </sect2>

  <sect2>
  <title>TDomXPathNodeTest = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [7].</para>
  </sect2>

  <sect2>
  <title>TDomXPathPredicate = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [8].</para>
  </sect2>

  <sect2>
  <title>TDomXPathExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [14].</para>
  </sect2>

  <sect2>
  <title>TDomXPathPrimaryExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [15].</para>
  </sect2>

  <sect2>
  <title>TDomXPathFunctionCall = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [16].</para>
  </sect2>

  <sect2>
  <title>TDomXPathUnionExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [18].</para>
  </sect2>

  <sect2>
  <title>TDomXPathPathExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [19].</para>
  </sect2>

  <sect2>
  <title>TDomXPathFilterExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [20].</para>
  </sect2>

  <sect2>
  <title>TDomXPathOrExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [21].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAndExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [22].</para>
  </sect2>

  <sect2>
  <title>TDomXPathEqualityExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [23].</para>
  </sect2>

  <sect2>
  <title>TDomXPathIsEqualExpr = class( TDomXPathEqualityExpr)</title>
  <para>Cf. [XPath 1.0], prod. [23].</para>
  </sect2>

  <sect2>
  <title>TDomXPathIsNotEqualExpr = class( TDomXPathEqualityExpr)</title>
  <para>Cf. [XPath 1.0], prod. [23].</para>
  </sect2>

  <sect2>
  <title>TDomXPathRelationalExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [24].</para>
  </sect2>

  <sect2>
  <title>TDomXPathLessThanExpr = class( TDomXPathRelationalExpr)</title>
  <para>Cf. [XPath 1.0], prod. [24].</para>
  </sect2>

  <sect2>
  <title>TDomXPathLessThanOrEqualExpr = class( TDomXPathRelationalExpr)</title>
  <para>Cf. [XPath 1.0], prod. [24].</para>
  </sect2>

  <sect2>
  <title>TDomXPathGreaterThanExpr = class( TDomXPathRelationalExpr)</title>
  <para>Cf. [XPath 1.0], prod. [24].</para>
  </sect2>

  <sect2>
  <title>TDomXPathGreaterThanOrEqualExpr = class( TDomXPathRelationalExpr)</title>
  <para>Cf. [XPath 1.0], prod. [24].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAdditiveExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [25].</para>
  </sect2>

  <sect2>
  <title>TDomXPathPlusExpr = class( TDomXPathAdditiveExpr)</title>
  <para>Cf. [XPath 1.0], prod. [25].</para>
  </sect2>

  <sect2>
  <title>TDomXPathMinusExpr = class( TDomXPathAdditiveExpr)</title>
  <para>Cf. [XPath 1.0], prod. [25].</para>
  </sect2>

  <sect2>
  <title>TDomXPathMultiplicativeExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [26].</para>
  </sect2>

  <sect2>
  <title>TDomXPathMultiplyExpr = class( TDomXPathMultiplicativeExpr)</title>
  <para>Cf. [XPath 1.0], prod. [26].</para>
  </sect2>

  <sect2>
  <title>TDomXPathDivExpr = class( TDomXPathMultiplicativeExpr)</title>
  <para>Cf. [XPath 1.0], prod. [26].</para>
  </sect2>

  <sect2>
  <title>TDomXPathModExpr = class( TDomXPathMultiplicativeExpr)</title>
  <para>Cf. [XPath 1.0], prod. [26].</para>
  </sect2>

  <sect2>
  <title>TDomXPathUnaryExpr = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [27].</para>
  </sect2>

  <sect2>
  <title>TDomXPathLeftParenthesis = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathRightParenthesis = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathLeftSquareBracket = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathRightSquareBracket = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathSingleDot = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathDoubleDot = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathCommercialAt = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathComma = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathDoubleColon = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [28].</para>
  </sect2>

  <sect2>
  <title>TDomXPathLiteral = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [29].</para>
  </sect2>

  <sect2>
  <title>TDomXPathNumber = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [30].</para>
  </sect2>

  <sect2>
  <title>TDomXPathSlashOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathShefferStrokeOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathPlusOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathMinusOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathIsEqualOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathIsNotEqualOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathLessThanOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathLessThanOrEqualOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathGreaterThanOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathGreaterThanOrEqualOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [32].</para>
  </sect2>

  <sect2>
  <title>TDomXPathAndOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [33].</para>
  </sect2>

  <sect2>
  <title>TDomXPathOrOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [33].</para>
  </sect2>

  <sect2>
  <title>TDomXPathModOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [33].</para>
  </sect2>

  <sect2>
  <title>TDomXPathDivOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [33].</para>
  </sect2>

  <sect2>
  <title>TDomXPathMultiplyOperator = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [34].</para>
  </sect2>

  <sect2>
  <title>TDomXPathFunctionName = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [35].</para>
  </sect2>

  <sect2>
  <title>TDomXPathVariableReference = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [36].</para>
  </sect2>

  <sect2>
  <title>TDomXPathNameTest = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [37].</para>
  </sect2>

  <sect2>
  <title>TDomXPathNodeTypeComment = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [38].</para>
  </sect2>

  <sect2>
  <title>TDomXPathNodeTypeText = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [38].</para>
  </sect2>

  <sect2>
  <title>TDomXPathNodeTypePI = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [38].</para>
  </sect2>

  <sect2>
  <title>TDomXPathNodeTypeNode = class( TDomXPathSyntaxNode)</title>
  <para>Cf. [XPath 1.0], prod. [38].</para>
  </sect2>

  </sect1>

</chapter>

<bibliography>
<title>References</title>
  <bibliomixed>[DOM 1] W3C (World Wide Web Consortium): Document Object Model (DOM) Level 1 Specification. Version 1.0, REC-DOM-Level-1-19981001, ed. Lauren Wood et al., 1. Oct. 1998, see "http://www.w3.org/TR/REC-DOM-Level-1".</bibliomixed>
  <bibliomixed>[DOM 2] W3C (World Wide Web Consortium): Document Object Model (DOM) Level 2 Specification. Version 1.0. REC-DOM-Level-2-Core-20001113, ed. Arnaud Le Hors et al., 13. Nov. 2000, see "http://www.w3.org/TR/DOM-Level-2".</bibliomixed>
  <bibliomixed>[ISO 639] ISO (International Organization for Standardization): ISO 639:1988 (E). Code for the representation of names of languages, [Geneva]: International Organization for Standardization, 1988.</bibliomixed>
  <bibliomixed>[ISO 8879] ISO (International Organization for Standardization): ISO 8879. Information processing  Text and office systems  Standard generalized markup language (SGML), [Geneva]: International Organization for Standardization, 1986.</bibliomixed>
  <bibliomixed>[ISO/IEC 10646] ISO (International Organization for Standardization): ISO/IEC 10646-1993 (E). Information technology  Universal Multiple-Octet Coded Character Set (UCS)  Part 1: Architecture and Basic Multilingual Plane, [Geneva]: International Organization for Standardization, 1993 (+ amendments AM 17).</bibliomixed>
  <bibliomixed>[RFC 1630] Berners-Lee, T.: "Universal Resource Identifiers in WWW", RFC 1630, June 1994, see "http://www.ietf.org/rfc/rfc1630.txt".</bibliomixed>
  <bibliomixed>[RFC 2279] Yergeau, F.: "UTF-8, a Transformation Format of ISO 10646", RFC 2279, 1998, see "http://www.ietf.org/rfc/rfc2279.txt".</bibliomixed>
  <bibliomixed>[RFC 2396] Berners-Lee, T., R. Fielding, U.C. Irvine, L. Masinter: "Uniform Resource Identifiers (URI): Generic Syntax", RFC 2396, August 1998, see "http://www.ietf.org/rfc/rfc2396.txt".</bibliomixed>
  <bibliomixed>[RFC 2781] Hoffman, P. and F. Yergeau: "UTF-16, an Encoding of ISO 10646", RFC 2781, 2000, see "http://www.ietf.org/rfc/rfc2781.txt".</bibliomixed>
  <bibliomixed>[RFC 3066] Alvestrand, H: "Tags for the Identification of Languages", RFC 3066, 2001, see "http://www.ietf.org/rfc/rfc3066.txt".</bibliomixed>
  <bibliomixed>[Unicode 3.0] The Unicode Consortium: The Unicode Standard Version 3.0, Reading (Mass.): Addison-Wesley, 2000.</bibliomixed>
  <bibliomixed>[XML Base] W3C (World Wide Web Consortium): XML Base, REC-xmlbase-20010627, ed. Jonathan Marsh, 27. June 2001, see "http://www.w3.org/TR/2001/REC-xml-base-20010627".</bibliomixed>
  <bibliomixed>[XML Canonical] W3C (World Wide Web Consortium): Canonical XML, REC-xml-c14n-20010315, ed. John Boyer, 15. march 2001, see "http://www.w3.org/TR/2001/REC-xml-c14n-20010315".</bibliomixed>
  <bibliomixed>[XML Infoset] W3C (World Wide Web Consortium): XML Information Set, REC-xml-infoset-20011024, ed. John Cowan and Richard Tobin, 24. Oct. 2001, see "http://www.w3.org/TR/2001/REC-xml-infoset-20011024".</bibliomixed>
  <bibliomixed>[XML Namespaces] W3C (World Wide Web Consortium): Namespaces in XML, REC-xml-names-19990114, ed. Tim Bray, Dave Hollander and Andrew Layman, 14. Jan. 1999, see "http://www.w3.org/TR/REC-xml-names".</bibliomixed>
  <bibliomixed>[XML Schema Part 1] W3C (World Wide Web Consortium): XML Schema Part 1: Structures, REC-xml-xmlschema-1-20010502, ed. Henry S. Thompson, David Beech, Murray Maloney and Noah Mendelsohn, 02. May 2001, see "http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/".</bibliomixed>
  <bibliomixed>[XML Schema Part 2] W3C (World Wide Web Consortium): XML Schema Part 2: Datatypes, REC-xml-xmlschema-2-20010502, ed. Paul V. Biron and Ashok Malhotra, 02. May 2001, see "http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/".</bibliomixed>
  <bibliomixed>[XML 1.0] W3C (World Wide Web Consortium): Extensible Markup Language (XML) 1.0 (Third Edition), REC-xml-20001006, ed. Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler, and François Yergeau, 04.02.2004, see "http://www.w3.org/TR/REC-xml".</bibliomixed>
  <bibliomixed>[XML 1.0 Errata] W3C (World Wide Web Consortium): XML 1.0 Second Edition Specification Errata, see "http://www.w3.org/XML/xml-V10-2e-errata".</bibliomixed>
  <bibliomixed>[XPath 1.0] W3C (World Wide Web Consortium): XML Path Language (XPath) Version 1.0, REC-xpath-19991116, ed. James Clark and Steve DeRose, 16. Nov. 1999, see "http://www.w3.org/TR/1999/REC-xpath-19991116".</bibliomixed>
</bibliography>

</book>